%!PS-Adobe-3.1 EPSF-3.0
%ADO_DSC_Encoding: Windows Cyrillic
%%Title: 1512.i042.017.P.m004.c26.switzerland set.eps
%%Creator: Adobe Illustrator(R) 19.1
%%For: ivan
%%CreationDate: 12/20/2015
%%BoundingBox: 0 0 451 420
%%HiResBoundingBox: 0 0 450.0206 420
%%CropBox: 0 0 450.0206 420
%%LanguageLevel: 2
%%DocumentData: Clean7Bit
%ADOBeginClientInjection: DocumentHeader "AI11EPS"
%%AI8_CreatorVersion: 19.1.1%AI9_PrintingDataBegin%ADO_BuildNumber: Adobe Illustrator(R) 19.1.1 x35 R agm 4.7731 ct 5.3840%ADO_ContainsXMP: MainFirst
%ADOEndClientInjection: DocumentHeader "AI11EPS"
%%Pages: 1
%%DocumentNeededResources: 
%%DocumentSuppliedResources: procset Adobe_AGM_Image 1.0 0
%%+ procset Adobe_CoolType_Utility_T42 1.0 0
%%+ procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%+ procset Adobe_CoolType_Core 2.31 0
%%+ procset Adobe_AGM_Core 2.0 0
%%+ procset Adobe_AGM_Utils 1.0 0
%%DocumentFonts: 
%%DocumentNeededFonts: 
%%DocumentNeededFeatures: 
%%DocumentSuppliedFeatures: 
%%DocumentCustomColors: 
%%CMYKCustomColor: 
%%RGBCustomColor: 
%%EndComments
         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
%%BeginDefaults
%%ViewingOrientation: 1 0 0 1
%%EndDefaults
%%BeginProlog
%%BeginResource: procset Adobe_AGM_Utils 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{currentpacking	true setpacking}if
userdict/Adobe_AGM_Utils 75 dict dup begin put
/bdf
{bind def}bind def
/nd{null def}bdf
/xdf
{exch def}bdf
/ldf 
{load def}bdf
/ddf
{put}bdf	
/xddf
{3 -1 roll put}bdf	
/xpt
{exch put}bdf
/ndf
{
	exch dup where{
		pop pop pop
	}{
		xdf
	}ifelse
}def
/cdndf
{
	exch dup currentdict exch known{
		pop pop
	}{
		exch def
	}ifelse
}def
/gx
{get exec}bdf
/ps_level
	/languagelevel where{
		pop systemdict/languagelevel gx
	}{
		1
	}ifelse
def
/level2 
	ps_level 2 ge
def
/level3 
	ps_level 3 ge
def
/ps_version
	{version cvr}stopped{-1}if
def
/set_gvm
{currentglobal exch setglobal}bdf
/reset_gvm
{setglobal}bdf
/makereadonlyarray
{
	/packedarray where{pop packedarray
	}{
		array astore readonly}ifelse
}bdf
/map_reserved_ink_name
{
	dup type/stringtype eq{
		dup/Red eq{
			pop(_Red_)
		}{
			dup/Green eq{
				pop(_Green_)
			}{
				dup/Blue eq{
					pop(_Blue_)
				}{
					dup()cvn eq{
						pop(Process)
					}if
				}ifelse
			}ifelse
		}ifelse
	}if
}bdf
/AGMUTIL_GSTATE 22 dict def
/get_gstate
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_clr_spc currentcolorspace def
	/AGMUTIL_GSTATE_clr_indx 0 def
	/AGMUTIL_GSTATE_clr_comps 12 array def
	mark currentcolor counttomark
		{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 3 -1 roll put
		/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 add def}repeat pop
	/AGMUTIL_GSTATE_fnt rootfont def
	/AGMUTIL_GSTATE_lw currentlinewidth def
	/AGMUTIL_GSTATE_lc currentlinecap def
	/AGMUTIL_GSTATE_lj currentlinejoin def
	/AGMUTIL_GSTATE_ml currentmiterlimit def
	currentdash/AGMUTIL_GSTATE_do xdf/AGMUTIL_GSTATE_da xdf
	/AGMUTIL_GSTATE_sa currentstrokeadjust def
	/AGMUTIL_GSTATE_clr_rnd currentcolorrendering def
	/AGMUTIL_GSTATE_op currentoverprint def
	/AGMUTIL_GSTATE_bg currentblackgeneration cvlit def
	/AGMUTIL_GSTATE_ucr currentundercolorremoval cvlit def
	currentcolortransfer cvlit/AGMUTIL_GSTATE_gy_xfer xdf cvlit/AGMUTIL_GSTATE_b_xfer xdf
		cvlit/AGMUTIL_GSTATE_g_xfer xdf cvlit/AGMUTIL_GSTATE_r_xfer xdf
	/AGMUTIL_GSTATE_ht currenthalftone def
	/AGMUTIL_GSTATE_flt currentflat def
	end
}def
/set_gstate
{
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_clr_spc setcolorspace
	AGMUTIL_GSTATE_clr_indx{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 1 sub get
	/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 sub def}repeat setcolor
	AGMUTIL_GSTATE_fnt setfont
	AGMUTIL_GSTATE_lw setlinewidth
	AGMUTIL_GSTATE_lc setlinecap
	AGMUTIL_GSTATE_lj setlinejoin
	AGMUTIL_GSTATE_ml setmiterlimit
	AGMUTIL_GSTATE_da AGMUTIL_GSTATE_do setdash
	AGMUTIL_GSTATE_sa setstrokeadjust
	AGMUTIL_GSTATE_clr_rnd setcolorrendering
	AGMUTIL_GSTATE_op setoverprint
	AGMUTIL_GSTATE_bg cvx setblackgeneration
	AGMUTIL_GSTATE_ucr cvx setundercolorremoval
	AGMUTIL_GSTATE_r_xfer cvx AGMUTIL_GSTATE_g_xfer cvx AGMUTIL_GSTATE_b_xfer cvx
		AGMUTIL_GSTATE_gy_xfer cvx setcolortransfer
	AGMUTIL_GSTATE_ht/HalftoneType get dup 9 eq exch 100 eq or
		{
		currenthalftone/HalftoneType get AGMUTIL_GSTATE_ht/HalftoneType get ne
			{
			 mark AGMUTIL_GSTATE_ht{sethalftone}stopped cleartomark
			}if
		}{
		AGMUTIL_GSTATE_ht sethalftone
		}ifelse
	AGMUTIL_GSTATE_flt setflat
	end
}def
/get_gstate_and_matrix
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_ctm matrix currentmatrix def
	end
	get_gstate
}def
/set_gstate_and_matrix
{
	set_gstate
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_ctm setmatrix
	end
}def
/AGMUTIL_str256 256 string def
/AGMUTIL_src256 256 string def
/AGMUTIL_dst64 64 string def
/AGMUTIL_srcLen nd
/AGMUTIL_ndx nd
/AGMUTIL_cpd nd
/capture_cpd{
	//Adobe_AGM_Utils/AGMUTIL_cpd currentpagedevice ddf
}def
/thold_halftone
{
	level3
		{sethalftone currenthalftone}
		{
			dup/HalftoneType get 3 eq
			{
				sethalftone currenthalftone
			}{
				begin
				Width Height mul{
					Thresholds read{pop}if
				}repeat
				end
				currenthalftone
			}ifelse
		}ifelse
}def 
/rdcmntline
{
	currentfile AGMUTIL_str256 readline pop
	(%)anchorsearch{pop}if
}bdf
/filter_cmyk
{	
	dup type/filetype ne{
		exch()/SubFileDecode filter
	}{
		exch pop
	}
	ifelse
	[
	exch
	{
		AGMUTIL_src256 readstring pop
		dup length/AGMUTIL_srcLen exch def
		/AGMUTIL_ndx 0 def
		AGMCORE_plate_ndx 4 AGMUTIL_srcLen 1 sub{
			1 index exch get
			AGMUTIL_dst64 AGMUTIL_ndx 3 -1 roll put
			/AGMUTIL_ndx AGMUTIL_ndx 1 add def
		}for
		pop
		AGMUTIL_dst64 0 AGMUTIL_ndx getinterval
	}
	bind
	/exec cvx
	]cvx
}bdf
/filter_indexed_devn
{
	cvi Names length mul names_index add Lookup exch get
}bdf
/filter_devn
{	
	4 dict begin
	/srcStr xdf
	/dstStr xdf
	dup type/filetype ne{
		0()/SubFileDecode filter
	}if
	[
	exch
		[
			/devicen_colorspace_dict/AGMCORE_gget cvx/begin cvx
			currentdict/srcStr get/readstring cvx/pop cvx
			/dup cvx/length cvx 0/gt cvx[
				Adobe_AGM_Utils/AGMUTIL_ndx 0/ddf cvx
				names_index Names length currentdict/srcStr get length 1 sub{
					1/index cvx/exch cvx/get cvx
					currentdict/dstStr get/AGMUTIL_ndx/load cvx 3 -1/roll cvx/put cvx
					Adobe_AGM_Utils/AGMUTIL_ndx/AGMUTIL_ndx/load cvx 1/add cvx/ddf cvx
				}for
				currentdict/dstStr get 0/AGMUTIL_ndx/load cvx/getinterval cvx
			]cvx/if cvx
			/end cvx
		]cvx
		bind
		/exec cvx
	]cvx
	end
}bdf
/AGMUTIL_imagefile nd
/read_image_file
{
	AGMUTIL_imagefile 0 setfileposition
	10 dict begin
	/imageDict xdf
	/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
	/imbufIdx 0 def
	/origDataSource imageDict/DataSource get def
	/origMultipleDataSources imageDict/MultipleDataSources get def
	/origDecode imageDict/Decode get def
	/dstDataStr imageDict/Width get colorSpaceElemCnt mul string def
	imageDict/MultipleDataSources known{MultipleDataSources}{false}ifelse
	{
		/imbufCnt imageDict/DataSource get length def
		/imbufs imbufCnt array def
		0 1 imbufCnt 1 sub{
			/imbufIdx xdf
			imbufs imbufIdx imbufLen string put
			imageDict/DataSource get imbufIdx[AGMUTIL_imagefile imbufs imbufIdx get/readstring cvx/pop cvx]cvx put
		}for
		DeviceN_PS2{
			imageDict begin
		 	/DataSource[DataSource/devn_sep_datasource cvx]cvx def
			/MultipleDataSources false def
			/Decode[0 1]def
			end
		}if
	}{
		/imbuf imbufLen string def
		Indexed_DeviceN level3 not and DeviceN_NoneName or{
			/srcDataStrs[imageDict begin
				currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
				{
					Width Decode length 2 div mul cvi string
				}repeat
				end]def		
			imageDict begin
		 	/DataSource[AGMUTIL_imagefile Decode BitsPerComponent false 1/filter_indexed_devn load dstDataStr srcDataStrs devn_alt_datasource/exec cvx]cvx def
			/Decode[0 1]def
			end
		}{
			imageDict/DataSource[1 string dup 0 AGMUTIL_imagefile Decode length 2 idiv string/readstring cvx/pop cvx names_index/get cvx/put cvx]cvx put
			imageDict/Decode[0 1]put
		}ifelse
	}ifelse
	imageDict exch
	load exec
	imageDict/DataSource origDataSource put
	imageDict/MultipleDataSources origMultipleDataSources put
	imageDict/Decode origDecode put	
	end
}bdf
/write_image_file
{
	begin
	{(AGMUTIL_imagefile)(w+)file}stopped{
		false
	}{
		Adobe_AGM_Utils/AGMUTIL_imagefile xddf 
		2 dict begin
		/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
		MultipleDataSources{DataSource 0 get}{DataSource}ifelse type/filetype eq{
			/imbuf imbufLen string def
		}if
		1 1 Height MultipleDataSources not{Decode length 2 idiv mul}if{
			pop
			MultipleDataSources{
			 	0 1 DataSource length 1 sub{
					DataSource type dup
					/arraytype eq{
						pop DataSource exch gx
					}{
						/filetype eq{
							DataSource exch get imbuf readstring pop
						}{
							DataSource exch get
						}ifelse
					}ifelse
					AGMUTIL_imagefile exch writestring
				}for
			}{
				DataSource type dup
				/arraytype eq{
					pop DataSource exec
				}{
					/filetype eq{
						DataSource imbuf readstring pop
					}{
						DataSource
					}ifelse
				}ifelse
				AGMUTIL_imagefile exch writestring
			}ifelse
		}for
		end
		true
	}ifelse
	end
}bdf
/close_image_file
{
	AGMUTIL_imagefile closefile(AGMUTIL_imagefile)deletefile
}def
statusdict/product known userdict/AGMP_current_show known not and{
	/pstr statusdict/product get def
	pstr(HP LaserJet 2200)eq 	
	pstr(HP LaserJet 4000 Series)eq or
	pstr(HP LaserJet 4050 Series )eq or
	pstr(HP LaserJet 8000 Series)eq or
	pstr(HP LaserJet 8100 Series)eq or
	pstr(HP LaserJet 8150 Series)eq or
	pstr(HP LaserJet 5000 Series)eq or
	pstr(HP LaserJet 5100 Series)eq or
	pstr(HP Color LaserJet 4500)eq or
	pstr(HP Color LaserJet 4600)eq or
	pstr(HP LaserJet 5Si)eq or
	pstr(HP LaserJet 1200 Series)eq or
	pstr(HP LaserJet 1300 Series)eq or
	pstr(HP LaserJet 4100 Series)eq or 
	{
 		userdict/AGMP_current_show/show load put
		userdict/show{
		 currentcolorspace 0 get
		 /Pattern eq
		 {false charpath f}
		 {AGMP_current_show}ifelse
		}put
	}if
	currentdict/pstr undef
}if
/consumeimagedata
{
	begin
	AGMIMG_init_common
	currentdict/MultipleDataSources known not
		{/MultipleDataSources false def}if
	MultipleDataSources
		{
		DataSource 0 get type
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width cvi string def
			1 1 Height cvi
				{
				pop
				0 1 DataSource length 1 sub
					{
					DataSource exch get
					flushbuffer readstring pop pop
					}for
				}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or DataSource 0 get xcheck and
			{
			Width Height mul cvi
				{
				0 1 DataSource length 1 sub
					{dup DataSource exch gx length exch 0 ne{pop}if}for
				dup 0 eq
					{pop exit}if
				sub dup 0 le
					{exit}if
				}loop
			pop
			}if		
		}
		{
		/DataSource load type 
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width Decode length 2 idiv mul cvi string def
			1 1 Height{pop DataSource flushbuffer readstring pop pop}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or/DataSource load xcheck and
			{
				Height Width BitsPerComponent mul 8 BitsPerComponent sub add 8 idiv Decode length 2 idiv mul mul
					{
					DataSource length dup 0 eq
						{pop exit}if
					sub dup 0 le
						{exit}if
					}loop
				pop
			}if
		}ifelse
	end
}bdf
/addprocs
{
	 2{/exec load}repeat
	 3 1 roll
	 [5 1 roll]bind cvx
}def
/modify_halftone_xfer
{
	currenthalftone dup length dict copy begin
	 currentdict 2 index known{
	 	1 index load dup length dict copy begin
		currentdict/TransferFunction known{
			/TransferFunction load
		}{
			currenttransfer
		}ifelse
		 addprocs/TransferFunction xdf 
		 currentdict end def
		currentdict end sethalftone
	}{
		currentdict/TransferFunction known{
			/TransferFunction load 
		}{
			currenttransfer
		}ifelse
		addprocs/TransferFunction xdf
		currentdict end sethalftone		
		pop
	}ifelse
}def
/clonearray
{
	dup xcheck exch
	dup length array exch
	Adobe_AGM_Core/AGMCORE_tmp -1 ddf 
	{
	Adobe_AGM_Core/AGMCORE_tmp 2 copy get 1 add ddf 
	dup type/dicttype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get
			exch
			clonedict
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	dup type/arraytype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get exch
			clonearray
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	exch dup
	Adobe_AGM_Core/AGMCORE_tmp get 4 -1 roll put
	}forall
	exch{cvx}if
}bdf
/clonedict
{
	dup length dict
	begin
	{
		dup type/dicttype eq
			{clonedict}if
		dup type/arraytype eq
			{clonearray}if
		def
	}forall
	currentdict
	end
}bdf
/DeviceN_PS2
{
	/currentcolorspace AGMCORE_gget 0 get/DeviceN eq level3 not and
}bdf
/Indexed_DeviceN
{
	/indexed_colorspace_dict AGMCORE_gget dup null ne{
		dup/CSDBase known{
			/CSDBase get/CSD get_res/Names known 
		}{
			pop false
		}ifelse
	}{
		pop false
	}ifelse
}bdf
/DeviceN_NoneName
{	
	/Names where{
		pop
		false Names
		{
			(None)eq or
		}forall
	}{
		false
	}ifelse
}bdf
/DeviceN_PS2_inRip_seps
{
	/AGMCORE_in_rip_sep where
	{
		pop dup type dup/arraytype eq exch/packedarraytype eq or
		{
			dup 0 get/DeviceN eq level3 not and AGMCORE_in_rip_sep and
			{
				/currentcolorspace exch AGMCORE_gput
				false
			}{
				true
			}ifelse
		}{
			true
		}ifelse
	}{
		true
	}ifelse
}bdf
/base_colorspace_type
{
	dup type/arraytype eq{0 get}if
}bdf
/currentdistillerparams where{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
{
	/pdfmark_5{cleartomark}bind def
}{
	/pdfmark_5{pdfmark}bind def
}ifelse
/ReadBypdfmark_5
{
	currentfile exch 0 exch/SubFileDecode filter
	/currentdistillerparams where 
	{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
	{flushfile cleartomark}
	{/PUT pdfmark}ifelse 	
}bdf
/ReadBypdfmark_5_string
{
	2 dict begin
	/makerString exch def string/tmpString exch def
	{
		currentfile tmpString readline not{pop exit}if
		makerString anchorsearch
		{
			pop pop cleartomark exit
		}{
			3 copy/PUT pdfmark_5 pop 2 copy(\n)/PUT pdfmark_5
		}ifelse
	}loop
	end
}bdf
/xpdfm
{
	{
		dup 0 get/Label eq
		{
			aload length[exch 1 add 1 roll/PAGELABEL
		}{
			aload pop
			[{ThisPage}<<5 -2 roll>>/PUT
		}ifelse
		pdfmark_5
	}forall
}bdf
/lmt{
	dup 2 index le{exch}if pop dup 2 index ge{exch}if pop
}bdf
/int{
	dup 2 index sub 3 index 5 index sub div 6 -2 roll sub mul exch pop add exch pop
}bdf
/ds{
	Adobe_AGM_Utils begin
}bdf
/dt{
	currentdict Adobe_AGM_Utils eq{
		end
	}if
}bdf
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_AGM_Core 2.0 0
%%Version: 2.0 0
%%Copyright: Copyright(C)1997-2007 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Core 209 dict dup begin put
/Adobe_AGM_Core_Id/Adobe_AGM_Core_2.0_0 def
/AGMCORE_str256 256 string def
/AGMCORE_save nd
/AGMCORE_graphicsave nd
/AGMCORE_c 0 def
/AGMCORE_m 0 def
/AGMCORE_y 0 def
/AGMCORE_k 0 def
/AGMCORE_cmykbuf 4 array def
/AGMCORE_screen[currentscreen]cvx def
/AGMCORE_tmp 0 def
/AGMCORE_&setgray nd
/AGMCORE_&setcolor nd
/AGMCORE_&setcolorspace nd
/AGMCORE_&setcmykcolor nd
/AGMCORE_cyan_plate nd
/AGMCORE_magenta_plate nd
/AGMCORE_yellow_plate nd
/AGMCORE_black_plate nd
/AGMCORE_plate_ndx nd
/AGMCORE_get_ink_data nd
/AGMCORE_is_cmyk_sep nd
/AGMCORE_host_sep nd
/AGMCORE_avoid_L2_sep_space nd
/AGMCORE_distilling nd
/AGMCORE_composite_job nd
/AGMCORE_producing_seps nd
/AGMCORE_ps_level -1 def
/AGMCORE_ps_version -1 def
/AGMCORE_environ_ok nd
/AGMCORE_CSD_cache 0 dict def
/AGMCORE_currentoverprint false def
/AGMCORE_deltaX nd
/AGMCORE_deltaY nd
/AGMCORE_name nd
/AGMCORE_sep_special nd
/AGMCORE_err_strings 4 dict def
/AGMCORE_cur_err nd
/AGMCORE_current_spot_alias false def
/AGMCORE_inverting false def
/AGMCORE_feature_dictCount nd
/AGMCORE_feature_opCount nd
/AGMCORE_feature_ctm nd
/AGMCORE_ConvertToProcess false def
/AGMCORE_Default_CTM matrix def
/AGMCORE_Default_PageSize nd
/AGMCORE_Default_flatness nd
/AGMCORE_currentbg nd
/AGMCORE_currentucr nd
/AGMCORE_pattern_paint_type 0 def
/knockout_unitsq nd
currentglobal true setglobal
[/CSA/Gradient/Procedure]
{
	/Generic/Category findresource dup length dict copy/Category defineresource pop
}forall
setglobal
/AGMCORE_key_known
{
	where{
		/Adobe_AGM_Core_Id known
	}{
		false
	}ifelse
}ndf
/flushinput
{
	save
	2 dict begin
	/CompareBuffer 3 -1 roll def
	/readbuffer 256 string def
	mark
	{
	currentfile readbuffer{readline}stopped
		{cleartomark mark}
		{
		not
			{pop exit}
		if
		CompareBuffer eq
			{exit}
		if
		}ifelse
	}loop
	cleartomark
	end
	restore
}bdf
/getspotfunction
{
	AGMCORE_screen exch pop exch pop
	dup type/dicttype eq{
		dup/HalftoneType get 1 eq{
			/SpotFunction get
		}{
			dup/HalftoneType get 2 eq{
				/GraySpotFunction get
			}{
				pop
				{
					abs exch abs 2 copy add 1 gt{
						1 sub dup mul exch 1 sub dup mul add 1 sub
					}{
						dup mul exch dup mul add 1 exch sub
					}ifelse
				}bind
			}ifelse
		}ifelse
	}if
}def
/np
{newpath}bdf
/clp_npth
{clip np}def
/eoclp_npth
{eoclip np}def
/npth_clp
{np clip}def
/graphic_setup
{
	/AGMCORE_graphicsave save store
	concat
	0 setgray
	0 setlinecap
	0 setlinejoin
	1 setlinewidth
	[]0 setdash
	10 setmiterlimit
	np
	false setoverprint
	false setstrokeadjust
	//Adobe_AGM_Core/spot_alias gx
	/Adobe_AGM_Image where{
		pop
		Adobe_AGM_Image/spot_alias 2 copy known{
			gx
		}{
			pop pop
		}ifelse
	}if
	/sep_colorspace_dict null AGMCORE_gput
	100 dict begin
	/dictstackcount countdictstack def
	/showpage{}def
	mark
}def
/graphic_cleanup
{
	cleartomark
	dictstackcount 1 countdictstack 1 sub{end}for
	end
	AGMCORE_graphicsave restore
}def
/compose_error_msg
{
	grestoreall initgraphics	
	/Helvetica findfont 10 scalefont setfont
	/AGMCORE_deltaY 100 def
	/AGMCORE_deltaX 310 def
	clippath pathbbox np pop pop 36 add exch 36 add exch moveto
	0 AGMCORE_deltaY rlineto AGMCORE_deltaX 0 rlineto
	0 AGMCORE_deltaY neg rlineto AGMCORE_deltaX neg 0 rlineto closepath
	0 AGMCORE_&setgray
	gsave 1 AGMCORE_&setgray fill grestore 
	1 setlinewidth gsave stroke grestore
	currentpoint AGMCORE_deltaY 15 sub add exch 8 add exch moveto
	/AGMCORE_deltaY 12 def
	/AGMCORE_tmp 0 def
	AGMCORE_err_strings exch get
		{
		dup 32 eq
			{
			pop
			AGMCORE_str256 0 AGMCORE_tmp getinterval
			stringwidth pop currentpoint pop add AGMCORE_deltaX 28 add gt
				{
				currentpoint AGMCORE_deltaY sub exch pop
				clippath pathbbox pop pop pop 44 add exch moveto
				}if
			AGMCORE_str256 0 AGMCORE_tmp getinterval show( )show
			0 1 AGMCORE_str256 length 1 sub
				{
				AGMCORE_str256 exch 0 put
				}for
			/AGMCORE_tmp 0 def
			}{
				AGMCORE_str256 exch AGMCORE_tmp xpt
				/AGMCORE_tmp AGMCORE_tmp 1 add def
			}ifelse
		}forall
}bdf
/AGMCORE_CMYKDeviceNColorspaces[
	[/Separation/None/DeviceCMYK{0 0 0}]
	[/Separation(Black)/DeviceCMYK{0 0 0 4 -1 roll}bind]
	[/Separation(Yellow)/DeviceCMYK{0 0 3 -1 roll 0}bind]
	[/DeviceN[(Yellow)(Black)]/DeviceCMYK{0 0 4 2 roll}bind]
	[/Separation(Magenta)/DeviceCMYK{0 exch 0 0}bind]
	[/DeviceN[(Magenta)(Black)]/DeviceCMYK{0 3 1 roll 0 exch}bind]
	[/DeviceN[(Magenta)(Yellow)]/DeviceCMYK{0 3 1 roll 0}bind]
	[/DeviceN[(Magenta)(Yellow)(Black)]/DeviceCMYK{0 4 1 roll}bind]
	[/Separation(Cyan)/DeviceCMYK{0 0 0}]
	[/DeviceN[(Cyan)(Black)]/DeviceCMYK{0 0 3 -1 roll}bind]
	[/DeviceN[(Cyan)(Yellow)]/DeviceCMYK{0 exch 0}bind]
	[/DeviceN[(Cyan)(Yellow)(Black)]/DeviceCMYK{0 3 1 roll}bind]
	[/DeviceN[(Cyan)(Magenta)]/DeviceCMYK{0 0}]
	[/DeviceN[(Cyan)(Magenta)(Black)]/DeviceCMYK{0 exch}bind]
	[/DeviceN[(Cyan)(Magenta)(Yellow)]/DeviceCMYK{0}]
	[/DeviceCMYK]
]def
/ds{
	Adobe_AGM_Core begin
	/currentdistillerparams where
		{
		pop currentdistillerparams/CoreDistVersion get 5000 lt
			{<</DetectBlends false>>setdistillerparams}if
		}if	
	/AGMCORE_ps_version xdf
	/AGMCORE_ps_level xdf
	errordict/AGM_handleerror known not{
		errordict/AGM_handleerror errordict/handleerror get put
		errordict/handleerror{
			Adobe_AGM_Core begin
			$error/newerror get AGMCORE_cur_err null ne and{
				$error/newerror false put
				AGMCORE_cur_err compose_error_msg
			}if
			$error/newerror true put
			end
			errordict/AGM_handleerror get exec
			}bind put
		}if
	/AGMCORE_environ_ok 
		ps_level AGMCORE_ps_level ge
		ps_version AGMCORE_ps_version ge and 
		AGMCORE_ps_level -1 eq or
	def
	AGMCORE_environ_ok not
		{/AGMCORE_cur_err/AGMCORE_bad_environ def}if
	/AGMCORE_&setgray systemdict/setgray get def
	level2{
		/AGMCORE_&setcolor systemdict/setcolor get def
		/AGMCORE_&setcolorspace systemdict/setcolorspace get def
	}if
	/AGMCORE_currentbg currentblackgeneration def
	/AGMCORE_currentucr currentundercolorremoval def
	/AGMCORE_Default_flatness currentflat def
	/AGMCORE_distilling
		/product where{
			pop systemdict/setdistillerparams known product(Adobe PostScript Parser)ne and
		}{
			false
		}ifelse
	def
	/AGMCORE_GSTATE AGMCORE_key_known not{
		/AGMCORE_GSTATE 21 dict def
		/AGMCORE_tmpmatrix matrix def
		/AGMCORE_gstack 64 array def
		/AGMCORE_gstackptr 0 def
		/AGMCORE_gstacksaveptr 0 def
		/AGMCORE_gstackframekeys 14 def
		/AGMCORE_&gsave/gsave ldf
		/AGMCORE_&grestore/grestore ldf
		/AGMCORE_&grestoreall/grestoreall ldf
		/AGMCORE_&save/save ldf
		/AGMCORE_&setoverprint/setoverprint ldf
		/AGMCORE_gdictcopy{
			begin
			{def}forall
			end
		}def
		/AGMCORE_gput{
			AGMCORE_gstack AGMCORE_gstackptr get
			3 1 roll
			put
		}def
		/AGMCORE_gget{
			AGMCORE_gstack AGMCORE_gstackptr get
			exch
			get
		}def
		/gsave{
			AGMCORE_&gsave
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 64 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/grestore{
			AGMCORE_&grestore
			AGMCORE_gstackptr 1 sub
			dup AGMCORE_gstacksaveptr lt{1 add}if
			dup AGMCORE_gstack exch get dup/AGMCORE_currentoverprint known
				{/AGMCORE_currentoverprint get setoverprint}{pop}ifelse
			/AGMCORE_gstackptr exch store
		}def
		/grestoreall{
			AGMCORE_&grestoreall
			/AGMCORE_gstackptr AGMCORE_gstacksaveptr store 
		}def
		/save{
			AGMCORE_&save
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 64 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			/AGMCORE_gstacksaveptr AGMCORE_gstackptr store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/setoverprint{
			dup/AGMCORE_currentoverprint exch AGMCORE_gput AGMCORE_&setoverprint
		}def	
		0 1 AGMCORE_gstack length 1 sub{
				AGMCORE_gstack exch AGMCORE_gstackframekeys dict put
		}for
	}if
	level3/AGMCORE_&sysshfill AGMCORE_key_known not and
	{
		/AGMCORE_&sysshfill systemdict/shfill get def
		/AGMCORE_&sysmakepattern systemdict/makepattern get def
		/AGMCORE_&usrmakepattern/makepattern load def
	}if
	/currentcmykcolor[0 0 0 0]AGMCORE_gput
	/currentstrokeadjust false AGMCORE_gput
	/currentcolorspace[/DeviceGray]AGMCORE_gput
	/sep_tint 0 AGMCORE_gput
	/devicen_tints[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]AGMCORE_gput
	/sep_colorspace_dict null AGMCORE_gput
	/devicen_colorspace_dict null AGMCORE_gput
	/indexed_colorspace_dict null AGMCORE_gput
	/currentcolor_intent()AGMCORE_gput
	/customcolor_tint 1 AGMCORE_gput
	/absolute_colorimetric_crd null AGMCORE_gput
	/relative_colorimetric_crd null AGMCORE_gput
	/saturation_crd null AGMCORE_gput
	/perceptual_crd null AGMCORE_gput
	currentcolortransfer cvlit/AGMCore_gray_xfer xdf cvlit/AGMCore_b_xfer xdf
		 cvlit/AGMCore_g_xfer xdf cvlit/AGMCore_r_xfer xdf
	<<
	/MaxPatternItem currentsystemparams/MaxPatternCache get
	>>
	setuserparams
	end
}def
/ps
{
	/setcmykcolor where{
		pop
		Adobe_AGM_Core/AGMCORE_&setcmykcolor/setcmykcolor load put
	}if
	Adobe_AGM_Core begin
	/setcmykcolor
	{
		4 copy AGMCORE_cmykbuf astore/currentcmykcolor exch AGMCORE_gput
		1 sub 4 1 roll
		3{
			3 index add neg dup 0 lt{
				pop 0
			}if
			3 1 roll
		}repeat
		setrgbcolor pop
	}ndf
	/currentcmykcolor
	{
		/currentcmykcolor AGMCORE_gget aload pop
	}ndf
	/setoverprint
	{pop}ndf
	/currentoverprint
	{false}ndf
	/AGMCORE_cyan_plate 1 0 0 0 test_cmyk_color_plate def
	/AGMCORE_magenta_plate 0 1 0 0 test_cmyk_color_plate def
	/AGMCORE_yellow_plate 0 0 1 0 test_cmyk_color_plate def
	/AGMCORE_black_plate 0 0 0 1 test_cmyk_color_plate def
	/AGMCORE_plate_ndx 
		AGMCORE_cyan_plate{
			0
		}{
			AGMCORE_magenta_plate{
				1
			}{
				AGMCORE_yellow_plate{
					2
				}{
					AGMCORE_black_plate{
						3
					}{
						4
					}ifelse
				}ifelse
			}ifelse
		}ifelse
		def
	/AGMCORE_have_reported_unsupported_color_space false def
	/AGMCORE_report_unsupported_color_space
	{
		AGMCORE_have_reported_unsupported_color_space false eq
		{
			(Warning: Job contains content that cannot be separated with on-host methods. This content appears on the black plate, and knocks out all other plates.)==
			Adobe_AGM_Core/AGMCORE_have_reported_unsupported_color_space true ddf
		}if
	}def
	/AGMCORE_composite_job
		AGMCORE_cyan_plate AGMCORE_magenta_plate and AGMCORE_yellow_plate and AGMCORE_black_plate and def
	/AGMCORE_in_rip_sep
		/AGMCORE_in_rip_sep where{
			pop AGMCORE_in_rip_sep
		}{
			AGMCORE_distilling 
			{
				false
			}{
				userdict/Adobe_AGM_OnHost_Seps known{
					false
				}{
					level2{
						currentpagedevice/Separations 2 copy known{
							get
						}{
							pop pop false
						}ifelse
					}{
						false
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	def
	/AGMCORE_producing_seps AGMCORE_composite_job not AGMCORE_in_rip_sep or def
	/AGMCORE_host_sep AGMCORE_producing_seps AGMCORE_in_rip_sep not and def
	/AGM_preserve_spots 
		/AGM_preserve_spots where{
			pop AGM_preserve_spots
		}{
			AGMCORE_distilling AGMCORE_producing_seps or
		}ifelse
	def
	/AGM_is_distiller_preserving_spotimages
	{
		currentdistillerparams/PreserveOverprintSettings known
		{
			currentdistillerparams/PreserveOverprintSettings get
				{
					currentdistillerparams/ColorConversionStrategy known
					{
						currentdistillerparams/ColorConversionStrategy get
						/sRGB ne
					}{
						true
					}ifelse
				}{
					false
				}ifelse
		}{
			false
		}ifelse
	}def
	/convert_spot_to_process where{pop}{
		/convert_spot_to_process
		{
			//Adobe_AGM_Core begin
			dup map_alias{
				/Name get exch pop
			}if
			dup dup(None)eq exch(All)eq or
				{
				pop false
				}{
				AGMCORE_host_sep
				{
					gsave
					1 0 0 0 setcmykcolor currentgray 1 exch sub
					0 1 0 0 setcmykcolor currentgray 1 exch sub
					0 0 1 0 setcmykcolor currentgray 1 exch sub
					0 0 0 1 setcmykcolor currentgray 1 exch sub
					add add add 0 eq
					{
						pop false
					}{
						false setoverprint
						current_spot_alias false set_spot_alias
						1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
						set_spot_alias
						currentgray 1 ne
					}ifelse
					grestore
				}{
					AGMCORE_distilling
					{
						pop AGM_is_distiller_preserving_spotimages not
					}{
						//Adobe_AGM_Core/AGMCORE_name xddf
						false
						//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 0 eq
						AGMUTIL_cpd/OverrideSeparations known and
						{
							AGMUTIL_cpd/OverrideSeparations get
							{
								/HqnSpots/ProcSet resourcestatus
								{
									pop pop pop true
								}if
							}if
						}if					
						{
							AGMCORE_name/HqnSpots/ProcSet findresource/TestSpot gx not
						}{
							gsave
							[/Separation AGMCORE_name/DeviceGray{}]AGMCORE_&setcolorspace
							false
							AGMUTIL_cpd/SeparationColorNames 2 copy known
							{
								get
								{AGMCORE_name eq or}forall
								not
							}{
								pop pop pop true
							}ifelse
							grestore
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			end
		}def
	}ifelse
	/convert_to_process where{pop}{
		/convert_to_process
		{
			dup length 0 eq
				{
				pop false
				}{
				AGMCORE_host_sep
				{
				dup true exch
					{
					dup(Cyan)eq exch
					dup(Magenta)eq 3 -1 roll or exch
					dup(Yellow)eq 3 -1 roll or exch
					dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process and}ifelse
					}
				forall
					{
					true exch
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						(Black)eq or and
						}forall
						not
					}{pop false}ifelse
				}{
				false exch
					{
					/PhotoshopDuotoneList where{pop false}{true}ifelse
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process or}ifelse
						}
						{
						convert_spot_to_process or
						}
					ifelse
					}
				forall
				}ifelse
			}ifelse
		}def
	}ifelse	
	/AGMCORE_avoid_L2_sep_space 
		version cvr 2012 lt 
		level2 and 
		AGMCORE_producing_seps not and
	def
	/AGMCORE_is_cmyk_sep
		AGMCORE_cyan_plate AGMCORE_magenta_plate or AGMCORE_yellow_plate or AGMCORE_black_plate or
	def
	/AGM_avoid_0_cmyk where{
		pop AGM_avoid_0_cmyk
	}{
		AGM_preserve_spots 
		userdict/Adobe_AGM_OnHost_Seps known 
		userdict/Adobe_AGM_InRip_Seps known or
		not and
	}ifelse
	{
		/setcmykcolor[
			{
				4 copy add add add 0 eq currentoverprint and{
					pop 0.0005
				}if
			}/exec cvx
			/AGMCORE_&setcmykcolor load dup type/operatortype ne{
				/exec cvx
			}if
		]cvx def
	}if
	/AGMCORE_IsSeparationAProcessColor
		{
		dup(Cyan)eq exch dup(Magenta)eq exch dup(Yellow)eq exch(Black)eq or or or
		}def
	AGMCORE_host_sep{
		/setcolortransfer
		{
			AGMCORE_cyan_plate{
				pop pop pop
			}{
			 	AGMCORE_magenta_plate{
			 		4 3 roll pop pop pop
			 	}{
			 		AGMCORE_yellow_plate{
			 			4 2 roll pop pop pop
			 		}{
			 			4 1 roll pop pop pop
			 		}ifelse
			 	}ifelse
			}ifelse
			settransfer 
		}	
		def
		/AGMCORE_get_ink_data
			AGMCORE_cyan_plate{
				{pop pop pop}
			}{
			 	AGMCORE_magenta_plate{
			 		{4 3 roll pop pop pop}
			 	}{
			 		AGMCORE_yellow_plate{
			 			{4 2 roll pop pop pop}
			 		}{
			 			{4 1 roll pop pop pop}
			 		}ifelse
			 	}ifelse
			}ifelse
		def
		/AGMCORE_RemoveProcessColorNames
			{
			1 dict begin
			/filtername
				{
				dup/Cyan eq 1 index(Cyan)eq or
					{pop(_cyan_)}if
				dup/Magenta eq 1 index(Magenta)eq or
					{pop(_magenta_)}if
				dup/Yellow eq 1 index(Yellow)eq or
					{pop(_yellow_)}if
				dup/Black eq 1 index(Black)eq or
					{pop(_black_)}if
				}def
			dup type/arraytype eq
				{[exch{filtername}forall]}
				{filtername}ifelse
			end
			}def
		level3{
			/AGMCORE_IsCurrentColor
				{
				dup AGMCORE_IsSeparationAProcessColor
					{
					AGMCORE_plate_ndx 0 eq
						{dup(Cyan)eq exch/Cyan eq or}if
					AGMCORE_plate_ndx 1 eq
						{dup(Magenta)eq exch/Magenta eq or}if
					AGMCORE_plate_ndx 2 eq
						{dup(Yellow)eq exch/Yellow eq or}if
					AGMCORE_plate_ndx 3 eq
						{dup(Black)eq exch/Black eq or}if
					AGMCORE_plate_ndx 4 eq
						{pop false}if
					}{
					gsave
					false setoverprint
					current_spot_alias false set_spot_alias
					1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
					set_spot_alias
					currentgray 1 ne
					grestore
					}ifelse
				}def
			/AGMCORE_filter_functiondatasource
				{	
				5 dict begin
				/data_in xdf
				data_in type/stringtype eq
					{
					/ncomp xdf
					/comp xdf
					/string_out data_in length ncomp idiv string def
					0 ncomp data_in length 1 sub
						{
						string_out exch dup ncomp idiv exch data_in exch ncomp getinterval comp get 255 exch sub put
						}for
					string_out
					}{
					string/string_in xdf
					/string_out 1 string def
					/component xdf
					[
					data_in string_in/readstring cvx
						[component/get cvx 255/exch cvx/sub cvx string_out/exch cvx 0/exch cvx/put cvx string_out]cvx
						[/pop cvx()]cvx/ifelse cvx
					]cvx/ReusableStreamDecode filter
				}ifelse
				end
				}def
			/AGMCORE_separateShadingFunction
				{
				2 dict begin
				/paint? xdf
				/channel xdf
				dup type/dicttype eq
					{
					begin
					FunctionType 0 eq
						{
						/DataSource channel Range length 2 idiv DataSource AGMCORE_filter_functiondatasource def
						currentdict/Decode known
							{/Decode Decode channel 2 mul 2 getinterval def}if
						paint? not
							{/Decode[1 1]def}if
						}if
					FunctionType 2 eq
						{
						paint?
							{
							/C0[C0 channel get 1 exch sub]def
							/C1[C1 channel get 1 exch sub]def
							}{
							/C0[1]def
							/C1[1]def
							}ifelse			
						}if
					FunctionType 3 eq
						{
						/Functions[Functions{channel paint? AGMCORE_separateShadingFunction}forall]def			
						}if
					currentdict/Range known
						{/Range[0 1]def}if
					currentdict
					end}{
					channel get 0 paint? AGMCORE_separateShadingFunction
					}ifelse
				end
				}def
			/AGMCORE_separateShading
				{
				3 -1 roll begin
				currentdict/Function known
					{
					currentdict/Background known
						{[1 index{Background 3 index get 1 exch sub}{1}ifelse]/Background xdf}if
					Function 3 1 roll AGMCORE_separateShadingFunction/Function xdf
					/ColorSpace[/DeviceGray]def
					}{
					ColorSpace dup type/arraytype eq{0 get}if/DeviceCMYK eq
						{
						/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
						}{
						ColorSpace dup 1 get AGMCORE_RemoveProcessColorNames 1 exch put
						}ifelse
					ColorSpace 0 get/Separation eq
						{
							{
								[1/exch cvx/sub cvx]cvx
							}{
								[/pop cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll put
							pop
						}{
							{
								[exch ColorSpace 1 get length 1 sub exch sub/index cvx 1/exch cvx/sub cvx ColorSpace 1 get length 1 add 1/roll cvx ColorSpace 1 get length{/pop cvx}repeat]cvx
							}{
								pop[ColorSpace 1 get length{/pop cvx}repeat cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll bind put
						}ifelse
					ColorSpace 2/DeviceGray put																		
					}ifelse
				end
				}def
			/AGMCORE_separateShadingDict
				{
				dup/ColorSpace get
				dup type/arraytype ne
					{[exch]}if
				dup 0 get/DeviceCMYK eq
					{
					exch begin 
					currentdict
					AGMCORE_cyan_plate
						{0 true}if
					AGMCORE_magenta_plate
						{1 true}if
					AGMCORE_yellow_plate
						{2 true}if
					AGMCORE_black_plate
						{3 true}if
					AGMCORE_plate_ndx 4 eq
						{0 false}if		
					dup not currentoverprint and
						{/AGMCORE_ignoreshade true def}if
					AGMCORE_separateShading
					currentdict
					end exch
					}if
				dup 0 get/Separation eq
					{
					exch begin
					ColorSpace 1 get dup/None ne exch/All ne and
						{
						ColorSpace 1 get AGMCORE_IsCurrentColor AGMCORE_plate_ndx 4 lt and ColorSpace 1 get AGMCORE_IsSeparationAProcessColor not and
							{
							ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
								{
								/ColorSpace
									[
									/Separation
									ColorSpace 1 get
									/DeviceGray
										[
										ColorSpace 3 get/exec cvx
										4 AGMCORE_plate_ndx sub -1/roll cvx
										4 1/roll cvx
										3[/pop cvx]cvx/repeat cvx
										1/exch cvx/sub cvx
										]cvx									
									]def
								}{
								AGMCORE_report_unsupported_color_space
								AGMCORE_black_plate not
									{
									currentdict 0 false AGMCORE_separateShading
									}if
								}ifelse
							}{
							currentdict ColorSpace 1 get AGMCORE_IsCurrentColor
							0 exch 
							dup not currentoverprint and
								{/AGMCORE_ignoreshade true def}if
							AGMCORE_separateShading
							}ifelse	
						}if			
					currentdict
					end exch
					}if
				dup 0 get/DeviceN eq
					{
					exch begin
					ColorSpace 1 get convert_to_process
						{
						ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
							{
							/ColorSpace
								[
								/DeviceN
								ColorSpace 1 get
								/DeviceGray
									[
									ColorSpace 3 get/exec cvx
									4 AGMCORE_plate_ndx sub -1/roll cvx
									4 1/roll cvx
									3[/pop cvx]cvx/repeat cvx
									1/exch cvx/sub cvx
									]cvx									
								]def
							}{
							AGMCORE_report_unsupported_color_space
							AGMCORE_black_plate not
								{
								currentdict 0 false AGMCORE_separateShading
								/ColorSpace[/DeviceGray]def
								}if
							}ifelse
						}{
						currentdict
						false -1 ColorSpace 1 get
							{
							AGMCORE_IsCurrentColor
								{
								1 add
								exch pop true exch exit
								}if
							1 add
							}forall
						exch 
						dup not currentoverprint and
							{/AGMCORE_ignoreshade true def}if
						AGMCORE_separateShading
						}ifelse
					currentdict
					end exch
					}if
				dup 0 get dup/DeviceCMYK eq exch dup/Separation eq exch/DeviceN eq or or not
					{
					exch begin
					ColorSpace dup type/arraytype eq
						{0 get}if
					/DeviceGray ne
						{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate not
							{
							ColorSpace 0 get/CIEBasedA eq
								{
								/ColorSpace[/Separation/_ciebaseda_/DeviceGray{}]def
								}if
							ColorSpace 0 get dup/CIEBasedABC eq exch dup/CIEBasedDEF eq exch/DeviceRGB eq or or
								{
								/ColorSpace[/DeviceN[/_red_/_green_/_blue_]/DeviceRGB{}]def
								}if
							ColorSpace 0 get/CIEBasedDEFG eq
								{
								/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
								}if
							currentdict 0 false AGMCORE_separateShading
							}if
						}if
					currentdict
					end exch
					}if
				pop
				dup/AGMCORE_ignoreshade known
					{
					begin
					/ColorSpace[/Separation(None)/DeviceGray{}]def
					currentdict end
					}if
				}def
			/shfill
				{
				AGMCORE_separateShadingDict 
				dup/AGMCORE_ignoreshade known
					{pop}
					{AGMCORE_&sysshfill}ifelse
				}def
			/makepattern
				{
				exch
				dup/PatternType get 2 eq
					{
					clonedict
					begin
					/Shading Shading AGMCORE_separateShadingDict def
					Shading/AGMCORE_ignoreshade known
					currentdict end exch
					{pop<</PatternType 1/PaintProc{pop}/BBox[0 0 1 1]/XStep 1/YStep 1/PaintType 1/TilingType 3>>}if
					exch AGMCORE_&sysmakepattern
					}{
					exch AGMCORE_&usrmakepattern
					}ifelse
				}def
		}if
	}if
	AGMCORE_in_rip_sep{
		/setcustomcolor
		{
			exch aload pop
			dup 7 1 roll inRip_spot_has_ink not	{
				4{4 index mul 4 1 roll}
				repeat
				/DeviceCMYK setcolorspace
				6 -2 roll pop pop
			}{
				//Adobe_AGM_Core begin
					/AGMCORE_k xdf/AGMCORE_y xdf/AGMCORE_m xdf/AGMCORE_c xdf
				end
				[/Separation 4 -1 roll/DeviceCMYK
				{dup AGMCORE_c mul exch dup AGMCORE_m mul exch dup AGMCORE_y mul exch AGMCORE_k mul}
				]
				setcolorspace
			}ifelse
			setcolor
		}ndf
		/setseparationgray
		{
			[/Separation(All)/DeviceGray{}]setcolorspace_opt
			1 exch sub setcolor
		}ndf
	}{
		/setseparationgray
		{
			AGMCORE_&setgray
		}ndf
	}ifelse
	/findcmykcustomcolor
	{
		5 makereadonlyarray
	}ndf
	/setcustomcolor
	{
		exch aload pop pop
		4{4 index mul 4 1 roll}repeat
		setcmykcolor pop
	}ndf
	/has_color
		/colorimage where{
			AGMCORE_producing_seps{
				pop true
			}{
				systemdict eq
			}ifelse
		}{
			false
		}ifelse
	def
	/map_index
	{
		1 index mul exch getinterval{255 div}forall
	}bdf
	/map_indexed_devn
	{
		Lookup Names length 3 -1 roll cvi map_index
	}bdf
	/n_color_components
	{
		base_colorspace_type
		dup/DeviceGray eq{
			pop 1
		}{
			/DeviceCMYK eq{
				4
			}{
				3
			}ifelse
		}ifelse
	}bdf
	level2{
		/mo/moveto ldf
		/li/lineto ldf
		/cv/curveto ldf
		/knockout_unitsq
		{
			1 setgray
			0 0 1 1 rectfill
		}def
		level2/setcolorspace AGMCORE_key_known not and{
			/AGMCORE_&&&setcolorspace/setcolorspace ldf
			/AGMCORE_ReplaceMappedColor
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					/AGMCORE_SpotAliasAry2 where{
						begin
						dup 0 get dup/Separation eq
						{
							pop
							dup length array copy
							dup dup 1 get
							current_spot_alias
							{
								dup map_alias
								{
									false set_spot_alias
									dup 1 exch setsepcolorspace
									true set_spot_alias
									begin
									/sep_colorspace_dict currentdict AGMCORE_gput
									pop pop	pop
									[
										/Separation Name 
										CSA map_csa
										MappedCSA 
										/sep_colorspace_proc load
									]
									dup Name
									end
								}if
							}if
							map_reserved_ink_name 1 xpt
						}{
							/DeviceN eq 
							{
								dup length array copy
								dup dup 1 get[
									exch{
										current_spot_alias{
											dup map_alias{
												/Name get exch pop
											}if
										}if
										map_reserved_ink_name
									}forall 
								]1 xpt
							}if
						}ifelse
						end
					}if
				}if
			}def
			/setcolorspace
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					dup 0 get/Indexed eq
					{
						AGMCORE_distilling
						{
							/PhotoshopDuotoneList where
							{
								pop false
							}{
								true
							}ifelse
						}{
							true
						}ifelse
						{
							aload pop 3 -1 roll
							AGMCORE_ReplaceMappedColor
							3 1 roll 4 array astore
						}if
					}{
						AGMCORE_ReplaceMappedColor
					}ifelse
				}if
				DeviceN_PS2_inRip_seps{AGMCORE_&&&setcolorspace}if
			}def
		}if	
	}{
		/adj
		{
			currentstrokeadjust{
				transform
				0.25 sub round 0.25 add exch
				0.25 sub round 0.25 add exch
				itransform
			}if
		}def
		/mo{
			adj moveto
		}def
		/li{
			adj lineto
		}def
		/cv{
			6 2 roll adj
			6 2 roll adj
			6 2 roll adj curveto
		}def
		/knockout_unitsq
		{
			1 setgray
			8 8 1[8 0 0 8 0 0]{<ffffffffffffffff>}image
		}def
		/currentstrokeadjust{
			/currentstrokeadjust AGMCORE_gget
		}def
		/setstrokeadjust{
			/currentstrokeadjust exch AGMCORE_gput
		}def
		/setcolorspace
		{
			/currentcolorspace exch AGMCORE_gput
		}def
		/currentcolorspace
		{
			/currentcolorspace AGMCORE_gget
		}def
		/setcolor_devicecolor
		{
			base_colorspace_type
			dup/DeviceGray eq{
				pop setgray
			}{
				/DeviceCMYK eq{
					setcmykcolor
				}{
					setrgbcolor
				}ifelse
			}ifelse
		}def
		/setcolor
		{
			currentcolorspace 0 get
			dup/DeviceGray ne{
				dup/DeviceCMYK ne{
					dup/DeviceRGB ne{
						dup/Separation eq{
							pop
							currentcolorspace 3 gx
							currentcolorspace 2 get
						}{
							dup/Indexed eq{
								pop
								currentcolorspace 3 get dup type/stringtype eq{
									currentcolorspace 1 get n_color_components
									3 -1 roll map_index
								}{
									exec
								}ifelse
								currentcolorspace 1 get
							}{
								/AGMCORE_cur_err/AGMCORE_invalid_color_space def
								AGMCORE_invalid_color_space
							}ifelse
						}ifelse
					}if
				}if
			}if
			setcolor_devicecolor
		}def
	}ifelse
	/sop/setoverprint ldf
	/lw/setlinewidth ldf
	/lc/setlinecap ldf
	/lj/setlinejoin ldf
	/ml/setmiterlimit ldf
	/dsh/setdash ldf
	/sadj/setstrokeadjust ldf
	/gry/setgray ldf
	/rgb/setrgbcolor ldf
	/cmyk[
		/currentcolorspace[/DeviceCMYK]/AGMCORE_gput cvx
		/setcmykcolor load dup type/operatortype ne{/exec cvx}if
	]cvx bdf
	level3 AGMCORE_host_sep not and{
		/nzopmsc{
			6 dict begin
			/kk exch def
			/yy exch def
			/mm exch def
			/cc exch def
			/sum 0 def
			cc 0 ne{/sum sum 2#1000 or def cc}if
			mm 0 ne{/sum sum 2#0100 or def mm}if
			yy 0 ne{/sum sum 2#0010 or def yy}if
			kk 0 ne{/sum sum 2#0001 or def kk}if
			AGMCORE_CMYKDeviceNColorspaces sum get setcolorspace
			sum 0 eq{0}if
			end
			setcolor
		}bdf
	}{
		/nzopmsc/cmyk ldf
	}ifelse
	/sep/setsepcolor ldf
	/devn/setdevicencolor ldf
	/idx/setindexedcolor ldf
	/colr/setcolor ldf
	/csacrd/set_csa_crd ldf
	/sepcs/setsepcolorspace ldf
	/devncs/setdevicencolorspace ldf
	/idxcs/setindexedcolorspace ldf
	/cp/closepath ldf
	/clp/clp_npth ldf
	/eclp/eoclp_npth ldf
	/f/fill ldf
	/ef/eofill ldf
	/@/stroke ldf
	/nclp/npth_clp ldf
	/gset/graphic_setup ldf
	/gcln/graphic_cleanup ldf
	/ct/concat ldf
	/cf/currentfile ldf
	/fl/filter ldf
	/rs/readstring ldf
	/AGMCORE_def_ht currenthalftone def
	/clonedict Adobe_AGM_Utils begin/clonedict load end def
	/clonearray Adobe_AGM_Utils begin/clonearray load end def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
	/getrampcolor
	{
		/indx exch def
		0 1 NumComp 1 sub
		{
			dup
			Samples exch get
			dup type/stringtype eq{indx get}if
			exch
			Scaling exch get aload pop
			3 1 roll
			mul add
		}for
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse
	}bdf
	/sssetbackground{
		aload pop 
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse	
	}bdf
	/RadialShade
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/r2 xdf
		/c2y xdf
		/c2x xdf
		/r1 xdf
		/c1y xdf
		/c1x xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		c1x c2x eq
		{
			c1y c2y lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope c2y c1y sub c2x c1x sub div def
			/theta slope 1 atan def
			c2x c1x lt c2y c1y ge and{/theta theta 180 sub def}if
			c2x c1x lt c2y c1y lt and{/theta theta 180 add def}if
		}ifelse
		gsave
		clippath
		c1x c1y translate
		theta rotate
		-90 rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax xdf
		/xMax xdf
		/yMin xdf
		/xMin xdf
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			/max{2 copy gt{pop}{exch pop}ifelse}bdf
			/min{2 copy lt{pop}{exch pop}ifelse}bdf
			rampdict begin
			40 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			c1x c1y translate
			theta rotate
			-90 rotate
			/c2y c1x c2x sub dup mul c1y c2y sub dup mul add sqrt def
			/c1y 0 def
			/c1x 0 def
			/c2x 0 def
			ext0
			{
				0 getrampcolor
				c2y r2 add r1 sub 0.0001 lt
				{
					c1x c1y r1 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2y r1 add r2 le
					{
						c1x c1y r1 0 360 arc
						fill
					}
					{
						c2x c2y r2 0 360 arc fill
						r1 r2 eq
						{
							/p1x r1 neg def
							/p1y c1y def
							/p2x r1 def
							/p2y c1y def
							p1x p1y moveto p2x p2y lineto p2x yMin lineto p1x yMin lineto
							fill
						}{
							/AA r2 r1 sub c2y div def
							AA -1 eq
							{/theta 89.99 def}
							{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
							ifelse
							/SS1 90 theta add dup sin exch cos div def
							/p1x r1 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
							/p1y p1x SS1 div neg def
							/SS2 90 theta sub dup sin exch cos div def
							/p2x r1 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
							/p2y p2x SS2 div neg def
							r1 r2 gt
							{
								/L1maxX p1x yMin p1y sub SS1 div add def
								/L2maxX p2x yMin p2y sub SS2 div add def
							}{
								/L1maxX 0 def
								/L2maxX 0 def
							}ifelse
							p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
							L1maxX L1maxX p1x sub SS1 mul p1y add lineto
							fill
						}ifelse
					}ifelse
				}ifelse
			}if
		c1x c2x sub dup mul
		c1y c2y sub dup mul
		add 0.5 exp
		0 dtransform
		dup mul exch dup mul add 0.5 exp 72 div
		0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		1 index 1 index lt{exch}if pop
		/hires xdf
		hires mul
		/numpix xdf
		/numsteps NumSamples def
		/rampIndxInc 1 def
		/subsampling false def
		numpix 0 ne
		{
			NumSamples numpix div 0.5 gt
			{
				/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
				/rampIndxInc NumSamples 1 sub numsteps div def
				/subsampling true def
			}if
		}if
		/xInc c2x c1x sub numsteps div def
		/yInc c2y c1y sub numsteps div def
		/rInc r2 r1 sub numsteps div def
		/cx c1x def
		/cy c1y def
		/radius r1 def
		np
		xInc 0 eq yInc 0 eq rInc 0 eq and and
		{
			0 getrampcolor
			cx cy radius 0 360 arc
			stroke
			NumSamples 1 sub getrampcolor
			cx cy radius 72 hires div add 0 360 arc
			0 setlinewidth
			stroke
		}{
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				cx cy radius 0 360 arc
				/cx cx xInc add def
				/cy cy yInc add def
				/radius radius rInc add def
				cx cy radius 360 0 arcn
				eofill
				rampIndxInc add
			}repeat
			pop
		}ifelse
		ext1
		{
			c2y r2 add r1 lt
			{
				c2x c2y r2 0 360 arc
				fill
			}{
				c2y r1 add r2 sub 0.0001 le
				{
					c2x c2y r2 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2x c2y r2 0 360 arc fill
					r1 r2 eq
					{
						/p1x r2 neg def
						/p1y c2y def
						/p2x r2 def
						/p2y c2y def
						p1x p1y moveto p2x p2y lineto p2x yMax lineto p1x yMax lineto
						fill
					}{
						/AA r2 r1 sub c2y div def
						AA -1 eq
						{/theta 89.99 def}
						{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
						ifelse
						/SS1 90 theta add dup sin exch cos div def
						/p1x r2 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
						/p1y c2y p1x SS1 div sub def
						/SS2 90 theta sub dup sin exch cos div def
						/p2x r2 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
						/p2y c2y p2x SS2 div sub def
						r1 r2 lt
						{
							/L1maxX p1x yMax p1y sub SS1 div add def
							/L2maxX p2x yMax p2y sub SS2 div add def
						}{
							/L1maxX 0 def
							/L2maxX 0 def
						}ifelse
						p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
						L1maxX L1maxX p1x sub SS1 mul p1y add lineto
						fill
					}ifelse
				}ifelse
			}ifelse
		}if
		grestore
		grestore
		end
		end
		end
		}ifelse
	}bdf
	/GenStrips
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/y2 xdf
		/x2 xdf
		/y1 xdf
		/x1 xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		x1 x2 eq
		{
			y1 y2 lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope y2 y1 sub x2 x1 sub div def
			/theta slope 1 atan def
			x2 x1 lt y2 y1 ge and{/theta theta 180 sub def}if
			x2 x1 lt y2 y1 lt and{/theta theta 180 add def}if
		}
		ifelse
		gsave
		clippath
		x1 y1 translate
		theta rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax exch def
		/xMax exch def
		/yMin exch def
		/xMin exch def
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			rampdict begin
			20 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			x1 y1 translate
			theta rotate
			/xStart 0 def
			/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def
			/ySpan yMax yMin sub def
			/numsteps NumSamples def
			/rampIndxInc 1 def
			/subsampling false def
			xStart 0 transform
			xEnd 0 transform
			3 -1 roll
			sub dup mul
			3 1 roll
			sub dup mul
			add 0.5 exp 72 div
			0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			1 index 1 index lt{exch}if pop
			mul
			/numpix xdf
			numpix 0 ne
			{
				NumSamples numpix div 0.5 gt
				{
					/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
					/rampIndxInc NumSamples 1 sub numsteps div def
					/subsampling true def
				}if
			}if
			ext0
			{
				0 getrampcolor
				xMin xStart lt
				{
					xMin yMin xMin neg ySpan rectfill
				}if
			}if
			/xInc xEnd xStart sub numsteps div def
			/x xStart def
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				x yMin xInc ySpan rectfill
				/x x xInc add def
				rampIndxInc add
			}repeat
			pop
			ext1{
				xMax xEnd gt
				{
					xEnd yMin xMax xEnd sub ySpan rectfill
				}if
			}if
			grestore
			grestore
			end
			end
			end
		}ifelse
	}bdf
}def
/pt
{
	end
}def
/dt{
}def
/pgsv{
	//Adobe_AGM_Core/AGMCORE_save save put
}def
/pgrs{
	//Adobe_AGM_Core/AGMCORE_save get restore
}def
systemdict/findcolorrendering known{
	/findcolorrendering systemdict/findcolorrendering get def
}if
systemdict/setcolorrendering known{
	/setcolorrendering systemdict/setcolorrendering get def
}if
/test_cmyk_color_plate
{
	gsave
	setcmykcolor currentgray 1 ne
	grestore
}def
/inRip_spot_has_ink
{
	dup//Adobe_AGM_Core/AGMCORE_name xddf
	convert_spot_to_process not
}def
/map255_to_range
{
	1 index sub
	3 -1 roll 255 div mul add
}def
/set_csa_crd
{
	/sep_colorspace_dict null AGMCORE_gput
	begin
		CSA get_csa_by_name setcolorspace_opt
		set_crd
	end
}
def
/map_csa
{
	currentdict/MappedCSA known{MappedCSA null ne}{false}ifelse
	{pop}{get_csa_by_name/MappedCSA xdf}ifelse
}def
/setsepcolor
{
	/sep_colorspace_dict AGMCORE_gget begin
		dup/sep_tint exch AGMCORE_gput
		TintProc
	end
}def
/setdevicencolor
{
	/devicen_colorspace_dict AGMCORE_gget begin
		Names length copy
		Names length 1 sub -1 0
		{
			/devicen_tints AGMCORE_gget 3 1 roll xpt
		}for
		TintProc
	end
}def
/sep_colorspace_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	currentdict/Components known{
		Components aload pop 
		TintMethod/Lab eq{
			2{AGMCORE_tmp mul NComponents 1 roll}repeat
			LMax sub AGMCORE_tmp mul LMax add NComponents 1 roll
		}{
			TintMethod/Subtractive eq{
				NComponents{
					AGMCORE_tmp mul NComponents 1 roll
				}repeat
			}{
				NComponents{
					1 sub AGMCORE_tmp mul 1 add NComponents 1 roll
				}repeat
			}ifelse
		}ifelse
	}{
		ColorLookup AGMCORE_tmp ColorLookup length 1 sub mul round cvi get
		aload pop
	}ifelse
	end
}def
/sep_colorspace_gray_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	GrayLookup AGMCORE_tmp GrayLookup length 1 sub mul round cvi get
	end
}def
/sep_proc_name
{
	dup 0 get 
	dup/DeviceRGB eq exch/DeviceCMYK eq or level2 not and has_color not and{
		pop[/DeviceGray]
		/sep_colorspace_gray_proc
	}{
		/sep_colorspace_proc
	}ifelse
}def
/setsepcolorspace
{
	current_spot_alias{
		dup begin
			Name map_alias{
				exch pop
			}if
		end
	}if
	dup/sep_colorspace_dict exch AGMCORE_gput
	begin
	CSA map_csa
	/AGMCORE_sep_special Name dup()eq exch(All)eq or store
	AGMCORE_avoid_L2_sep_space{
		[/Indexed MappedCSA sep_proc_name 255 exch 
			{255 div}/exec cvx 3 -1 roll[4 1 roll load/exec cvx]cvx 
		]setcolorspace_opt
		/TintProc{
			255 mul round cvi setcolor
		}bdf
	}{
		MappedCSA 0 get/DeviceCMYK eq 
		currentdict/Components known and 
		AGMCORE_sep_special not and{
			/TintProc[
				Components aload pop Name findcmykcustomcolor 
				/exch cvx/setcustomcolor cvx
			]cvx bdf
		}{
 			AGMCORE_host_sep Name(All)eq and{
 				/TintProc{
					1 exch sub setseparationgray 
				}bdf
 			}{
				AGMCORE_in_rip_sep MappedCSA 0 get/DeviceCMYK eq and 
				AGMCORE_host_sep or
				Name()eq and{
					/TintProc[
						MappedCSA sep_proc_name exch 0 get/DeviceCMYK eq{
							cvx/setcmykcolor cvx
						}{
							cvx/setgray cvx
						}ifelse
					]cvx bdf
				}{
					AGMCORE_producing_seps MappedCSA 0 get dup/DeviceCMYK eq exch/DeviceGray eq or and AGMCORE_sep_special not and{
	 					/TintProc[
							/dup cvx
							MappedCSA sep_proc_name cvx exch
							0 get/DeviceGray eq{
								1/exch cvx/sub cvx 0 0 0 4 -1/roll cvx
							}if
							/Name cvx/findcmykcustomcolor cvx/exch cvx
							AGMCORE_host_sep{
								AGMCORE_is_cmyk_sep
								/Name cvx 
								/AGMCORE_IsSeparationAProcessColor load/exec cvx
								/not cvx/and cvx 
							}{
								Name inRip_spot_has_ink not
							}ifelse
							[
		 						/pop cvx 1
							]cvx/if cvx
							/setcustomcolor cvx
						]cvx bdf
 					}{
						/TintProc{setcolor}bdf
						[/Separation Name MappedCSA sep_proc_name load]setcolorspace_opt
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	}ifelse
	set_crd
	setsepcolor
	end
}def
/additive_blend
{
 	3 dict begin
 	/numarrays xdf
 	/numcolors xdf
 	0 1 numcolors 1 sub
 		{
 		/c1 xdf
 		1
 		0 1 numarrays 1 sub
 			{
			1 exch add/index cvx
 			c1/get cvx/mul cvx
 			}for
 		numarrays 1 add 1/roll cvx 
 		}for
 	numarrays[/pop cvx]cvx/repeat cvx
 	end
}def
/subtractive_blend
{
	3 dict begin
	/numarrays xdf
	/numcolors xdf
	0 1 numcolors 1 sub
		{
		/c1 xdf
		1 1
		0 1 numarrays 1 sub
			{
			1 3 3 -1 roll add/index cvx 
			c1/get cvx/sub cvx/mul cvx
			}for
		/sub cvx
		numarrays 1 add 1/roll cvx
		}for
	numarrays[/pop cvx]cvx/repeat cvx
	end
}def
/exec_tint_transform
{
	/TintProc[
		/TintTransform cvx/setcolor cvx
	]cvx bdf
	MappedCSA setcolorspace_opt
}bdf
/devn_makecustomcolor
{
	2 dict begin
	/names_index xdf
	/Names xdf
	1 1 1 1 Names names_index get findcmykcustomcolor
	/devicen_tints AGMCORE_gget names_index get setcustomcolor
	Names length{pop}repeat
	end
}bdf
/setdevicencolorspace
{
	dup/AliasedColorants known{false}{true}ifelse 
	current_spot_alias and{
		7 dict begin
		/names_index 0 def
		dup/names_len exch/Names get length def
		/new_names names_len array def
		/new_LookupTables names_len array def
		/alias_cnt 0 def
		dup/Names get
		{
			dup map_alias{
				exch pop
				dup/ColorLookup known{
					dup begin
					new_LookupTables names_index ColorLookup put
					end
				}{
					dup/Components known{
						dup begin
						new_LookupTables names_index Components put
						end
					}{
						dup begin
						new_LookupTables names_index[null null null null]put
						end
					}ifelse
				}ifelse
				new_names names_index 3 -1 roll/Name get put
				/alias_cnt alias_cnt 1 add def 
			}{
				/name xdf				
				new_names names_index name put
				dup/LookupTables known{
					dup begin
					new_LookupTables names_index LookupTables names_index get put
					end
				}{
					dup begin
					new_LookupTables names_index[null null null null]put
					end
				}ifelse
			}ifelse
			/names_index names_index 1 add def 
		}forall
		alias_cnt 0 gt{
			/AliasedColorants true def
			/lut_entry_len new_LookupTables 0 get dup length 256 ge{0 get length}{length}ifelse def
			0 1 names_len 1 sub{
				/names_index xdf
				new_LookupTables names_index get dup length 256 ge{0 get length}{length}ifelse lut_entry_len ne{
					/AliasedColorants false def
					exit
				}{
					new_LookupTables names_index get 0 get null eq{
						dup/Names get names_index get/name xdf
						name(Cyan)eq name(Magenta)eq name(Yellow)eq name(Black)eq
						or or or not{
							/AliasedColorants false def
							exit
						}if
					}if
				}ifelse
			}for
			lut_entry_len 1 eq{
				/AliasedColorants false def
			}if
			AliasedColorants{
				dup begin
				/Names new_names def
				/LookupTables new_LookupTables def
				/AliasedColorants true def
				/NComponents lut_entry_len def
				/TintMethod NComponents 4 eq{/Subtractive}{/Additive}ifelse def
				/MappedCSA TintMethod/Additive eq{/DeviceRGB}{/DeviceCMYK}ifelse def
				currentdict/TTTablesIdx known not{
					/TTTablesIdx -1 def
				}if
				end
			}if
		}if
		end
	}if
	dup/devicen_colorspace_dict exch AGMCORE_gput
	begin
	currentdict/AliasedColorants known{
		AliasedColorants
	}{
		false
	}ifelse
	dup not{
		CSA map_csa
	}if
	/TintTransform load type/nulltype eq or{
		/TintTransform[
			0 1 Names length 1 sub
				{
				/TTTablesIdx TTTablesIdx 1 add def
				dup LookupTables exch get dup 0 get null eq
					{
					1 index
					Names exch get
					dup(Cyan)eq
						{
						pop exch
						LookupTables length exch sub
						/index cvx
						0 0 0
						}
						{
						dup(Magenta)eq
							{
							pop exch
							LookupTables length exch sub
							/index cvx
							0/exch cvx 0 0
							}{
							(Yellow)eq
								{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 3 -1/roll cvx 0
								}{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 0 4 -1/roll cvx
								}ifelse
							}ifelse
						}ifelse
					5 -1/roll cvx/astore cvx
					}{
					dup length 1 sub
					LookupTables length 4 -1 roll sub 1 add
					/index cvx/mul cvx/round cvx/cvi cvx/get cvx
					}ifelse
					Names length TTTablesIdx add 1 add 1/roll cvx
				}for
			Names length[/pop cvx]cvx/repeat cvx
			NComponents Names length
 			TintMethod/Subtractive eq
 				{
 				subtractive_blend
 				}{
 				additive_blend
 				}ifelse
		]cvx bdf
	}if
	AGMCORE_host_sep{
		Names convert_to_process{
			exec_tint_transform
		}
		{	
			currentdict/AliasedColorants known{
				AliasedColorants not
			}{
				false
			}ifelse
			5 dict begin
			/AvoidAliasedColorants xdf
			/painted? false def
			/names_index 0 def
			/names_len Names length def
			AvoidAliasedColorants{
				/currentspotalias current_spot_alias def
				false set_spot_alias
			}if
			Names{
				AGMCORE_is_cmyk_sep{
					dup(Cyan)eq AGMCORE_cyan_plate and exch
					dup(Magenta)eq AGMCORE_magenta_plate and exch
					dup(Yellow)eq AGMCORE_yellow_plate and exch
					(Black)eq AGMCORE_black_plate and or or or{
						/devicen_colorspace_dict AGMCORE_gget/TintProc[
							Names names_index/devn_makecustomcolor cvx
						]cvx ddf
						/painted? true def
					}if
					painted?{exit}if
				}{
					0 0 0 0 5 -1 roll findcmykcustomcolor 1 setcustomcolor currentgray 0 eq{
					/devicen_colorspace_dict AGMCORE_gget/TintProc[
						Names names_index/devn_makecustomcolor cvx
					]cvx ddf
					/painted? true def
					exit
					}if
				}ifelse
				/names_index names_index 1 add def
			}forall
			AvoidAliasedColorants{
				currentspotalias set_spot_alias
			}if
			painted?{
				/devicen_colorspace_dict AGMCORE_gget/names_index names_index put
			}{
				/devicen_colorspace_dict AGMCORE_gget/TintProc[
					names_len[/pop cvx]cvx/repeat cvx 1/setseparationgray cvx
 					0 0 0 0/setcmykcolor cvx
				]cvx ddf
			}ifelse
			end
		}ifelse
	}
	{
		AGMCORE_in_rip_sep{
			Names convert_to_process not
		}{
			level3
		}ifelse
		{
			[/DeviceN Names MappedCSA/TintTransform load]setcolorspace_opt
			/TintProc level3 not AGMCORE_in_rip_sep and{
				[
					Names/length cvx[/pop cvx]cvx/repeat cvx
				]cvx bdf
			}{
				{setcolor}bdf
			}ifelse
		}{
			exec_tint_transform
		}ifelse
	}ifelse
	set_crd
	/AliasedColorants false def
	end
}def
/setindexedcolorspace
{
	dup/indexed_colorspace_dict exch AGMCORE_gput
	begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				currentdict devncs
			}{
				1 currentdict sepcs
			}ifelse
			AGMCORE_host_sep{
				4 dict begin
				/compCnt/Names where{pop Names length}{1}ifelse def
				/NewLookup HiVal 1 add string def
				0 1 HiVal{
					/tableIndex xdf
					Lookup dup type/stringtype eq{
						compCnt tableIndex map_index
					}{
						exec
					}ifelse
					/Names where{
						pop setdevicencolor
					}{
						setsepcolor
					}ifelse
					currentgray
					tableIndex exch
					255 mul cvi 
					NewLookup 3 1 roll put
				}for
				[/Indexed currentcolorspace HiVal NewLookup]setcolorspace_opt
				end
			}{
				level3
				{
					currentdict/Names known{
						[/Indexed[/DeviceN Names MappedCSA/TintTransform load]HiVal Lookup]setcolorspace_opt
					}{
						[/Indexed[/Separation Name MappedCSA sep_proc_name load]HiVal Lookup]setcolorspace_opt
					}ifelse
				}{
				[/Indexed MappedCSA HiVal
					[
					currentdict/Names known{
						Lookup dup type/stringtype eq
							{/exch cvx CSDBase/CSD get_res/Names get length dup/mul cvx exch/getinterval cvx{255 div}/forall cvx}
							{/exec cvx}ifelse
							/TintTransform load/exec cvx
					}{
						Lookup dup type/stringtype eq
							{/exch cvx/get cvx 255/div cvx}
							{/exec cvx}ifelse
							CSDBase/CSD get_res/MappedCSA get sep_proc_name exch pop/load cvx/exec cvx
					}ifelse
					]cvx
				]setcolorspace_opt
				}ifelse
			}ifelse
			end
			set_crd
		}
		{
			CSA map_csa
			AGMCORE_host_sep level2 not and{
				0 0 0 0 setcmykcolor
			}{
				[/Indexed MappedCSA 
				level2 not has_color not and{
					dup 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or{
						pop[/DeviceGray]
					}if
					HiVal GrayLookup
				}{
					HiVal 
					currentdict/RangeArray known{
						{
							/indexed_colorspace_dict AGMCORE_gget begin
							Lookup exch 
							dup HiVal gt{
								pop HiVal
							}if
							NComponents mul NComponents getinterval{}forall
							NComponents 1 sub -1 0{
								RangeArray exch 2 mul 2 getinterval aload pop map255_to_range
								NComponents 1 roll
							}for
							end
						}bind
					}{
						Lookup
					}ifelse
				}ifelse
				]setcolorspace_opt
				set_crd
			}ifelse
		}ifelse
	end
}def
/setindexedcolor
{
	AGMCORE_host_sep{
		/indexed_colorspace_dict AGMCORE_gget
		begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				map_indexed_devn
				devn
			}
			{
				Lookup 1 3 -1 roll map_index
				sep
			}ifelse
			end
		}{
			Lookup MappedCSA/DeviceCMYK eq{4}{1}ifelse 3 -1 roll
			map_index
			MappedCSA/DeviceCMYK eq{setcmykcolor}{setgray}ifelse
		}ifelse
		end
	}{
		level3 not AGMCORE_in_rip_sep and/indexed_colorspace_dict AGMCORE_gget/CSDBase known and{
			/indexed_colorspace_dict AGMCORE_gget/CSDBase get/CSD get_res begin
			map_indexed_devn
			devn
			end
		}
		{
			setcolor
		}ifelse
	}ifelse
}def
/ignoreimagedata
{
	currentoverprint not{
		gsave
		dup clonedict begin
		1 setgray
		/Decode[0 1]def
		/DataSource<FF>def
		/MultipleDataSources false def
		/BitsPerComponent 8 def
		currentdict end
		systemdict/image gx
		grestore
		}if
	consumeimagedata
}def
/add_res
{
	dup/CSD eq{
		pop 
		//Adobe_AGM_Core begin
		/AGMCORE_CSD_cache load 3 1 roll put
		end
	}{
		defineresource pop
	}ifelse
}def
/del_res
{
	{
		aload pop exch
		dup/CSD eq{
			pop 
			{//Adobe_AGM_Core/AGMCORE_CSD_cache get exch undef}forall
		}{
			exch
			{1 index undefineresource}forall
			pop
		}ifelse
	}forall
}def
/get_res
{
	dup/CSD eq{
		pop
		dup type dup/nametype eq exch/stringtype eq or{
			AGMCORE_CSD_cache exch get
		}if
	}{
		findresource
	}ifelse
}def
/get_csa_by_name
{
	dup type dup/nametype eq exch/stringtype eq or{
		/CSA get_res
	}if
}def
/paintproc_buf_init
{
	/count get 0 0 put
}def
/paintproc_buf_next
{
	dup/count get dup 0 get
	dup 3 1 roll
	1 add 0 xpt
	get				
}def
/cachepaintproc_compress
{
	5 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	/string_size 16000 def
	/readbuffer string_size string def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	/LZWFilter 
	{
		exch
		dup length 0 eq{
			pop
		}{
			ppdict dup length 1 sub 3 -1 roll put
		}ifelse
		{string_size}{0}ifelse string
	}/LZWEncode filter def
	{		
		ReadFilter readbuffer readstring
		exch LZWFilter exch writestring
		not{exit}if
	}loop
	LZWFilter closefile
	ppdict				
	end
}def
/cachepaintproc
{
	2 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	{
		ReadFilter 16000 string readstring exch
		ppdict dup length 1 sub 3 -1 roll put
		not{exit}if
	}loop
	ppdict dup dup length 1 sub()put					
	end	
}def
/make_pattern
{
	exch clonedict exch
	dup matrix currentmatrix matrix concatmatrix 0 0 3 2 roll itransform
	exch 3 index/XStep get 1 index exch 2 copy div cvi mul sub sub
	exch 3 index/YStep get 1 index exch 2 copy div cvi mul sub sub
	matrix translate exch matrix concatmatrix
			 1 index begin
		BBox 0 get XStep div cvi XStep mul/xshift exch neg def
		BBox 1 get YStep div cvi YStep mul/yshift exch neg def
		BBox 0 get xshift add
		BBox 1 get yshift add
		BBox 2 get xshift add
		BBox 3 get yshift add
		4 array astore
		/BBox exch def
		[xshift yshift/translate load null/exec load]dup
		3/PaintProc load put cvx/PaintProc exch def
		end
	gsave 0 setgray
	makepattern
	grestore
}def
/set_pattern
{
	dup/PatternType get 1 eq{
		dup/PaintType get 1 eq{
			currentoverprint sop[/DeviceGray]setcolorspace 0 setgray
		}if
	}if
	setpattern
}def
/setcolorspace_opt
{
	dup currentcolorspace eq{pop}{setcolorspace}ifelse
}def
/updatecolorrendering
{
	currentcolorrendering/RenderingIntent known{
		currentcolorrendering/RenderingIntent get
	}
	{
		Intent/AbsoluteColorimetric eq 
		{
			/absolute_colorimetric_crd AGMCORE_gget dup null eq
		}
		{
			Intent/RelativeColorimetric eq
			{
				/relative_colorimetric_crd AGMCORE_gget dup null eq
			}
			{
				Intent/Saturation eq
				{
					/saturation_crd AGMCORE_gget dup null eq
				}
				{
					/perceptual_crd AGMCORE_gget dup null eq
				}ifelse
			}ifelse
		}ifelse
		{
			pop null	
		}
		{
			/RenderingIntent known{null}{Intent}ifelse
		}ifelse
	}ifelse
	Intent ne{
		Intent/ColorRendering{findresource}stopped
		{
			pop pop systemdict/findcolorrendering known
			{
 				Intent findcolorrendering
 				{
 					/ColorRendering findresource true exch
 				}
 				{
 					/ColorRendering findresource
					product(Xerox Phaser 5400)ne
					exch
 				}ifelse
				dup Intent/AbsoluteColorimetric eq 
				{
					/absolute_colorimetric_crd exch AGMCORE_gput
				}
				{
					Intent/RelativeColorimetric eq
					{
						/relative_colorimetric_crd exch AGMCORE_gput
					}
					{
						Intent/Saturation eq
						{
							/saturation_crd exch AGMCORE_gput
						}
						{
							Intent/Perceptual eq
							{
								/perceptual_crd exch AGMCORE_gput
							}
							{
								pop
							}ifelse
						}ifelse
					}ifelse
				}ifelse
				1 index{exch}{pop}ifelse
			}
			{false}ifelse
		}
		{true}ifelse
		{
			dup begin
			currentdict/TransformPQR known{
				currentdict/TransformPQR get aload pop
				3{{}eq 3 1 roll}repeat or or
			}
			{true}ifelse
			currentdict/MatrixPQR known{
				currentdict/MatrixPQR get aload pop
				1.0 eq 9 1 roll 0.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 1.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 0.0 eq 9 1 roll 1.0 eq
				and and and and and and and and
			}
			{true}ifelse
			end
			or
			{
				clonedict begin
				/TransformPQR[
					{4 -1 roll 3 get dup 3 1 roll sub 5 -1 roll 3 get 3 -1 roll sub div
					3 -1 roll 3 get 3 -1 roll 3 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 4 get dup 3 1 roll sub 5 -1 roll 4 get 3 -1 roll sub div
					3 -1 roll 4 get 3 -1 roll 4 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 5 get dup 3 1 roll sub 5 -1 roll 5 get 3 -1 roll sub div
					3 -1 roll 5 get 3 -1 roll 5 get dup 4 1 roll sub mul add}bind
				]def
				/MatrixPQR[0.8951 -0.7502 0.0389 0.2664 1.7135 -0.0685 -0.1614 0.0367 1.0296]def
				/RangePQR[-0.3227950745 2.3229645538 -1.5003771057 3.5003465881 -0.1369979095 2.136967392]def
				currentdict end
			}if
			setcolorrendering_opt
		}if		
	}if
}def
/set_crd
{
	AGMCORE_host_sep not level2 and{
		currentdict/ColorRendering known{
			ColorRendering/ColorRendering{findresource}stopped not{setcolorrendering_opt}if
		}{
			currentdict/Intent known{
				updatecolorrendering
			}if
		}ifelse
		currentcolorspace dup type/arraytype eq
			{0 get}if
		/DeviceRGB eq
			{
			currentdict/UCR known
				{/UCR}{/AGMCORE_currentucr}ifelse
			load setundercolorremoval
			currentdict/BG known 
				{/BG}{/AGMCORE_currentbg}ifelse
			load setblackgeneration
			}if
	}if
}def
/set_ucrbg
{
	dup null eq {pop /AGMCORE_currentbg load}{/Procedure get_res}ifelse
	dup currentblackgeneration eq {pop}{setblackgeneration}ifelse
	dup null eq {pop /AGMCORE_currentucr load}{/Procedure get_res}ifelse
	dup currentundercolorremoval eq {pop}{setundercolorremoval}ifelse
}def
/setcolorrendering_opt
{
	dup currentcolorrendering eq{
		pop
	}{
		product(HP Color LaserJet 2605)anchorsearch{
			pop pop pop
		}{
			pop
			clonedict
			begin
				/Intent Intent def
				currentdict
			end
			setcolorrendering
		}ifelse
	}ifelse
}def
/cpaint_gcomp
{
	convert_to_process//Adobe_AGM_Core/AGMCORE_ConvertToProcess xddf
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get not
	{
		(%end_cpaint_gcomp)flushinput
	}if
}def
/cpaint_gsep
{
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get
	{	
		(%end_cpaint_gsep)flushinput
	}if
}def
/cpaint_gend
{np}def
/T1_path
{
	currentfile token pop currentfile token pop mo
	{
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 exch rlineto 
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 rlineto
	}loop
}def
/T1_gsave
	level3
	{/clipsave}
	{/gsave}ifelse
	load def
/T1_grestore
	level3
	{/cliprestore}
	{/grestore}ifelse 
	load def
/set_spot_alias_ary
{
	dup inherit_aliases
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry xddf
}def
/set_spot_normalization_ary
{
	dup inherit_aliases
	dup length
	/AGMCORE_SpotAliasAry where{pop AGMCORE_SpotAliasAry length add}if
	array
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry2 xddf
	/AGMCORE_SpotAliasAry where{
		pop
		AGMCORE_SpotAliasAry2 0 AGMCORE_SpotAliasAry putinterval
		AGMCORE_SpotAliasAry length
	}{0}ifelse
	AGMCORE_SpotAliasAry2 3 1 roll exch putinterval
	true set_spot_alias
}def
/inherit_aliases
{
	{dup/Name get map_alias{/CSD put}{pop}ifelse}forall
}def
/set_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias 3 -1 roll put
	}{
		pop
	}ifelse
}def
/current_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias get
	}{
		false
	}ifelse
}def
/map_alias
{
	/AGMCORE_SpotAliasAry2 where{
		begin
			/AGMCORE_name xdf
			false	
			AGMCORE_SpotAliasAry2{
				dup/Name get AGMCORE_name eq{
					/CSD get/CSD get_res
					exch pop true
					exit
				}{
					pop
				}ifelse
			}forall
		end
	}{
		pop false
	}ifelse
}bdf
/spot_alias
{
	true set_spot_alias
	/AGMCORE_&setcustomcolor AGMCORE_key_known not{
		//Adobe_AGM_Core/AGMCORE_&setcustomcolor/setcustomcolor load put
	}if
	/customcolor_tint 1 AGMCORE_gput
	//Adobe_AGM_Core begin
	/setcustomcolor
	{
		//Adobe_AGM_Core begin
		dup/customcolor_tint exch AGMCORE_gput
		1 index aload pop pop 1 eq exch 1 eq and exch 1 eq and exch 1 eq and not
		current_spot_alias and{1 index 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/sep_colorspace_dict AGMCORE_gget null ne
			{/sep_colorspace_dict AGMCORE_gget/ForeignContent known not}{false}ifelse
			3 1 roll 2 index{
				exch pop/sep_tint AGMCORE_gget exch
			}if
			mark 3 1 roll
			setsepcolorspace
			counttomark 0 ne{
				setsepcolor
			}if
			pop
			not{/sep_tint 1.0 AGMCORE_gput/sep_colorspace_dict AGMCORE_gget/ForeignContent true put}if
			pop
			true set_spot_alias
		}{
			AGMCORE_&setcustomcolor
		}ifelse
		end
	}bdf
	end
}def
/begin_feature
{
	Adobe_AGM_Core/AGMCORE_feature_dictCount countdictstack put
	count Adobe_AGM_Core/AGMCORE_feature_opCount 3 -1 roll put
	{Adobe_AGM_Core/AGMCORE_feature_ctm matrix currentmatrix put}if
}def
/end_feature
{
	2 dict begin
	/spd/setpagedevice load def
	/setpagedevice{get_gstate spd set_gstate}def
	stopped{$error/newerror false put}if
	end
	count Adobe_AGM_Core/AGMCORE_feature_opCount get sub dup 0 gt{{pop}repeat}{pop}ifelse
	countdictstack Adobe_AGM_Core/AGMCORE_feature_dictCount get sub dup 0 gt{{end}repeat}{pop}ifelse
	{Adobe_AGM_Core/AGMCORE_feature_ctm get setmatrix}if
}def
/set_negative
{
	//Adobe_AGM_Core begin
	/AGMCORE_inverting exch def
	level2{
		currentpagedevice/NegativePrint known AGMCORE_distilling not and{
			currentpagedevice/NegativePrint get//Adobe_AGM_Core/AGMCORE_inverting get ne{
				true begin_feature true{
						<</NegativePrint//Adobe_AGM_Core/AGMCORE_inverting get>>setpagedevice
				}end_feature
			}if
			/AGMCORE_inverting false def
		}if
	}if
	AGMCORE_inverting{
		[{1 exch sub}/exec load dup currenttransfer exch]cvx bind settransfer
 		AGMCORE_distilling{
 			erasepage
 		}{
 			gsave np clippath 1/setseparationgray where{pop setseparationgray}{setgray}ifelse
 			/AGMIRS_&fill where{pop AGMIRS_&fill}{fill}ifelse grestore
 		}ifelse
	}if
	end
}def
/lw_save_restore_override{
	/md where{
		pop
		md begin
		initializepage
		/initializepage{}def
		/pmSVsetup{}def
		/endp{}def
		/pse{}def
		/psb{}def
		/orig_showpage where
			{pop}
			{/orig_showpage/showpage load def}
		ifelse
		/showpage{orig_showpage gR}def
		end
	}if
}def
/pscript_showpage_override{
	/NTPSOct95 where
	{
		begin
		showpage
		save
		/showpage/restore load def
		/restore{exch pop}def
		end
	}if
}def
/driver_media_override
{
	/md where{
		pop
		md/initializepage known{
			md/initializepage{}put
		}if
		md/rC known{
			md/rC{4{pop}repeat}put
		}if
	}if
	/mysetup where{
		/mysetup[1 0 0 1 0 0]put
	}if
	Adobe_AGM_Core/AGMCORE_Default_CTM matrix currentmatrix put
	level2
		{Adobe_AGM_Core/AGMCORE_Default_PageSize currentpagedevice/PageSize get put}if
}def
/capture_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup Pscript_Win_Data/mysetup get put
		}if
	}if
}def
/restore_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup known{
				Pscript_Win_Data/mysetup Adobe_AGM_Core/save_mysetup get put
				Adobe_AGM_Core/save_mysetup undef
			}if
		}if
	}if
}def
/driver_check_media_override
{
 	/PrepsDict where
 		{pop}
		{
		Adobe_AGM_Core/AGMCORE_Default_CTM get matrix currentmatrix ne
		Adobe_AGM_Core/AGMCORE_Default_PageSize get type/arraytype eq
			{
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 0 get currentpagedevice/PageSize get 0 get eq and
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 1 get currentpagedevice/PageSize get 1 get eq and
			}if
			{
			Adobe_AGM_Core/AGMCORE_Default_CTM get setmatrix
			}if
		}ifelse
}def
AGMCORE_err_strings begin
	/AGMCORE_bad_environ(Environment not satisfactory for this job. Ensure that the PPD is correct or that the PostScript level requested is supported by this printer. )def
	/AGMCORE_color_space_onhost_seps(This job contains colors that will not separate with on-host methods. )def
	/AGMCORE_invalid_color_space(This job contains an invalid color space. )def
end
/set_def_ht
{AGMCORE_def_ht sethalftone}def
/set_def_flat
{AGMCORE_Default_flatness setflat}def
end
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_CoolType_Core 2.31 0
%%Copyright: Copyright 1997-2006 Adobe Systems Incorporated. All Rights Reserved.
%%Version: 2.31 0
10 dict begin
/Adobe_CoolType_Passthru currentdict def
/Adobe_CoolType_Core_Defined userdict/Adobe_CoolType_Core known def
Adobe_CoolType_Core_Defined
	{/Adobe_CoolType_Core userdict/Adobe_CoolType_Core get def}
if
userdict/Adobe_CoolType_Core 70 dict dup begin put
/Adobe_CoolType_Version 2.31 def
/Level2?
	systemdict/languagelevel known dup
		{pop systemdict/languagelevel get 2 ge}
	if def
Level2? not
	{
	/currentglobal false def
	/setglobal/pop load def
	/gcheck{pop false}bind def
	/currentpacking false def
	/setpacking/pop load def
	/SharedFontDirectory 0 dict def
	}
if
currentpacking
true setpacking
currentglobal false setglobal
userdict/Adobe_CoolType_Data 2 copy known not
	{2 copy 10 dict put}
if
get
	 begin
	/@opStackCountByLevel 32 dict def
	/@opStackLevel 0 def
	/@dictStackCountByLevel 32 dict def
	/@dictStackLevel 0 def
	 end
setglobal
currentglobal true setglobal
userdict/Adobe_CoolType_GVMFonts known not
	{userdict/Adobe_CoolType_GVMFonts 10 dict put}
if
setglobal
currentglobal false setglobal
userdict/Adobe_CoolType_LVMFonts known not
	{userdict/Adobe_CoolType_LVMFonts 10 dict put}
if
setglobal
/ct_VMDictPut
	{
	dup gcheck{Adobe_CoolType_GVMFonts}{Adobe_CoolType_LVMFonts}ifelse
	3 1 roll put
	}bind def
/ct_VMDictUndef
	{
	dup Adobe_CoolType_GVMFonts exch known
		{Adobe_CoolType_GVMFonts exch undef}
		{
			dup Adobe_CoolType_LVMFonts exch known
			{Adobe_CoolType_LVMFonts exch undef}
			{pop}
			ifelse
		}ifelse
	}bind def
/ct_str1 1 string def
/ct_xshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_yshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0 exch
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_xyshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			{_ct_na _ct_i 1 add get}stopped 
			{pop pop pop}
			{
				_ct_x _ct_y moveto
				rmoveto
			}
			ifelse
		}
		ifelse
		/_ct_i _ct_i 2 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/xsh{{@xshow}stopped{Adobe_CoolType_Data begin ct_xshow end}if}bind def
/ysh{{@yshow}stopped{Adobe_CoolType_Data begin ct_yshow end}if}bind def
/xysh{{@xyshow}stopped{Adobe_CoolType_Data begin ct_xyshow end}if}bind def
currentglobal true setglobal
/ct_T3Defs
{
/BuildChar
{
	1 index/Encoding get exch get
	1 index/BuildGlyph get exec
}bind def
/BuildGlyph
{
	exch begin
	GlyphProcs exch get exec
	end
}bind def
}bind def
setglobal
/@_SaveStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@vmState currentglobal def false setglobal
		@opStackCountByLevel
		@opStackLevel
		2 copy known not
			{
			2 copy
			3 dict dup/args
			7 index
			5 add array put
			put get
			}
			{
			get dup/args get dup length 3 index lt
				{
				dup length 5 add array exch
				1 index exch 0 exch putinterval
				1 index exch/args exch put
				}
				{pop}
			ifelse
			}
		ifelse
			begin
			count 1 sub
			1 index lt
				{pop count}
			if
			dup/argCount exch def
			dup 0 gt
				{
				args exch 0 exch getinterval 
			astore pop
				}
				{pop}
			ifelse
			count
			/restCount exch def
			end
		/@opStackLevel @opStackLevel 1 add def
		countdictstack 1 sub
		@dictStackCountByLevel exch @dictStackLevel exch put
		/@dictStackLevel @dictStackLevel 1 add def
		@vmState setglobal
		end
	}bind def
/@_RestoreStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		@opStackCountByLevel @opStackLevel get
			begin
			count restCount sub dup 0 gt
				{{pop}repeat}
				{pop}
			ifelse
			args 0 argCount getinterval{}forall
			end
		/@dictStackLevel @dictStackLevel 1 sub def
		@dictStackCountByLevel @dictStackLevel get
		end
	countdictstack exch sub dup 0 gt
		{{end}repeat}
		{pop}
	ifelse
	}bind def
/@_PopStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		/@dictStackLevel @dictStackLevel 1 sub def
		end
	}bind def
/@Raise
	{
	exch cvx exch errordict exch get exec
	stop
	}bind def
/@ReRaise
	{
	cvx $error/errorname get errordict exch get exec
	stop
	}bind def
/@Stopped
	{
	0 @#Stopped
	}bind def
/@#Stopped
	{
	@_SaveStackLevels
	stopped
		{@_RestoreStackLevels true}
		{@_PopStackLevels false}
	ifelse
	}bind def
/@Arg
	{
	Adobe_CoolType_Data
		begin
		@opStackCountByLevel @opStackLevel 1 sub get
		begin
		args exch
		argCount 1 sub exch sub get
		end
		end
	}bind def
currentglobal true setglobal
/CTHasResourceForAllBug
	Level2?
		{
		1 dict dup
				/@shouldNotDisappearDictValue true def
				Adobe_CoolType_Data exch/@shouldNotDisappearDict exch put
				begin
				count @_SaveStackLevels
					{(*){pop stop}128 string/Category resourceforall}
				stopped pop
				@_RestoreStackLevels
				currentdict Adobe_CoolType_Data/@shouldNotDisappearDict get dup 3 1 roll ne dup 3 1 roll
					{
						 /@shouldNotDisappearDictValue known
								{
										 {
												end
												currentdict 1 index eq
													{pop exit}
												if
										 }
									 loop
								}
						 if
					}
					{
						 pop
						 end
					}
				ifelse
		}
		{false}
	ifelse
	def
true setglobal
/CTHasResourceStatusBug
	Level2?
		{
		mark
			{/steveamerige/Category resourcestatus}
		stopped
			{cleartomark true}
			{cleartomark currentglobal not}
		ifelse
		}
		{false}
	ifelse
	def
setglobal
/CTResourceStatus
		{
		mark 3 1 roll
		/Category findresource
			begin
			({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
				{cleartomark false}
				{{3 2 roll pop true}{cleartomark false}ifelse}
			ifelse
			end
		}bind def
/CTWorkAroundBugs
	{
	Level2?
		{
		/cid_PreLoad/ProcSet resourcestatus
			{
			pop pop
			currentglobal
			mark
				{
				(*)
					{
					dup/CMap CTHasResourceStatusBug
						{CTResourceStatus}
						{resourcestatus}
					ifelse
						{
						pop dup 0 eq exch 1 eq or
							{
							dup/CMap findresource gcheck setglobal
							/CMap undefineresource
							}
							{
							pop CTHasResourceForAllBug
								{exit}
								{stop}
							ifelse
							}
						ifelse
						}
						{pop}
					ifelse
					}
				128 string/CMap resourceforall
				}
			stopped
				{cleartomark}
			stopped pop
			setglobal
			}
		if
		}
	if
	}bind def
/ds
	{
	Adobe_CoolType_Core
		begin
		CTWorkAroundBugs
		/mo/moveto load def
		/nf/newencodedfont load def
		/msf{makefont setfont}bind def
		/uf{dup undefinefont ct_VMDictUndef}bind def
		/ur/undefineresource load def
		/chp/charpath load def
		/awsh/awidthshow load def
		/wsh/widthshow load def
		/ash/ashow load def
		/@xshow/xshow load def
		/@yshow/yshow load def
		/@xyshow/xyshow load def
		/@cshow/cshow load def
		/sh/show load def
		/rp/repeat load def
		/.n/.notdef def
		end
		currentglobal false setglobal
	 userdict/Adobe_CoolType_Data 2 copy known not
		 {2 copy 10 dict put}
		if
		get
		begin
		/AddWidths? false def
		/CC 0 def
		/charcode 2 string def
		/@opStackCountByLevel 32 dict def
		/@opStackLevel 0 def
		/@dictStackCountByLevel 32 dict def
		/@dictStackLevel 0 def
		/InVMFontsByCMap 10 dict def
		/InVMDeepCopiedFonts 10 dict def
		end
		setglobal
	}bind def
/dt
	{
	currentdict Adobe_CoolType_Core eq
		{end}
	if
	}bind def
/ps
	{
	Adobe_CoolType_Core begin
	Adobe_CoolType_GVMFonts begin
	Adobe_CoolType_LVMFonts begin
	SharedFontDirectory begin
	}bind def
/pt
	{
	end
	end
	end
	end
	}bind def
/unload
	{
	systemdict/languagelevel known
		{
		systemdict/languagelevel get 2 ge
			{
			userdict/Adobe_CoolType_Core 2 copy known
				{undef}
				{pop pop}
			ifelse
			}
		if
		}
	if
	}bind def
/ndf
	{
	1 index where
		{pop pop pop}
		{dup xcheck{bind}if def}
	ifelse
	}def
/findfont systemdict
	begin
	userdict
		begin
		/globaldict where{/globaldict get begin}if
			dup where pop exch get
		/globaldict where{pop end}if
		end
	end
Adobe_CoolType_Core_Defined
	{/systemfindfont exch def}
	{
	/findfont 1 index def
	/systemfindfont exch def
	}
ifelse
/undefinefont
	{pop}ndf
/copyfont
	{
	currentglobal 3 1 roll
	1 index gcheck setglobal
	dup null eq{0}{dup length}ifelse
	2 index length add 1 add dict
		begin
		exch
			{
			1 index/FID eq
				{pop pop}
				{def}
			ifelse
			}
		forall
		dup null eq
			{pop}
			{{def}forall}
		ifelse
		currentdict
		end
	exch setglobal
	}bind def
/copyarray
	{
	currentglobal exch
	dup gcheck setglobal
	dup length array copy
	exch setglobal
	}bind def
/newencodedfont
	{
	currentglobal
		{
		SharedFontDirectory 3 index known
			{SharedFontDirectory 3 index get/FontReferenced known}
			{false}
		ifelse
		}
		{
		FontDirectory 3 index known
			{FontDirectory 3 index get/FontReferenced known}
			{
			SharedFontDirectory 3 index known
				{SharedFontDirectory 3 index get/FontReferenced known}
				{false}
			ifelse
			}
		ifelse
		}
	ifelse
	dup
		{
		3 index findfont/FontReferenced get
		2 index dup type/nametype eq
			{findfont}
		if ne
			{pop false}
		if
		}
	if
	dup
		{
		1 index dup type/nametype eq
			{findfont}
		 if
		dup/CharStrings known
			{
			/CharStrings get length
			4 index findfont/CharStrings get length
			ne
				{
				pop false
				}
			if 
			}
			{pop}
			ifelse
		}
	if
		{
		pop
		1 index findfont
		/Encoding get exch
		0 1 255
			{2 copy get 3 index 3 1 roll put}
		for
		pop pop pop
		}
		{
		currentglobal
	 4 1 roll
		dup type/nametype eq
		 {findfont}
	 if
	 dup gcheck setglobal
		dup dup maxlength 2 add dict
			begin
			exch
				{
				1 index/FID ne
				2 index/Encoding ne and
					{def}
					{pop pop}
				ifelse
				}
			forall
			/FontReferenced exch def
			/Encoding exch dup length array copy def
			/FontName 1 index dup type/stringtype eq{cvn}if def dup
			currentdict
			end
		definefont ct_VMDictPut
		setglobal
		}
	ifelse
	}bind def
/SetSubstituteStrategy
	{
	$SubstituteFont
		begin
		dup type/dicttype ne
			{0 dict}
		if
		currentdict/$Strategies known
			{
			exch $Strategies exch 
			2 copy known
				{
				get
				2 copy maxlength exch maxlength add dict
					begin
					{def}forall
					{def}forall
					currentdict
					dup/$Init known
						{dup/$Init get exec}
					if
					end
				/$Strategy exch def
				}
				{pop pop pop}
			ifelse
			}
			{pop pop}
		ifelse
		end
	}bind def
/scff
	{
	$SubstituteFont
		begin
		dup type/stringtype eq
			{dup length exch}
			{null}
		ifelse
		/$sname exch def
		/$slen exch def
		/$inVMIndex
			$sname null eq
				{
				1 index $str cvs
				dup length $slen sub $slen getinterval cvn
				}
				{$sname}
			ifelse def
		end
		{findfont}
	@Stopped
		{
		dup length 8 add string exch
		1 index 0(BadFont:)putinterval
		1 index exch 8 exch dup length string cvs putinterval cvn
			{findfont}
		@Stopped
			{pop/Courier findfont}
		if
		}
	if
	$SubstituteFont
		begin
		/$sname null def
		/$slen 0 def
		/$inVMIndex null def
		end
	}bind def
/isWidthsOnlyFont
	{
	dup/WidthsOnly known
		{pop pop true}
		{
		dup/FDepVector known
			{/FDepVector get{isWidthsOnlyFont dup{exit}if}forall}
			{
			dup/FDArray known
				{/FDArray get{isWidthsOnlyFont dup{exit}if}forall}
				{pop}
			ifelse
			}
		ifelse
		}
	ifelse
	}bind def
/ct_StyleDicts 4 dict dup begin
		 /Adobe-Japan1 4 dict dup begin
					 Level2?
								{
								/Serif
								/HeiseiMin-W3-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMin-W3}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMin-W3/CIDFont resourcestatus
								{pop pop/HeiseiMin-W3}
								{/Ryumin-Light}
								ifelse
							}
							{/Ryumin-Light}
							ifelse
								}
								ifelse
								def
								/SansSerif
								/HeiseiKakuGo-W5-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiKakuGo-W5/CIDFont resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{/GothicBBB-Medium}
								ifelse
							}
							{/GothicBBB-Medium}
							ifelse
								}
								ifelse
								def
								/HeiseiMaruGo-W4-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMaruGo-W4/CIDFont resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
									/Jun101-Light-RKSJ-H/Font resourcestatus
									{pop pop/Jun101-Light}
									{SansSerif}
									ifelse
								}
								ifelse
							}
							{
								/Jun101-Light-RKSJ-H/Font resourcestatus
								{pop pop/Jun101-Light}
								{SansSerif}
								ifelse
							}
							ifelse
								}
								ifelse
								/RoundSansSerif exch def
								/Default Serif def
								}
								{
								/Serif/Ryumin-Light def
								/SansSerif/GothicBBB-Medium def
								{
								(fonts/Jun101-Light-83pv-RKSJ-H)status
								}stopped
								{pop}{
										 {pop pop pop pop/Jun101-Light}
										 {SansSerif}
										 ifelse
										 /RoundSansSerif exch def
								}ifelse
								/Default Serif def
								}
					 ifelse
		 end
		 def
		 /Adobe-Korea1 4 dict dup begin
					/Serif/HYSMyeongJo-Medium def
					/SansSerif/HYGoThic-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-GB1 4 dict dup begin
					/Serif/STSong-Light def
					/SansSerif/STHeiti-Regular def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-CNS1 4 dict dup begin
					/Serif/MKai-Medium def
					/SansSerif/MHei-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
end
def
Level2?{currentglobal true setglobal}if
/ct_BoldRomanWidthProc 
	{
	stringwidth 1 index 0 ne{exch .03 add exch}if setcharwidth
	0 0
	}bind def
/ct_Type0WidthProc 
	{
	 dup stringwidth 0 0 moveto 
	 2 index true charpath pathbbox
	 0 -1 
	 7 index 2 div .88 
	 setcachedevice2
	 pop
	0 0
	}bind def
/ct_Type0WMode1WidthProc 
	{
	 dup stringwidth 
	 pop 2 div neg -0.88
	2 copy
	moveto 
	0 -1
	 5 -1 roll true charpath pathbbox
	 setcachedevice
	}bind def
/cHexEncoding
[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
/ct_BoldBaseFont 
	 11 dict begin
		/FontType 3 def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/Encoding cHexEncoding def 
		/_setwidthProc/ct_BoldRomanWidthProc load def
		/_bcstr1 1 string def
		/BuildChar
		{
			exch begin
				_basefont setfont
				_bcstr1 dup 0 4 -1 roll put
				dup 
				_setwidthProc
				3 copy 
				moveto				
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
systemdict/composefont known
{
/ct_DefineIdentity-H
{
	/Identity-H/CMap resourcestatus
	{
		pop pop
	}
	{
		/CIDInit/ProcSet findresource begin
		 12 dict begin
		 begincmap
		 /CIDSystemInfo 3 dict dup begin
			 /Registry(Adobe)def
			 /Ordering(Identity)def
			 /Supplement 0 def
		 end def
		 /CMapName/Identity-H def
		 /CMapVersion 1.000 def
		 /CMapType 1 def
		 1 begincodespacerange
		 <0000><FFFF>
		 endcodespacerange
		 1 begincidrange
		 <0000><FFFF>0
		 endcidrange
		 endcmap
		 CMapName currentdict/CMap defineresource pop
		 end
		 end
	 }
	 ifelse
}
def
/ct_BoldBaseCIDFont 
	 11 dict begin
		/CIDFontType 1 def
		/CIDFontName/ct_BoldBaseCIDFont def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/_setwidthProc/ct_Type0WidthProc load def
		/_bcstr2 2 string def
		/BuildGlyph
		{
			exch begin		 
				_basefont setfont
				_bcstr2 1 2 index 256 mod put
				_bcstr2 0 3 -1 roll 256 idiv put
				_bcstr2 dup _setwidthProc		 
				3 copy 
				moveto
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
}if
Level2?{setglobal}if
/ct_CopyFont{
	{
		1 index/FID ne 2 index/UniqueID ne and
		{def}{pop pop}ifelse
	}forall
}bind def
/ct_Type0CopyFont 
{
	exch
	dup length dict
	begin
	ct_CopyFont
	[
	exch
	FDepVector 
	{
		 dup/FontType get 0 eq
		{	
		1 index ct_Type0CopyFont 
		/_ctType0 exch definefont
		}
		{
		/_ctBaseFont exch
		2 index exec
		}
		 ifelse 
		 exch
	}
	forall 
	pop
	]				
	/FDepVector exch def
	currentdict
	end
}bind def
/ct_MakeBoldFont
{
	 dup/ct_SyntheticBold known
	{
		dup length 3 add dict begin 
		ct_CopyFont 
		/ct_StrokeWidth .03 0 FontMatrix idtransform pop def 
		/ct_SyntheticBold true def
		currentdict 
		end 
		definefont
	}
	{
		dup dup length 3 add dict
		begin
			ct_CopyFont
			/PaintType 2 def
			/StrokeWidth .03 0 FontMatrix idtransform pop def
			/dummybold currentdict
		end
		definefont
		dup/FontType get dup 9 ge exch 11 le and 
		{
			ct_BoldBaseCIDFont
			dup length 3 add dict copy begin
			dup/CIDSystemInfo get/CIDSystemInfo exch def
			ct_DefineIdentity-H
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefont exch def
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefonto exch def
			currentdict
			end
			/CIDFont defineresource
		}
		{
			ct_BoldBaseFont
			dup length 3 add dict copy begin
			/_basefont exch def
			/_basefonto exch def
			currentdict
			end
			definefont
		}
		ifelse
	}
	ifelse
}bind def
/ct_MakeBold{
	1 index 
	1 index
	findfont
	currentglobal 5 1 roll
	dup gcheck setglobal
		dup
		 /FontType get 0 eq
			{
				dup/WMode known{dup/WMode get 1 eq}{false}ifelse
				version length 4 ge
				and
					{version 0 4 getinterval cvi 2015 ge}
					{true}
				ifelse 
					{/ct_Type0WidthProc}
					{/ct_Type0WMode1WidthProc}
				ifelse
				ct_BoldBaseFont/_setwidthProc 3 -1 roll load put
						{ct_MakeBoldFont}ct_Type0CopyFont definefont
			}
			{
				dup/_fauxfont known not 1 index/SubstMaster known not and
				{
					 ct_BoldBaseFont/_setwidthProc /ct_BoldRomanWidthProc load put
					 ct_MakeBoldFont 
				}
				{
				2 index 2 index eq
					{exch pop	}
					{
						dup length dict begin
						ct_CopyFont
						currentdict
						end
						definefont 
					}
				ifelse
				}
			ifelse
			}
		 ifelse
		 pop pop pop
		 setglobal
}bind def
/?str1 256 string def
/?set
	{
	$SubstituteFont
		begin
		/$substituteFound false def
		/$fontname 1 index def
		/$doSmartSub false def
		end
	dup
	 findfont
	$SubstituteFont
		begin
		$substituteFound
			{false}
			{
			dup/FontName known
				{
				dup/FontName get $fontname eq
				1 index/DistillerFauxFont known not and
				/currentdistillerparams where
					{pop false 2 index isWidthsOnlyFont not and}
				if
				}
				{false}
			ifelse
			}
		ifelse
		exch pop
		/$doSmartSub true def
		end
		{
		5 1 roll pop pop pop pop
		findfont
		}
		{
		1 index
		findfont
		dup/FontType get 3 eq
		{
			6 1 roll pop pop pop pop pop false
		}
		{pop true}
		ifelse
		{
		$SubstituteFont
		begin
		pop pop
		/$styleArray 1 index def
		/$regOrdering 2 index def
		pop pop
		0 1 $styleArray length 1 sub
		{
			$styleArray exch get
			ct_StyleDicts $regOrdering
			2 copy known
			{
				get
				exch 2 copy known not
				{pop/Default}
				if
				get
				dup type/nametype eq
				{
				?str1 cvs length dup 1 add exch
				?str1 exch(-)putinterval
				exch dup length exch ?str1 exch 3 index exch putinterval
				add ?str1 exch 0 exch getinterval cvn
				}
				{
				pop pop/Unknown
				}
				ifelse
			}
			{
				pop pop pop pop/Unknown
			}
			ifelse
		}
		for
		end
		findfont 
		}if
		}
	ifelse
	currentglobal false setglobal 3 1 roll
	null copyfont definefont pop
	setglobal
	}bind def
setpacking
userdict/$SubstituteFont 25 dict put
1 dict
	begin
	/SubstituteFont
		dup $error exch 2 copy known
			{get}
			{pop pop{pop/Courier}bind}
		ifelse def
	/currentdistillerparams where dup
		{
		pop pop
		currentdistillerparams/CannotEmbedFontPolicy 2 copy known
			{get/Error eq}
			{pop pop false}
		ifelse
		}
	if not
		{
		countdictstack array dictstack 0 get
			begin
			userdict
				begin
				$SubstituteFont
					begin
					/$str 128 string def
					/$fontpat 128 string def
					/$slen 0 def
					/$sname null def
					/$match false def
					/$fontname null def
					/$substituteFound false def
					/$inVMIndex null def
					/$doSmartSub true def
					/$depth 0 def
					/$fontname null def
					/$italicangle 26.5 def
					/$dstack null def
					/$Strategies 10 dict dup
						begin
						/$Type3Underprint
							{
							currentglobal exch false setglobal
							11 dict
								begin
								/UseFont exch
									$WMode 0 ne
										{
										dup length dict copy
										dup/WMode $WMode put
										/UseFont exch definefont
										}
									if def
								/FontName $fontname dup type/stringtype eq{cvn}if def
								/FontType 3 def
								/FontMatrix[.001 0 0 .001 0 0]def
								/Encoding 256 array dup 0 1 255{/.notdef put dup}for pop def
								/FontBBox[0 0 0 0]def
								/CCInfo 7 dict dup
									begin
									/cc null def
									/x 0 def
									/y 0 def
									end def
								/BuildChar
									{
									exch
										begin
										CCInfo
											begin
											1 string dup 0 3 index put exch pop
											/cc exch def
											UseFont 1000 scalefont setfont
											cc stringwidth/y exch def/x exch def
											x y setcharwidth
											$SubstituteFont/$Strategy get/$Underprint get exec
											0 0 moveto cc show
											x y moveto
											end
										end
									}bind def
								currentdict
								end
							exch setglobal
							}bind def
						/$GetaTint
							2 dict dup
								begin
								/$BuildFont
									{
									dup/WMode known
										{dup/WMode get}
										{0}
									ifelse
									/$WMode exch def
									$fontname exch
									dup/FontName known
										{
										dup/FontName get
										dup type/stringtype eq{cvn}if
										}
										{/unnamedfont}
									ifelse
									exch
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
									1 index/FontName get known
										{
										pop
										Adobe_CoolType_Data/InVMDeepCopiedFonts get
										1 index get
										null copyfont
										}
										{$deepcopyfont}
									ifelse
									exch 1 index exch/FontBasedOn exch put
									dup/FontName $fontname dup type/stringtype eq{cvn}if put
									definefont
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
										begin
										dup/FontBasedOn get 1 index def
										end
									}bind def
								/$Underprint
									{
									gsave
									x abs y abs gt
										{/y 1000 def}
										{/x -1000 def 500 120 translate}
									ifelse
									Level2?
										{
										[/Separation(All)/DeviceCMYK{0 0 0 1 pop}]
										setcolorspace
										}
										{0 setgray}
									ifelse
									10 setlinewidth
									x .8 mul
									[7 3]
										{
										y mul 8 div 120 sub x 10 div exch moveto
										0 y 4 div neg rlineto
										dup 0 rlineto
										0 y 4 div rlineto
										closepath
										gsave
										Level2?
											{.2 setcolor}
											{.8 setgray}
										ifelse
										fill grestore
										stroke
										}
									forall
									pop
									grestore
									}bind def
								end def
						/$Oblique
							1 dict dup
								begin
								/$BuildFont
									{
									currentglobal exch dup gcheck setglobal
									null copyfont
										begin
										/FontBasedOn
										currentdict/FontName known
											{
											FontName
											dup type/stringtype eq{cvn}if
											}
											{/unnamedfont}
										ifelse
										def
										/FontName $fontname dup type/stringtype eq{cvn}if def
										/currentdistillerparams where
											{pop}
											{
											/FontInfo currentdict/FontInfo known
												{FontInfo null copyfont}
												{2 dict}
											ifelse
											dup
												begin
												/ItalicAngle $italicangle def
												/FontMatrix FontMatrix
												[1 0 ItalicAngle dup sin exch cos div 1 0 0]
												matrix concatmatrix readonly
												end
											4 2 roll def
											def
											}
										ifelse
										FontName currentdict
										end
									definefont
									exch setglobal
									}bind def
								end def
						/$None
							1 dict dup
								begin
								/$BuildFont{}bind def
								end def
						end def
					/$Oblique SetSubstituteStrategy
					/$findfontByEnum
						{
						dup type/stringtype eq{cvn}if
						dup/$fontname exch def
						$sname null eq
							{$str cvs dup length $slen sub $slen getinterval}
							{pop $sname}
						ifelse
						$fontpat dup 0(fonts/*)putinterval exch 7 exch putinterval
						/$match false def
						$SubstituteFont/$dstack countdictstack array dictstack put
						mark
							{
							$fontpat 0 $slen 7 add getinterval
								{/$match exch def exit}
							$str filenameforall
							}
						stopped
							{
							cleardictstack
							currentdict
							true
							$SubstituteFont/$dstack get
								{
								exch
									{
									1 index eq
										{pop false}
										{true}
									ifelse
									}
									{begin false}
								ifelse
								}
							forall
							pop
							}
						if
						cleartomark
						/$slen 0 def
						$match false ne
							{$match(fonts/)anchorsearch pop pop cvn}
							{/Courier}
						ifelse
						}bind def
					/$ROS 1 dict dup
						begin
						/Adobe 4 dict dup
							begin
							/Japan1 [/Ryumin-Light/HeiseiMin-W3
										 /GothicBBB-Medium/HeiseiKakuGo-W5
										 /HeiseiMaruGo-W4/Jun101-Light]def
							/Korea1 [/HYSMyeongJo-Medium/HYGoThic-Medium]def
							/GB1	 [/STSong-Light/STHeiti-Regular]def
							/CNS1	[/MKai-Medium/MHei-Medium]def
							end def
						end def
					/$cmapname null def
					/$deepcopyfont
						{
						dup/FontType get 0 eq
							{
							1 dict dup/FontName/copied put copyfont
								begin
								/FDepVector FDepVector copyarray
								0 1 2 index length 1 sub
									{
									2 copy get $deepcopyfont
									dup/FontName/copied put
									/copied exch definefont
									3 copy put pop pop
									}
								for
								def
								currentdict
								end
							}
							{$Strategies/$Type3Underprint get exec}
						ifelse
						}bind def
					/$buildfontname
						{
						dup/CIDFont findresource/CIDSystemInfo get
							begin
							Registry length Ordering length Supplement 8 string cvs
							3 copy length 2 add add add string
							dup 5 1 roll dup 0 Registry putinterval
							dup 4 index(-)putinterval
							dup 4 index 1 add Ordering putinterval
							4 2 roll add 1 add 2 copy(-)putinterval
							end
						1 add 2 copy 0 exch getinterval $cmapname $fontpat cvs exch
						anchorsearch
							{pop pop 3 2 roll putinterval cvn/$cmapname exch def}
							{pop pop pop pop pop}
						ifelse
						length
						$str 1 index(-)putinterval 1 add
						$str 1 index $cmapname $fontpat cvs putinterval
						$cmapname length add
						$str exch 0 exch getinterval cvn
						}bind def
					/$findfontByROS
						{
						/$fontname exch def
						$ROS Registry 2 copy known
							{
							get Ordering 2 copy known
								{get}
								{pop pop[]}
							ifelse
							}
							{pop pop[]}
						ifelse
						false exch
							{
							dup/CIDFont resourcestatus
								{
								pop pop
								save
								1 index/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get}
									{false}
								ifelse
								exch pop
								exch restore
									{pop}
									{exch pop true exit}
								ifelse
								}
								{pop}
							ifelse
							}
						forall
							{$str cvs $buildfontname}
							{
							false(*)
								{
								save exch
								dup/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get not}
									{true}
								ifelse
								exch/CIDSystemInfo get
								dup/Registry get Registry eq
								exch/Ordering get Ordering eq and and
									{exch restore exch pop true exit}
									{pop restore}
								ifelse
								}
							$str/CIDFont resourceforall
								{$buildfontname}
								{$fontname $findfontByEnum}
							ifelse
							}
						ifelse
						}bind def
					end
				end
				currentdict/$error known currentdict/languagelevel known and dup
					{pop $error/SubstituteFont known}
				if
				dup
					{$error}
					{Adobe_CoolType_Core}
				ifelse
				begin
					{
					/SubstituteFont
					/CMap/Category resourcestatus
						{
						pop pop
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{
								$sname null eq
									{dup $str cvs dup length $slen sub $slen getinterval cvn}
									{$sname}
								ifelse
								Adobe_CoolType_Data/InVMFontsByCMap get
								1 index 2 copy known
									{
									get
									false exch
										{
										pop
										currentglobal
											{
											GlobalFontDirectory 1 index known
												{exch pop true exit}
												{pop}
											ifelse
											}
											{
											FontDirectory 1 index known
												{exch pop true exit}
												{
												GlobalFontDirectory 1 index known
													{exch pop true exit}
													{pop}
												ifelse
												}
											ifelse
											}
										ifelse
										}
									forall
									}
									{pop pop false}
								ifelse
									{
									exch pop exch pop
									}
									{
									dup/CMap resourcestatus
										{
										pop pop
										dup/$cmapname exch def
										/CMap findresource/CIDSystemInfo get{def}forall
										$findfontByROS
										}
										{
										128 string cvs
										dup(-)search
											{
											3 1 roll search
												{
												3 1 roll pop
													{dup cvi}
												stopped
													{pop pop pop pop pop $findfontByEnum}
													{
													4 2 roll pop pop
													exch length
													exch
													2 index length
													2 index
													sub
													exch 1 sub -1 0
														{
														$str cvs dup length
														4 index
														0
														4 index
														4 3 roll add
														getinterval
														exch 1 index exch 3 index exch
														putinterval
														dup/CMap resourcestatus
															{
															pop pop
															4 1 roll pop pop pop
															dup/$cmapname exch def
															/CMap findresource/CIDSystemInfo get{def}forall
															$findfontByROS
															true exit
															}
															{pop}
														ifelse
														}
													for
													dup type/booleantype eq
														{pop}
														{pop pop pop $findfontByEnum}
													ifelse
													}
												ifelse
												}
												{pop pop pop $findfontByEnum}
											ifelse
											}
											{pop pop $findfontByEnum}
										ifelse
										}
									ifelse
									}
								ifelse
								}
								{//SubstituteFont exec}
							ifelse
							/$slen 0 def
							end
						}
						}
						{
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{$findfontByEnum}
								{//SubstituteFont exec}
							ifelse
							end
						}
						}
					ifelse
					bind readonly def
					Adobe_CoolType_Core/scfindfont/systemfindfont load put
					}
					{
					/scfindfont
						{
						$SubstituteFont
							begin
							dup systemfindfont
							dup/FontName known
								{dup/FontName get dup 3 index ne}
								{/noname true}
							ifelse
							dup
								{
								/$origfontnamefound 2 index def
								/$origfontname 4 index def/$substituteFound true def
								}
							if
							exch pop
								{
								$slen 0 gt
								$sname null ne
								3 index length $slen gt or and
									{
									pop dup $findfontByEnum findfont
									dup maxlength 1 add dict
										begin
											{1 index/FID eq{pop pop}{def}ifelse}
										forall
										currentdict
										end
									definefont
									dup/FontName known{dup/FontName get}{null}ifelse
									$origfontnamefound ne
										{
										$origfontname $str cvs print
										( substitution revised, using )print
										dup/FontName known
											{dup/FontName get}{(unspecified font)}
										ifelse
										$str cvs print(.\n)print
										}
									if
									}
									{exch pop}
								ifelse
								}
								{exch pop}
							ifelse
							end
						}bind def
					}
				ifelse
				end
			end
		Adobe_CoolType_Core_Defined not
			{
			Adobe_CoolType_Core/findfont
				{
				$SubstituteFont
					begin
					$depth 0 eq
						{
						/$fontname 1 index dup type/stringtype ne{$str cvs}if def
						/$substituteFound false def
						}
					if
					/$depth $depth 1 add def
					end
				scfindfont
				$SubstituteFont
					begin
					/$depth $depth 1 sub def
					$substituteFound $depth 0 eq and
						{
						$inVMIndex null ne
							{dup $inVMIndex $AddInVMFont}
						if
						$doSmartSub
							{
							currentdict/$Strategy known
								{$Strategy/$BuildFont get exec}
							if
							}
						if
						}
					if
					end
				}bind put
			}
		if
		}
	if
	end
/$AddInVMFont
	{
	exch/FontName 2 copy known
		{
		get
		1 dict dup begin exch 1 index gcheck def end exch
		Adobe_CoolType_Data/InVMFontsByCMap get exch
		$DictAdd
		}
		{pop pop pop}
	ifelse
	}bind def
/$DictAdd
	{
	2 copy known not
		{2 copy 4 index length dict put}
	if
	Level2? not
		{
		2 copy get dup maxlength exch length 4 index length add lt
		2 copy get dup length 4 index length add exch maxlength 1 index lt
			{
			2 mul dict
				begin
				2 copy get{forall}def
				2 copy currentdict put
				end
			}
			{pop}
		ifelse
		}
	if
	get
		begin
			{def}
		forall
		end
	}bind def
end
end
%%EndResource
currentglobal true setglobal
%%BeginResource: procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%Copyright: Copyright 1987-2006 Adobe Systems Incorporated.
%%Version: 1.23 0
systemdict/languagelevel known dup
	{currentglobal false setglobal}
	{false}
ifelse
exch
userdict/Adobe_CoolType_Utility 2 copy known
	{2 copy get dup maxlength 27 add dict copy}
	{27 dict}
ifelse put
Adobe_CoolType_Utility
	begin
	/@eexecStartData
		 <BAB431EA07F209EB8C4348311481D9D3F76E3D15246555577D87BC510ED54E
		 118C39697FA9F6DB58128E60EB8A12FA24D7CDD2FA94D221FA9EC8DA3E5E6A1C
		 4ACECC8C2D39C54E7C946031DD156C3A6B4A09AD29E1867A>def
	/@recognizeCIDFont null def
	/ct_Level2? exch def
	/ct_Clone? 1183615869 internaldict dup
			/CCRun known not
			exch/eCCRun known not
			ct_Level2? and or def
ct_Level2?
	{globaldict begin currentglobal true setglobal}
if
	/ct_AddStdCIDMap
		ct_Level2?
			{{
				mark
				Adobe_CoolType_Utility/@recognizeCIDFont currentdict put
					{
					((Hex)57 StartData
					 0615 1e27 2c39 1c60 d8a8 cc31 fe2b f6e0
					 7aa3 e541 e21c 60d8 a8c9 c3d0 6d9e 1c60
					 d8a8 c9c2 02d7 9a1c 60d8 a849 1c60 d8a8
					 cc36 74f4 1144 b13b 77)0()/SubFileDecode filter cvx exec
					}
				stopped
					{
					 cleartomark
					 Adobe_CoolType_Utility/@recognizeCIDFont get
					 countdictstack dup array dictstack
					 exch 1 sub -1 0
						 {
						 2 copy get 3 index eq
								{1 index length exch sub 1 sub{end}repeat exit}
								{pop}
						 ifelse
						 }
					 for
					 pop pop
					 Adobe_CoolType_Utility/@eexecStartData get eexec
					}
					{cleartomark}
				ifelse
			}}
			{{
				Adobe_CoolType_Utility/@eexecStartData get eexec
			}}
		ifelse bind def
userdict/cid_extensions known
dup{cid_extensions/cid_UpdateDB known and}if
	{
	 cid_extensions
	 begin
	/cid_GetCIDSystemInfo
		{
		 1 index type/stringtype eq
			{exch cvn exch}
		 if
		 cid_extensions
			 begin
			 dup load 2 index known
				{
				 2 copy
				 cid_GetStatusInfo
				 dup null ne
					{
					 1 index load
					 3 index get
					 dup null eq
						 {pop pop cid_UpdateDB}
						 {
						 exch
						 1 index/Created get eq
							 {exch pop exch pop}
							 {pop cid_UpdateDB}
						 ifelse
						 }
					 ifelse
					}
					{pop cid_UpdateDB}
				 ifelse
				}
				{cid_UpdateDB}
			 ifelse
			 end
		}bind def
	 end
	}
if
ct_Level2?
	{end setglobal}
if
	/ct_UseNativeCapability? systemdict/composefont known def
	/ct_MakeOCF 35 dict def
	/ct_Vars 25 dict def
	/ct_GlyphDirProcs 6 dict def
	/ct_BuildCharDict 15 dict dup
		begin
		/charcode 2 string def
		/dst_string 1500 string def
		/nullstring()def
		/usewidths? true def
		end def
	ct_Level2?{setglobal}{pop}ifelse
	ct_GlyphDirProcs
		begin
		/GetGlyphDirectory
			{
			systemdict/languagelevel known
				{pop/CIDFont findresource/GlyphDirectory get}
				{
				1 index/CIDFont findresource/GlyphDirectory
				get dup type/dicttype eq
					{
					dup dup maxlength exch length sub 2 index lt
						{
						dup length 2 index add dict copy 2 index
						/CIDFont findresource/GlyphDirectory 2 index put
						}
					if
					}
				if
				exch pop exch pop
				}
			ifelse
			+
			}def
		/+
			{
			systemdict/languagelevel known
				{
				currentglobal false setglobal
				3 dict begin
					/vm exch def
				}
				{1 dict begin}
			ifelse
			/$ exch def
			systemdict/languagelevel known
				{
				vm setglobal
				/gvm currentglobal def
				$ gcheck setglobal
				}
			if
			?{$ begin}if
			}def
		/?{$ type/dicttype eq}def
		/|{
			userdict/Adobe_CoolType_Data known
				{
			Adobe_CoolType_Data/AddWidths? known
				{
				 currentdict Adobe_CoolType_Data
					begin
					 begin
						AddWidths?
								{
								Adobe_CoolType_Data/CC 3 index put
								?{def}{$ 3 1 roll put}ifelse
								CC charcode exch 1 index 0 2 index 256 idiv put
								1 index exch 1 exch 256 mod put
								stringwidth 2 array astore
								currentfont/Widths get exch CC exch put
								}
								{?{def}{$ 3 1 roll put}ifelse}
							ifelse
					end
				end
				}
				{?{def}{$ 3 1 roll put}ifelse}	ifelse
				}
				{?{def}{$ 3 1 roll put}ifelse}
			ifelse
			}def
		/!
			{
			?{end}if
			systemdict/languagelevel known
				{gvm setglobal}
			if
			end
			}def
		/:{string currentfile exch readstring pop}executeonly def
		end
	ct_MakeOCF
		begin
		/ct_cHexEncoding
		[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
		/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
		/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
		/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
		/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
		/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
		/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
		/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
		/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
		/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
		/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
		/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
		/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
		/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
		/ct_CID_STR_SIZE 8000 def
		/ct_mkocfStr100 100 string def
		/ct_defaultFontMtx[.001 0 0 .001 0 0]def
		/ct_1000Mtx[1000 0 0 1000 0 0]def
		/ct_raise{exch cvx exch errordict exch get exec stop}bind def
		/ct_reraise
			{cvx $error/errorname get(Error: )print dup(						 )cvs print
					errordict exch get exec stop
			}bind def
		/ct_cvnsi
			{
			1 index add 1 sub 1 exch 0 4 1 roll
				{
				2 index exch get
				exch 8 bitshift
				add
				}
			for
			exch pop
			}bind def
		/ct_GetInterval
			{
			Adobe_CoolType_Utility/ct_BuildCharDict get
				begin
				/dst_index 0 def
				dup dst_string length gt
					{dup string/dst_string exch def}
				if
				1 index ct_CID_STR_SIZE idiv
				/arrayIndex exch def
				2 index arrayIndex get
				2 index
				arrayIndex ct_CID_STR_SIZE mul
				sub
					{
					dup 3 index add 2 index length le
						{
						2 index getinterval
						dst_string dst_index 2 index putinterval
						length dst_index add/dst_index exch def
						exit
						}
						{
						1 index length 1 index sub
						dup 4 1 roll
						getinterval
						dst_string dst_index 2 index putinterval
						pop dup dst_index add/dst_index exch def
						sub
						/arrayIndex arrayIndex 1 add def
						2 index dup length arrayIndex gt
							 {arrayIndex get}
							 {
							 pop
							 exit
							 }
						ifelse
						0
						}
					ifelse
					}
				loop
				pop pop pop
				dst_string 0 dst_index getinterval
				end
			}bind def
		ct_Level2?
			{
			/ct_resourcestatus
			currentglobal mark true setglobal
				{/unknowninstancename/Category resourcestatus}
			stopped
				{cleartomark setglobal true}
				{cleartomark currentglobal not exch setglobal}
			ifelse
				{
					{
					mark 3 1 roll/Category findresource
						begin
						ct_Vars/vm currentglobal put
						({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
							{cleartomark false}
							{{3 2 roll pop true}{cleartomark false}ifelse}
						ifelse
						ct_Vars/vm get setglobal
						end
					}
				}
				{{resourcestatus}}
			ifelse bind def
			/CIDFont/Category ct_resourcestatus
				{pop pop}
				{
				currentglobal true setglobal
				/Generic/Category findresource
				dup length dict copy
				dup/InstanceType/dicttype put
				/CIDFont exch/Category defineresource pop
				setglobal
				}
			ifelse
			ct_UseNativeCapability?
				{
				/CIDInit/ProcSet findresource begin
				12 dict begin
				begincmap
				/CIDSystemInfo 3 dict dup begin
				 /Registry(Adobe)def
				 /Ordering(Identity)def
				 /Supplement 0 def
				end def
				/CMapName/Identity-H def
				/CMapVersion 1.000 def
				/CMapType 1 def
				1 begincodespacerange
				<0000><FFFF>
				endcodespacerange
				1 begincidrange
				<0000><FFFF>0
				endcidrange
				endcmap
				CMapName currentdict/CMap defineresource pop
				end
				end
				}
			if
			}
			{
			/ct_Category 2 dict begin
			/CIDFont 10 dict def
			/ProcSet	2 dict def
			currentdict
			end
			def
			/defineresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					dup dup maxlength exch length eq
						{
						dup length 10 add dict copy
						ct_Category 2 index 2 index put
						}
					if
					3 index 3 index put
					pop exch pop
					}
					{pop pop/defineresource/undefined ct_raise}
				ifelse
				}bind def
			/findresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index 2 copy known
						{get 3 1 roll pop pop}
						{pop pop/findresource/undefinedresource ct_raise}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/resourcestatus
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index known
					exch pop exch pop
						{
						0 -1 true
						}
						{
						false
						}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/ct_resourcestatus/resourcestatus load def
			}
		ifelse
		/ct_CIDInit 2 dict
			begin
			/ct_cidfont_stream_init
				{
					{
					dup(Binary)eq
						{
						pop
						null
						currentfile
						ct_Level2?
							{
								{cid_BYTE_COUNT()/SubFileDecode filter}
							stopped
								{pop pop pop}
							if
							}
						if
						/readstring load
						exit
						}
					if
					dup(Hex)eq
						{
						pop
						currentfile
						ct_Level2?
							{
								{null exch/ASCIIHexDecode filter/readstring}
							stopped
								{pop exch pop(>)exch/readhexstring}
							if
							}
							{(>)exch/readhexstring}
						ifelse
						load
						exit
						}
					if
					/StartData/typecheck ct_raise
					}
				loop
				cid_BYTE_COUNT ct_CID_STR_SIZE le
					{
					2 copy cid_BYTE_COUNT string exch exec
					pop
					1 array dup
					3 -1 roll
					0 exch put
					}
					{
					cid_BYTE_COUNT ct_CID_STR_SIZE div ceiling cvi
					dup array exch 2 sub 0 exch 1 exch
						{
						2 copy
						5 index
						ct_CID_STR_SIZE
						string
						6 index exec
						pop
						put
						pop
						}
					for
					2 index
					cid_BYTE_COUNT ct_CID_STR_SIZE mod string
					3 index exec
					pop
					1 index exch
					1 index length 1 sub
					exch put
					}
				ifelse
				cid_CIDFONT exch/GlyphData exch put
				2 index null eq
					{
					pop pop pop
					}
					{
					pop/readstring load
					1 string exch
						{
						3 copy exec
						pop
						dup length 0 eq
							{
							pop pop pop pop pop
							true exit
							}
						if
						4 index
						eq
							{
							pop pop pop pop
							false exit
							}
						if
						}
					loop
					pop
					}
				ifelse
				}bind def
			/StartData
				{
				mark
					{
					currentdict
					dup/FDArray get 0 get/FontMatrix get
					0 get 0.001 eq
						{
						dup/CDevProc known not
							{
							/CDevProc 1183615869 internaldict/stdCDevProc 2 copy known
								{get}
								{
								pop pop
								{pop pop pop pop pop 0 -1000 7 index 2 div 880}
								}
							ifelse
							def
							}
						if
						}
						{
						/CDevProc
							{
							 pop pop pop pop pop
							 0
							 1 cid_temp/cid_CIDFONT get
							/FDArray get 0 get
							/FontMatrix get 0 get div
							 7 index 2 div
							 1 index 0.88 mul
							}def
						}
					ifelse
					/cid_temp 15 dict def
					cid_temp
						begin
						/cid_CIDFONT exch def
						3 copy pop
						dup/cid_BYTE_COUNT exch def 0 gt
							{
							ct_cidfont_stream_init
							FDArray
								{
								/Private get
								dup/SubrMapOffset known
									{
									begin
									/Subrs SubrCount array def
									Subrs
									SubrMapOffset
									SubrCount
									SDBytes
									ct_Level2?
										{
										currentdict dup/SubrMapOffset undef
										dup/SubrCount undef
										/SDBytes undef
										}
									if
									end
									/cid_SD_BYTES exch def
									/cid_SUBR_COUNT exch def
									/cid_SUBR_MAP_OFFSET exch def
									/cid_SUBRS exch def
									cid_SUBR_COUNT 0 gt
										{
										GlyphData cid_SUBR_MAP_OFFSET cid_SD_BYTES ct_GetInterval
										0 cid_SD_BYTES ct_cvnsi
										0 1 cid_SUBR_COUNT 1 sub
											{
											exch 1 index
											1 add
											cid_SD_BYTES mul cid_SUBR_MAP_OFFSET add
											GlyphData exch cid_SD_BYTES ct_GetInterval
											0 cid_SD_BYTES ct_cvnsi
											cid_SUBRS 4 2 roll
											GlyphData exch
											4 index
											1 index
											sub
											ct_GetInterval
											dup length string copy put
											}
										for
										pop
										}
									if
									}
									{pop}
								ifelse
								}
							forall
							}
						if
						cleartomark pop pop
						end
					CIDFontName currentdict/CIDFont defineresource pop
					end end
					}
				stopped
					{cleartomark/StartData ct_reraise}
				if
				}bind def
			currentdict
			end def
		/ct_saveCIDInit
			{
			/CIDInit/ProcSet ct_resourcestatus
				{true}
				{/CIDInitC/ProcSet ct_resourcestatus}
			ifelse
				{
				pop pop
				/CIDInit/ProcSet findresource
				ct_UseNativeCapability?
					{pop null}
					{/CIDInit ct_CIDInit/ProcSet defineresource pop}
				ifelse
				}
				{/CIDInit ct_CIDInit/ProcSet defineresource pop null}
			ifelse
			ct_Vars exch/ct_oldCIDInit exch put
			}bind def
		/ct_restoreCIDInit
			{
			ct_Vars/ct_oldCIDInit get dup null ne
				{/CIDInit exch/ProcSet defineresource pop}
				{pop}
			ifelse
			}bind def
		/ct_BuildCharSetUp
			{
			1 index
				begin
				CIDFont
					begin
					Adobe_CoolType_Utility/ct_BuildCharDict get
						begin
						/ct_dfCharCode exch def
						/ct_dfDict exch def
						CIDFirstByte ct_dfCharCode add
						dup CIDCount ge
							{pop 0}
						if
						/cid exch def
							{
							GlyphDirectory cid 2 copy known
								{get}
								{pop pop nullstring}
							ifelse
							dup length FDBytes sub 0 gt
								{
								dup
								FDBytes 0 ne
									{0 FDBytes ct_cvnsi}
									{pop 0}
								ifelse
								/fdIndex exch def
								dup length FDBytes sub FDBytes exch getinterval
								/charstring exch def
								exit
								}
								{
								pop
								cid 0 eq
									{/charstring nullstring def exit}
								if
								/cid 0 def
								}
							ifelse
							}
						loop
			}def
		/ct_SetCacheDevice
			{
			0 0 moveto
			dup stringwidth
			3 -1 roll
			true charpath
			pathbbox
			0 -1000
			7 index 2 div 880
			setcachedevice2
			0 0 moveto
			}def
		/ct_CloneSetCacheProc
			{
			1 eq
				{
				stringwidth
				pop -2 div -880
				0 -1000 setcharwidth
				moveto
				}
				{
				usewidths?
					{
					currentfont/Widths get cid
					2 copy known
						{get exch pop aload pop}
						{pop pop stringwidth}
					ifelse
					}
					{stringwidth}
				ifelse
				setcharwidth
				0 0 moveto
				}
			ifelse
			}def
		/ct_Type3ShowCharString
			{
			ct_FDDict fdIndex 2 copy known
				{get}
				{
				currentglobal 3 1 roll
				1 index gcheck setglobal
				ct_Type1FontTemplate dup maxlength dict copy
					begin
					FDArray fdIndex get
					dup/FontMatrix 2 copy known
						{get}
						{pop pop ct_defaultFontMtx}
					ifelse
					/FontMatrix exch dup length array copy def
					/Private get
					/Private exch def
					/Widths rootfont/Widths get def
					/CharStrings 1 dict dup/.notdef
						<d841272cf18f54fc13>dup length string copy put def
					currentdict
					end
				/ct_Type1Font exch definefont
				dup 5 1 roll put
				setglobal
				}
			ifelse
			dup/CharStrings get 1 index/Encoding get
			ct_dfCharCode get charstring put
			rootfont/WMode 2 copy known
				{get}
				{pop pop 0}
			ifelse
			exch
			1000 scalefont setfont
			ct_str1 0 ct_dfCharCode put
			ct_str1 exch ct_dfSetCacheProc
			ct_SyntheticBold
				{
				currentpoint
				ct_str1 show
				newpath
				moveto
				ct_str1 true charpath
				ct_StrokeWidth setlinewidth
				stroke
				}
				{ct_str1 show}
			ifelse
			}def
		/ct_Type4ShowCharString
			{
			ct_dfDict ct_dfCharCode charstring
			FDArray fdIndex get
			dup/FontMatrix get dup ct_defaultFontMtx ct_matrixeq not
				{ct_1000Mtx matrix concatmatrix concat}
				{pop}
			ifelse
			/Private get
			Adobe_CoolType_Utility/ct_Level2? get not
				{
				ct_dfDict/Private
				3 -1 roll
					{put}
				1183615869 internaldict/superexec get exec
				}
			if
			1183615869 internaldict
			Adobe_CoolType_Utility/ct_Level2? get
				{1 index}
				{3 index/Private get mark 6 1 roll}
			ifelse
			dup/RunInt known
				{/RunInt get}
				{pop/CCRun}
			ifelse
			get exec
			Adobe_CoolType_Utility/ct_Level2? get not
				{cleartomark}
			if
			}bind def
		/ct_BuildCharIncremental
			{
				{
				Adobe_CoolType_Utility/ct_MakeOCF get begin
				ct_BuildCharSetUp
				ct_ShowCharString
				}
			stopped
				{stop}
			if
			end
			end
			end
			end
			}bind def
		/BaseFontNameStr(BF00)def
		/ct_Type1FontTemplate 14 dict
			begin
			/FontType 1 def
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/PaintType 0 def
			currentdict
			end def
		/BaseFontTemplate 11 dict
			begin
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/BuildChar/ct_BuildCharIncremental load def
			ct_Clone?
				{
				/FontType 3 def
				/ct_ShowCharString/ct_Type3ShowCharString load def
				/ct_dfSetCacheProc/ct_CloneSetCacheProc load def
				/ct_SyntheticBold false def
				/ct_StrokeWidth 1 def
				}
				{
				/FontType 4 def
				/Private 1 dict dup/lenIV 4 put def
				/CharStrings 1 dict dup/.notdef<d841272cf18f54fc13>put def
				/PaintType 0 def
				/ct_ShowCharString/ct_Type4ShowCharString load def
				}
			ifelse
			/ct_str1 1 string def
			currentdict
			end def
		/BaseFontDictSize BaseFontTemplate length 5 add def
		/ct_matrixeq
			{
			true 0 1 5
				{
				dup 4 index exch get exch 3 index exch get eq and
				dup not
					{exit}
				if
				}
			for
			exch pop exch pop
			}bind def
		/ct_makeocf
			{
			15 dict
				begin
				exch/WMode exch def
				exch/FontName exch def
				/FontType 0 def
				/FMapType 2 def
			dup/FontMatrix known
				{dup/FontMatrix get/FontMatrix exch def}
				{/FontMatrix matrix def}
			ifelse
				/bfCount 1 index/CIDCount get 256 idiv 1 add
					dup 256 gt{pop 256}if def
				/Encoding
					256 array 0 1 bfCount 1 sub{2 copy dup put pop}for
					bfCount 1 255{2 copy bfCount put pop}for
					def
				/FDepVector bfCount dup 256 lt{1 add}if array def
				BaseFontTemplate BaseFontDictSize dict copy
					begin
					/CIDFont exch def
					CIDFont/FontBBox known
						{CIDFont/FontBBox get/FontBBox exch def}
					if
					CIDFont/CDevProc known
						{CIDFont/CDevProc get/CDevProc exch def}
					if
					currentdict
					end
				BaseFontNameStr 3(0)putinterval
				0 1 bfCount dup 256 eq{1 sub}if
					{
					FDepVector exch
					2 index BaseFontDictSize dict copy
						begin
						dup/CIDFirstByte exch 256 mul def
						FontType 3 eq
							{/ct_FDDict 2 dict def}
						if
						currentdict
						end
					1 index 16
					BaseFontNameStr 2 2 getinterval cvrs pop
					BaseFontNameStr exch definefont
					put
					}
				for
				ct_Clone?
					{/Widths 1 index/CIDFont get/GlyphDirectory get length dict def}
				if
				FontName
				currentdict
				end
			definefont
			ct_Clone?
				{
				gsave
				dup 1000 scalefont setfont
				ct_BuildCharDict
					begin
					/usewidths? false def
					currentfont/Widths get
						begin
						exch/CIDFont get/GlyphDirectory get
							{
							pop
							dup charcode exch 1 index 0 2 index 256 idiv put
							1 index exch 1 exch 256 mod put
							stringwidth 2 array astore def
							}
						forall
						end
					/usewidths? true def
					end
				grestore
				}
				{exch pop}
			ifelse
			}bind def
		currentglobal true setglobal
		/ct_ComposeFont
			{
			ct_UseNativeCapability?
				{				
				2 index/CMap ct_resourcestatus
					{pop pop exch pop}
					{
					/CIDInit/ProcSet findresource
						begin
						12 dict
							begin
							begincmap
							/CMapName 3 index def
							/CMapVersion 1.000 def
							/CMapType 1 def
							exch/WMode exch def
							/CIDSystemInfo 3 dict dup
								begin
								/Registry(Adobe)def
								/Ordering
								CMapName ct_mkocfStr100 cvs
								(Adobe-)search
									{
									pop pop
									(-)search
										{
										dup length string copy
										exch pop exch pop
										}
										{pop(Identity)}
									ifelse
									}
									{pop (Identity)}
								ifelse
								def
								/Supplement 0 def
								end def
							1 begincodespacerange
							<0000><FFFF>
							endcodespacerange
							1 begincidrange
							<0000><FFFF>0
							endcidrange
							endcmap
							CMapName currentdict/CMap defineresource pop
							end
						end
					}
				ifelse
				composefont
				}
				{
				3 2 roll pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
			setglobal
		/ct_MakeIdentity
			{
			ct_UseNativeCapability?
				{
				1 index/CMap ct_resourcestatus
					{pop pop}
					{
					/CIDInit/ProcSet findresource begin
					12 dict begin
					begincmap
					/CMapName 2 index def
					/CMapVersion 1.000 def
					/CMapType 1 def
					/CIDSystemInfo 3 dict dup
						begin
						/Registry(Adobe)def
						/Ordering
						CMapName ct_mkocfStr100 cvs
						(Adobe-)search
							{
							pop pop
							(-)search
								{dup length string copy exch pop exch pop}
								{pop(Identity)}
							ifelse
							}
							{pop(Identity)}
						ifelse
						def
						/Supplement 0 def
						end def
					1 begincodespacerange
					<0000><FFFF>
					endcodespacerange
					1 begincidrange
					<0000><FFFF>0
					endcidrange
					endcmap
					CMapName currentdict/CMap defineresource pop
					end
					end
					}
				ifelse
				composefont
				}
				{
				exch pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
		currentdict readonly pop
		end
	end
%%EndResource
setglobal
%%BeginResource: procset Adobe_CoolType_Utility_T42 1.0 0
%%Copyright: Copyright 1987-2004 Adobe Systems Incorporated.
%%Version: 1.0 0
userdict/ct_T42Dict 15 dict put
ct_T42Dict begin
/Is2015?
{
 version
 cvi
 2015
 ge
}bind def
/AllocGlyphStorage
{
 Is2015?
 {	
	pop
 }
 {
	{string}forall
 }ifelse
}bind def
/Type42DictBegin
{
25 dict begin
 /FontName exch def
 /CharStrings 256 dict 
begin
	 /.notdef 0 def
	 currentdict 
end def
 /Encoding exch def
 /PaintType 0 def
 /FontType 42 def
 /FontMatrix[1 0 0 1 0 0]def
 4 array astore cvx/FontBBox exch def
 /sfnts
}bind def
/Type42DictEnd 
{
 currentdict dup/FontName get exch definefont end
ct_T42Dict exch
dup/FontName get exch put
}bind def
/RD{string currentfile exch readstring pop}executeonly def
/PrepFor2015
{
Is2015?
{		 
	/GlyphDirectory 
	 16
	 dict def
	 sfnts 0 get
	 dup
	 2 index
	(glyx)
	 putinterval
	 2 index 
	(locx)
	 putinterval
	 pop
	 pop
}
{
	 pop
	 pop
}ifelse			
}bind def
/AddT42Char
{
Is2015?
{
	/GlyphDirectory get 
	begin
	def
	end
	pop
	pop
}
{
	/sfnts get
	4 index
	get
	3 index
 2 index
	putinterval
	pop
	pop
	pop
	pop
}ifelse
}bind def
/T0AddT42Mtx2
{
/CIDFont findresource/Metrics2 get begin def end
}bind def
end
%%EndResource
currentglobal true setglobal
%%BeginFile: MMFauxFont.prc
%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. 
%%All Rights Reserved.
userdict /ct_EuroDict 10 dict put
ct_EuroDict begin
/ct_CopyFont 
{
    { 1 index /FID ne {def} {pop pop} ifelse} forall
} def
/ct_GetGlyphOutline
{
   gsave
   initmatrix newpath
   exch findfont dup 
   length 1 add dict 
   begin 
		ct_CopyFont 
		/Encoding Encoding dup length array copy 
		dup
		4 -1 roll
		0 exch put   
		def
		currentdict
   end
   /ct_EuroFont exch definefont
   1000 scalefont setfont
   0 0 moveto
   [
       <00> stringwidth 
       <00> false charpath
       pathbbox
       [
       {/m cvx} {/l cvx} {/c cvx} {/cp cvx} pathforall
   grestore
   counttomark 8 add
}
def
/ct_MakeGlyphProc
{
   ] cvx
   /ct_PSBuildGlyph cvx
   ] cvx
} def
/ct_PSBuildGlyph 
{ 
 	gsave 
	8 -1 roll pop 
	7 1 roll 
        6 -2 roll ct_FontMatrix transform 6 2 roll
        4 -2 roll ct_FontMatrix transform 4 2 roll
        ct_FontMatrix transform 
	currentdict /PaintType 2 copy known {get 2 eq}{pop pop false} ifelse  
	dup  9 1 roll 
	{  
		currentdict /StrokeWidth 2 copy known  
		{   
			get 2 div   
			0 ct_FontMatrix dtransform pop
			5 1 roll  
			4 -1 roll 4 index sub   
			4 1 roll   
			3 -1 roll 4 index sub  
			3 1 roll   
			exch 4 index add exch  
			4 index add  
			5 -1 roll pop  
		}  
		{	 
			pop pop 
		}  
		ifelse  
	}       
    if  
	setcachedevice  
        ct_FontMatrix concat
        ct_PSPathOps begin 
		exec 
	end 
	{  
		currentdict /StrokeWidth 2 copy known  
			{ get }  
			{ pop pop 0 }  
  	    ifelse  
		setlinewidth stroke  
	}  
	{   
	    fill  
	}  
	ifelse  
    grestore
} def 
/ct_PSPathOps 4 dict dup begin 
	/m {moveto} def 
	/l {lineto} def 
	/c {curveto} def 
	/cp {closepath} def 
end 
def 
/ct_matrix1000 [1000 0 0 1000 0 0] def
/ct_AddGlyphProc  
{
   2 index findfont dup length 4 add dict 
   begin 
	ct_CopyFont 
	/CharStrings CharStrings dup length 1 add dict copy
      begin
         3 1 roll def  
         currentdict 
      end 
      def
      /ct_FontMatrix ct_matrix1000 FontMatrix matrix concatmatrix def
      /ct_PSBuildGlyph /ct_PSBuildGlyph load def
      /ct_PSPathOps /ct_PSPathOps load def
      currentdict
   end
   definefont pop
}
def
systemdict /languagelevel known
{
	/ct_AddGlyphToPrinterFont {
		2 copy
		ct_GetGlyphOutline 3 add -1 roll restore 
		ct_MakeGlyphProc 
		ct_AddGlyphProc
	} def
}
{
	/ct_AddGlyphToPrinterFont {
	    pop pop restore
		Adobe_CTFauxDict /$$$FONTNAME get
		/Euro
		Adobe_CTFauxDict /$$$SUBSTITUTEBASE get
		ct_EuroDict exch get
		ct_AddGlyphProc
	} def
} ifelse
/AdobeSansMM 
{ 
556 0 24 -19 541 703 
	{ 
	541 628 m 
	510 669 442 703 354 703 c 
	201 703 117 607 101 444 c 
	50 444 l 
	25 372 l 
	97 372 l 
	97 301 l 
	49 301 l 
	24 229 l 
	103 229 l 
	124 67 209 -19 350 -19 c 
	435 -19 501 25 509 32 c 
	509 131 l 
	492 105 417 60 343 60 c 
	267 60 204 127 197 229 c 
	406 229 l 
	430 301 l 
	191 301 l 
	191 372 l 
	455 372 l 
	479 444 l 
	194 444 l 
	201 531 245 624 348 624 c 
	433 624 484 583 509 534 c 
	cp 
	556 0 m 
	}
ct_PSBuildGlyph
} def
/AdobeSerifMM 
{ 
500 0 10 -12 484 692 
	{ 
	347 298 m 
	171 298 l 
	170 310 170 322 170 335 c 
	170 362 l 
	362 362 l 
	374 403 l 
	172 403 l 
	184 580 244 642 308 642 c 
	380 642 434 574 457 457 c 
	481 462 l 
	474 691 l 
	449 691 l 
	433 670 429 657 410 657 c 
	394 657 360 692 299 692 c 
	204 692 94 604 73 403 c 
	22 403 l 
	10 362 l 
	70 362 l 
	69 352 69 341 69 330 c 
	69 319 69 308 70 298 c 
	22 298 l 
	10 257 l 
	73 257 l 
	97 57 216 -12 295 -12 c 
	364 -12 427 25 484 123 c 
	458 142 l 
	425 101 384 37 316 37 c 
	256 37 189 84 173 257 c 
	335 257 l 
	cp 
	500 0 m 
	} 
ct_PSBuildGlyph 
} def 
end		
%%EndFile
setglobal
Adobe_CoolType_Core begin /$Oblique SetSubstituteStrategy end
%%BeginResource: procset Adobe_AGM_Image 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Image 71 dict dup begin put
/Adobe_AGM_Image_Id/Adobe_AGM_Image_1.0_0 def
/nd{
	null def
}bind def
/AGMIMG_&image nd
/AGMIMG_&colorimage nd
/AGMIMG_&imagemask nd
/AGMIMG_mbuf()def
/AGMIMG_ybuf()def
/AGMIMG_kbuf()def
/AGMIMG_c 0 def
/AGMIMG_m 0 def
/AGMIMG_y 0 def
/AGMIMG_k 0 def
/AGMIMG_tmp nd
/AGMIMG_imagestring0 nd
/AGMIMG_imagestring1 nd
/AGMIMG_imagestring2 nd
/AGMIMG_imagestring3 nd
/AGMIMG_imagestring4 nd
/AGMIMG_imagestring5 nd
/AGMIMG_cnt nd
/AGMIMG_fsave nd
/AGMIMG_colorAry nd
/AGMIMG_override nd
/AGMIMG_name nd
/AGMIMG_maskSource nd
/AGMIMG_flushfilters nd
/invert_image_samples nd
/knockout_image_samples	nd
/img nd
/sepimg nd
/devnimg nd
/idximg nd
/ds
{
	Adobe_AGM_Core begin
	Adobe_AGM_Image begin
	/AGMIMG_&image systemdict/image get def
	/AGMIMG_&imagemask systemdict/imagemask get def
	/colorimage where{
		pop
		/AGMIMG_&colorimage/colorimage ldf
	}if
	end
	end
}def
/ps
{
	Adobe_AGM_Image begin
	/AGMIMG_ccimage_exists{/customcolorimage where 
		{
			pop
			/Adobe_AGM_OnHost_Seps where
			{
			pop false
			}{
			/Adobe_AGM_InRip_Seps where
				{
				pop false
				}{
					true
				}ifelse
			}ifelse
			}{
			false
		}ifelse 
	}bdf
	level2{
		/invert_image_samples
		{
			Adobe_AGM_Image/AGMIMG_tmp Decode length ddf
			/Decode[Decode 1 get Decode 0 get]def
		}def
		/knockout_image_samples
		{
			Operator/imagemask ne{
				/Decode[1 1]def
			}if
		}def
	}{	
		/invert_image_samples
		{
			{1 exch sub}currenttransfer addprocs settransfer
		}def
		/knockout_image_samples
		{
			{pop 1}currenttransfer addprocs settransfer
		}def
	}ifelse
	/img/imageormask ldf
	/sepimg/sep_imageormask ldf
	/devnimg/devn_imageormask ldf
	/idximg/indexed_imageormask ldf
	/_ctype 7 def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
}def
/pt
{
	end
}def
/dt
{
}def
/AGMIMG_flushfilters
{
	dup type/arraytype ne
		{1 array astore}if
	dup 0 get currentfile ne
		{dup 0 get flushfile}if
		{
		dup type/filetype eq
			{
			dup status 1 index currentfile ne and
				{closefile}
				{pop}
			ifelse
			}{pop}ifelse
		}forall
}def
/AGMIMG_init_common
{
	currentdict/T known{/ImageType/T ldf currentdict/T undef}if
	currentdict/W known{/Width/W ldf currentdict/W undef}if
	currentdict/H known{/Height/H ldf currentdict/H undef}if
	currentdict/M known{/ImageMatrix/M ldf currentdict/M undef}if
	currentdict/BC known{/BitsPerComponent/BC ldf currentdict/BC undef}if
	currentdict/D known{/Decode/D ldf currentdict/D undef}if
	currentdict/DS known{/DataSource/DS ldf currentdict/DS undef}if
	currentdict/O known{
		/Operator/O load 1 eq{
			/imagemask
		}{
			/O load 2 eq{
				/image 
			}{
				/colorimage
			}ifelse
		}ifelse
		def
		currentdict/O undef
	}if
	currentdict/HSCI known{/HostSepColorImage/HSCI ldf currentdict/HSCI undef}if
	currentdict/MD known{/MultipleDataSources/MD ldf currentdict/MD undef}if
	currentdict/I known{/Interpolate/I ldf currentdict/I undef}if
	currentdict/SI known{/SkipImageProc/SI ldf currentdict/SI undef}if
	/DataSource load xcheck not{
		DataSource type/arraytype eq{
			DataSource 0 get type/filetype eq{
				/_Filters DataSource def
				currentdict/MultipleDataSources known not{
					/DataSource DataSource dup length 1 sub get def 
				}if
			}if
		}if
		currentdict/MultipleDataSources known not{
			/MultipleDataSources DataSource type/arraytype eq{
				DataSource length 1 gt
			}
			{false}ifelse def
		}if
	}if
	/NComponents Decode length 2 div def
	currentdict/SkipImageProc known not{/SkipImageProc{false}def}if
}bdf
/imageormask_sys
{
	begin
		AGMIMG_init_common
		save mark
		level2{
			currentdict
			Operator/imagemask eq{
				AGMIMG_&imagemask
			}{
				use_mask{
					process_mask AGMIMG_&image
				}{
					AGMIMG_&image
				}ifelse
			}ifelse
		}{
			Width Height
			Operator/imagemask eq{
				Decode 0 get 1 eq Decode 1 get 0 eq	and
				ImageMatrix/DataSource load
				AGMIMG_&imagemask
			}{
				BitsPerComponent ImageMatrix/DataSource load
				AGMIMG_&image
			}ifelse
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
		cleartomark restore
	end
}def
/overprint_plate
{
	currentoverprint{
		0 get dup type/nametype eq{
			dup/DeviceGray eq{
				pop AGMCORE_black_plate not
			}{
				/DeviceCMYK eq{
					AGMCORE_is_cmyk_sep not
				}if
			}ifelse
		}{
			false exch
			{
				 AGMOHS_sepink eq or
			}forall
			not
		}ifelse
	}{
		pop false
	}ifelse
}def
/process_mask
{
	level3{
		dup begin
		/ImageType 1 def
		end
		4 dict begin
			/DataDict exch def
			/ImageType 3 def
			/InterleaveType 3 def
			/MaskDict 9 dict begin
				/ImageType 1 def
				/Width DataDict dup/MaskWidth known{/MaskWidth}{/Width}ifelse get def
				/Height DataDict dup/MaskHeight known{/MaskHeight}{/Height}ifelse get def
				/ImageMatrix[Width 0 0 Height neg 0 Height]def
				/NComponents 1 def
				/BitsPerComponent 1 def
				/Decode DataDict dup/MaskD known{/MaskD}{[1 0]}ifelse get def
				/DataSource Adobe_AGM_Core/AGMIMG_maskSource get def
			currentdict end def
		currentdict end
	}if
}def
/use_mask
{
	dup/Mask known	{dup/Mask get}{false}ifelse
}def
/imageormask
{
	begin
		AGMIMG_init_common
		SkipImageProc{
			currentdict consumeimagedata
		}
		{
			save mark
			level2 AGMCORE_host_sep not and{
				currentdict
				Operator/imagemask eq DeviceN_PS2 not and{
					imagemask
				}{
					AGMCORE_in_rip_sep currentoverprint and currentcolorspace 0 get/DeviceGray eq and{
						[/Separation/Black/DeviceGray{}]setcolorspace
						/Decode[Decode 1 get Decode 0 get]def
					}if
					use_mask{
						process_mask image
					}{
						DeviceN_NoneName DeviceN_PS2 Indexed_DeviceN level3 not and or or AGMCORE_in_rip_sep and 
						{
							Names convert_to_process not{
								2 dict begin
								/imageDict xdf
								/names_index 0 def
								gsave
								imageDict write_image_file{
									Names{
										dup(None)ne{
											[/Separation 3 -1 roll/DeviceGray{1 exch sub}]setcolorspace
											Operator imageDict read_image_file
											names_index 0 eq{true setoverprint}if
											/names_index names_index 1 add def
										}{
											pop
										}ifelse
									}forall
									close_image_file
								}if
								grestore
								end
							}{
								Operator/imagemask eq{
									imagemask
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/imagemask eq{
								imagemask
							}{
								image
							}ifelse
						}ifelse
					}ifelse
				}ifelse
			}{
				Width Height
				Operator/imagemask eq{
					Decode 0 get 1 eq Decode 1 get 0 eq	and
					ImageMatrix/DataSource load
					/Adobe_AGM_OnHost_Seps where{
						pop imagemask
					}{
						currentgray 1 ne{
							currentdict imageormask_sys
						}{
							currentoverprint not{
								1 AGMCORE_&setgray
								currentdict imageormask_sys
							}{
								currentdict ignoreimagedata
							}ifelse				 		
						}ifelse
					}ifelse
				}{
					BitsPerComponent ImageMatrix 
					MultipleDataSources{
						0 1 NComponents 1 sub{
							DataSource exch get
						}for
					}{
						/DataSource load
					}ifelse
					Operator/colorimage eq{
						AGMCORE_host_sep{
							MultipleDataSources level2 or NComponents 4 eq and{
								AGMCORE_is_cmyk_sep{
									MultipleDataSources{
										/DataSource DataSource 0 get xcheck
											{
											[
											DataSource 0 get/exec cvx
											DataSource 1 get/exec cvx
											DataSource 2 get/exec cvx
											DataSource 3 get/exec cvx
											/AGMCORE_get_ink_data cvx
											]cvx
											}{
											DataSource aload pop AGMCORE_get_ink_data
											}ifelse def
									}{
										/DataSource 
										Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
										/DataSource load
										filter_cmyk 0()/SubFileDecode filter def
									}ifelse
									/Decode[Decode 0 get Decode 1 get]def
									/MultipleDataSources false def
									/NComponents 1 def
									/Operator/image def
									invert_image_samples
						 			1 AGMCORE_&setgray
									currentdict imageormask_sys
								}{
									currentoverprint not Operator/imagemask eq and{
 			 							1 AGMCORE_&setgray
 			 							currentdict imageormask_sys
 			 						}{
 			 							currentdict ignoreimagedata
 			 						}ifelse
								}ifelse
							}{	
								MultipleDataSources NComponents AGMIMG_&colorimage						
							}ifelse
						}{
							true NComponents colorimage
						}ifelse
					}{
						Operator/image eq{
							AGMCORE_host_sep{
								/DoImage true def
								currentdict/HostSepColorImage known{HostSepColorImage not}{false}ifelse
								{
									AGMCORE_black_plate not Operator/imagemask ne and{
										/DoImage false def
										currentdict ignoreimagedata
					 				}if
								}if
						 		1 AGMCORE_&setgray
								DoImage
									{currentdict imageormask_sys}if
							}{
								use_mask{
									process_mask image
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/knockout eq{
								pop pop pop pop pop
								currentcolorspace overprint_plate not{
									knockout_unitsq
								}if
							}if
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			cleartomark restore
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/sep_imageormask
{
 	/sep_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_avoid_L2_sep_space{
			/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
		}if
 		AGMIMG_ccimage_exists 
		MappedCSA 0 get/DeviceCMYK eq and
		currentdict/Components known and 
		Name()ne and 
		Name(All)ne and 
		Operator/image eq and
		AGMCORE_producing_seps not and
		level2 not and
		{
			Width Height BitsPerComponent ImageMatrix 
			[
			/DataSource load/exec cvx
			{
				0 1 2 index length 1 sub{
					1 index exch
					2 copy get 255 xor put
				}for
			}/exec cvx
			]cvx bind
			MappedCSA 0 get/DeviceCMYK eq{
				Components aload pop
			}{
				0 0 0 Components aload pop 1 exch sub
			}ifelse
			Name findcmykcustomcolor
			customcolorimage
		}{
			AGMCORE_producing_seps not{
				level2{
 					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne AGMCORE_avoid_L2_sep_space not and currentcolorspace 0 get/Separation ne and{
						[/Separation Name MappedCSA sep_proc_name exch dup 0 get 15 string cvs(/Device)anchorsearch{pop pop 0 get}{pop}ifelse exch load]setcolorspace_opt
						/sep_tint AGMCORE_gget setcolor
					}if
					currentdict imageormask
				}{
					currentdict
					Operator/imagemask eq{
						imageormask
					}{
						sep_imageormask_lev1
					}ifelse
				}ifelse
 			}{
				AGMCORE_host_sep{
					Operator/knockout eq{
						currentdict/ImageMatrix get concat
						knockout_unitsq
					}{
						currentgray 1 ne{
 							AGMCORE_is_cmyk_sep Name(All)ne and{
 								level2{
 									Name AGMCORE_IsSeparationAProcessColor 
 									{
 										Operator/imagemask eq{
 											//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
 												/sep_tint AGMCORE_gget 1 exch sub AGMCORE_&setcolor
 											}if
 										}{
											invert_image_samples
 										}ifelse
	 								}{
	 									//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
	 										[/Separation Name[/DeviceGray]
	 										{
	 											sep_colorspace_proc AGMCORE_get_ink_data
												1 exch sub
	 										}bind
											]AGMCORE_&setcolorspace
											/sep_tint AGMCORE_gget AGMCORE_&setcolor
										}if
 									}ifelse
 									currentdict imageormask_sys
	 							}{
	 								currentdict
									Operator/imagemask eq{
										imageormask_sys
									}{
										sep_image_lev1_sep
									}ifelse
	 							}ifelse
 							}{
 								Operator/imagemask ne{
									invert_image_samples
 								}if
		 						currentdict imageormask_sys
 							}ifelse
 						}{
 							currentoverprint not Name(All)eq or Operator/imagemask eq and{
								currentdict imageormask_sys 
								}{
								currentoverprint not
									{
 									gsave 
 									knockout_unitsq
 									grestore
									}if
								currentdict consumeimagedata 
		 					}ifelse
 						}ifelse
		 			}ifelse
 				}{
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
						currentcolorspace 0 get/Separation ne{
							[/Separation Name MappedCSA sep_proc_name exch 0 get exch load]setcolorspace_opt
							/sep_tint AGMCORE_gget setcolor
						}if
					}if
					currentoverprint 
					MappedCSA 0 get/DeviceCMYK eq and 
					Name AGMCORE_IsSeparationAProcessColor not and
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{Name inRip_spot_has_ink not and}{false}ifelse 
					Name(All)ne and{
						imageormask_l2_overprint
					}{
						currentdict imageormask
 					}ifelse
				}ifelse
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
}def
/colorSpaceElemCnt
{
	mark currentcolor counttomark dup 2 add 1 roll cleartomark
}bdf
/devn_sep_datasource
{
	1 dict begin
	/dataSource xdf
	[
		0 1 dataSource length 1 sub{
			dup currentdict/dataSource get/exch cvx/get cvx/exec cvx
			/exch cvx names_index/ne cvx[/pop cvx]cvx/if cvx
		}for
	]cvx bind
	end
}bdf		
/devn_alt_datasource
{
	11 dict begin
	/convProc xdf
	/origcolorSpaceElemCnt xdf
	/origMultipleDataSources xdf
	/origBitsPerComponent xdf
	/origDecode xdf
	/origDataSource xdf
	/dsCnt origMultipleDataSources{origDataSource length}{1}ifelse def
	/DataSource origMultipleDataSources
		{
			[
			BitsPerComponent 8 idiv origDecode length 2 idiv mul string
			0 1 origDecode length 2 idiv 1 sub
				{
				dup 7 mul 1 add index exch dup BitsPerComponent 8 idiv mul exch
				origDataSource exch get 0()/SubFileDecode filter
				BitsPerComponent 8 idiv string/readstring cvx/pop cvx/putinterval cvx
				}for 
			]bind cvx
		}{origDataSource}ifelse 0()/SubFileDecode filter def		
	[
		origcolorSpaceElemCnt string
		0 2 origDecode length 2 sub
			{
			dup origDecode exch get dup 3 -1 roll 1 add origDecode exch get exch sub 2 BitsPerComponent exp 1 sub div
			1 BitsPerComponent 8 idiv{DataSource/read cvx/not cvx{0}/if cvx/mul cvx}repeat/mul cvx/add cvx
			}for
		/convProc load/exec cvx
		origcolorSpaceElemCnt 1 sub -1 0
			{
			/dup cvx 2/add cvx/index cvx
			3 1/roll cvx/exch cvx 255/mul cvx/cvi cvx/put cvx
			}for
	]bind cvx 0()/SubFileDecode filter
	end
}bdf
/devn_imageormask
{
 	/devicen_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	2 dict begin
	dup
	/srcDataStrs[3 -1 roll begin
		AGMIMG_init_common
		currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
		{
			Width Decode length 2 div mul cvi
			{
				dup 65535 gt{1 add 2 div cvi}{exit}ifelse
			}loop
			string
		}repeat
		end]def
	/dstDataStr srcDataStrs 0 get length string def
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_producing_seps not{
			level3 not{
				Operator/imagemask ne{
					/DataSource[[
						DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
						colorSpaceElemCnt/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
						devn_alt_datasource 1/string cvx/readstring cvx/pop cvx]cvx colorSpaceElemCnt 1 sub{dup}repeat]def				
					/MultipleDataSources true def
					/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				}if
			}if
			currentdict imageormask
 		}{
			AGMCORE_host_sep{
				Names convert_to_process{
					CSA get_csa_by_name 0 get/DeviceCMYK eq{
						/DataSource
							Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
							DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
							4/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
							devn_alt_datasource
						filter_cmyk 0()/SubFileDecode filter def
						/MultipleDataSources false def
						/Decode[1 0]def
						/DeviceGray setcolorspace
			 			currentdict imageormask_sys
 					}{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate{
							/DataSource
								DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
								CSA get_csa_by_name 0 get/DeviceRGB eq{3}{1}ifelse/devicen_colorspace_dict AGMCORE_gget/TintTransform get
								devn_alt_datasource
							/MultipleDataSources false def
							/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				 			currentdict imageormask_sys
				 		}{
	 						gsave 
	 						knockout_unitsq
	 						grestore
							currentdict consumeimagedata 
						}ifelse
 					}ifelse
				}
				{	
					/devicen_colorspace_dict AGMCORE_gget/names_index known{
	 					Operator/imagemask ne{
	 						MultipleDataSources{
		 						/DataSource[DataSource devn_sep_datasource/exec cvx]cvx def
								/MultipleDataSources false def
	 						}{
								/DataSource/DataSource load dstDataStr srcDataStrs 0 get filter_devn def
	 						}ifelse
							invert_image_samples
	 					}if
			 			currentdict imageormask_sys
	 				}{
	 					currentoverprint not Operator/imagemask eq and{
							currentdict imageormask_sys 
							}{
							currentoverprint not
								{
	 							gsave 
	 							knockout_unitsq
	 							grestore
								}if
							currentdict consumeimagedata 
			 			}ifelse
	 				}ifelse
	 			}ifelse
 			}{
				currentdict imageormask
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
	end
}def
/imageormask_l2_overprint
{
	currentdict
	currentcmykcolor add add add 0 eq{
		currentdict consumeimagedata
	}{
		level3{			
			currentcmykcolor 
			/AGMIMG_k xdf 
			/AGMIMG_y xdf 
			/AGMIMG_m xdf 
			/AGMIMG_c xdf
			Operator/imagemask eq{
				[/DeviceN[
				AGMIMG_c 0 ne{/Cyan}if
				AGMIMG_m 0 ne{/Magenta}if
				AGMIMG_y 0 ne{/Yellow}if
				AGMIMG_k 0 ne{/Black}if
				]/DeviceCMYK{}]setcolorspace
				AGMIMG_c 0 ne{AGMIMG_c}if
				AGMIMG_m 0 ne{AGMIMG_m}if
				AGMIMG_y 0 ne{AGMIMG_y}if
				AGMIMG_k 0 ne{AGMIMG_k}if
				setcolor			
			}{	
				/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
				[/Indexed 				
					[
						/DeviceN[
							AGMIMG_c 0 ne{/Cyan}if
							AGMIMG_m 0 ne{/Magenta}if
							AGMIMG_y 0 ne{/Yellow}if
							AGMIMG_k 0 ne{/Black}if
						]
						/DeviceCMYK{
							AGMIMG_k 0 eq{0}if
							AGMIMG_y 0 eq{0 exch}if
							AGMIMG_m 0 eq{0 3 1 roll}if
							AGMIMG_c 0 eq{0 4 1 roll}if						
						}
					]
					255
					{
						255 div 
						mark exch
						dup	dup dup
						AGMIMG_k 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 1 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_y 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 2 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_m 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 3 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_c 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						counttomark 1 add -1 roll pop
					}
				]setcolorspace
			}ifelse
			imageormask_sys
		}{
	write_image_file{
		currentcmykcolor
		0 ne{
			[/Separation/Black/DeviceGray{}]setcolorspace
			gsave
			/Black
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 1 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Yellow/DeviceGray{}]setcolorspace
			gsave
			/Yellow
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 2 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Magenta/DeviceGray{}]setcolorspace
			gsave
			/Magenta
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 3 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Cyan/DeviceGray{}]setcolorspace
			gsave
			/Cyan 
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
				close_image_file
			}{
				imageormask
			}ifelse
		}ifelse
	}ifelse
}def
/indexed_imageormask
{
	begin
		AGMIMG_init_common
		save mark 
 		currentdict
 		AGMCORE_host_sep{
			Operator/knockout eq{
				/indexed_colorspace_dict AGMCORE_gget dup/CSA known{
					/CSA get get_csa_by_name
				}{
					/Names get
				}ifelse
				overprint_plate not{
					knockout_unitsq
				}if
			}{
				Indexed_DeviceN{
					/devicen_colorspace_dict AGMCORE_gget dup/names_index known exch/Names get convert_to_process or{
			 			indexed_image_lev2_sep
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}{
		 			AGMCORE_is_cmyk_sep{
						Operator/imagemask eq{
							imageormask_sys
						}{
							level2{
								indexed_image_lev2_sep
							}{
								indexed_image_lev1_sep
							}ifelse
						}ifelse
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}ifelse
			}ifelse
 		}{
			level2{
				Indexed_DeviceN{
					/indexed_colorspace_dict AGMCORE_gget begin
				}{
					/indexed_colorspace_dict AGMCORE_gget dup null ne
					{
						begin
						currentdict/CSDBase known{CSDBase/CSD get_res/MappedCSA get}{CSA}ifelse
						get_csa_by_name 0 get/DeviceCMYK eq ps_level 3 ge and ps_version 3015.007 lt and
						AGMCORE_in_rip_sep and{
							[/Indexed[/DeviceN[/Cyan/Magenta/Yellow/Black]/DeviceCMYK{}]HiVal Lookup]
							setcolorspace
						}if
						end
					}
					{pop}ifelse
				}ifelse
				imageormask
				Indexed_DeviceN{
					end
				}if
			}{
				Operator/imagemask eq{
					imageormask
				}{
					indexed_imageormask_lev1
				}ifelse
			}ifelse
 		}ifelse
		cleartomark restore
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/indexed_image_lev2_sep
{
	/indexed_colorspace_dict AGMCORE_gget begin
	begin
		Indexed_DeviceN not{
			currentcolorspace 
			dup 1/DeviceGray put
			dup 3
			currentcolorspace 2 get 1 add string
			0 1 2 3 AGMCORE_get_ink_data 4 currentcolorspace 3 get length 1 sub
			{
			dup 4 idiv exch currentcolorspace 3 get exch get 255 exch sub 2 index 3 1 roll put
			}for 
			put	setcolorspace
		}if
		currentdict 
		Operator/imagemask eq{
			AGMIMG_&imagemask
		}{
			use_mask{
				process_mask AGMIMG_&image
			}{
				AGMIMG_&image
			}ifelse
		}ifelse
	end end
}def
 /OPIimage
 {
 	dup type/dicttype ne{
 		10 dict begin
 			/DataSource xdf
 			/ImageMatrix xdf
 			/BitsPerComponent xdf
 			/Height xdf
 			/Width xdf
 			/ImageType 1 def
 			/Decode[0 1 def]
 			currentdict
 		end
 	}if
 	dup begin
 		/NComponents 1 cdndf
 		/MultipleDataSources false cdndf
 		/SkipImageProc{false}cdndf
 		/Decode[
 				0 
 				currentcolorspace 0 get/Indexed eq{
 					2 BitsPerComponent exp 1 sub
 				}{
 					1
 				}ifelse
 		]cdndf
 		/Operator/image cdndf
 	end
 	/sep_colorspace_dict AGMCORE_gget null eq{
 		imageormask
 	}{
 		gsave
 		dup begin invert_image_samples end
 		sep_imageormask
 		grestore
 	}ifelse
 }def
/cachemask_level2
{
	3 dict begin
	/LZWEncode filter/WriteFilter xdf
	/readBuffer 256 string def
	/ReadFilter
		currentfile
		0(%EndMask)/SubFileDecode filter
		/ASCII85Decode filter
		/RunLengthDecode filter
	def
	{
		ReadFilter readBuffer readstring exch
		WriteFilter exch writestring
		not{exit}if
	}loop
	WriteFilter closefile
	end
}def
/spot_alias
{
	/mapto_sep_imageormask 
	{
		dup type/dicttype ne{
			12 dict begin
				/ImageType 1 def
				/DataSource xdf
				/ImageMatrix xdf
				/BitsPerComponent xdf
				/Height xdf
				/Width xdf
				/MultipleDataSources false def
		}{
			begin
		}ifelse
				/Decode[/customcolor_tint AGMCORE_gget 0]def
				/Operator/image def
				/SkipImageProc{false}def
				currentdict 
			end
		sep_imageormask
	}bdf
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_colorAry xddf
		/customcolor_tint AGMCORE_gget
		<<
			/Name AGMIMG_colorAry 4 get
			/CSA[/DeviceCMYK]
			/TintMethod/Subtractive
			/TintProc null
			/MappedCSA null
			/NComponents 4 
			/Components[AGMIMG_colorAry aload pop pop]
		>>
		setsepcolorspace
		mapto_sep_imageormask
	}ndf
	Adobe_AGM_Image/AGMIMG_&customcolorimage/customcolorimage load put
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_override false put
		current_spot_alias{dup 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/customcolor_tint AGMCORE_gget exch setsepcolorspace
			pop
			mapto_sep_imageormask
			true set_spot_alias
		}{
			//Adobe_AGM_Image/AGMIMG_&customcolorimage get exec
		}ifelse			
	}bdf
}def
/snap_to_device
{
	6 dict begin
	matrix currentmatrix
	dup 0 get 0 eq 1 index 3 get 0 eq and
	1 index 1 get 0 eq 2 index 2 get 0 eq and or exch pop
	{
		1 1 dtransform 0 gt exch 0 gt/AGMIMG_xSign? exch def/AGMIMG_ySign? exch def
		0 0 transform
		AGMIMG_ySign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		AGMIMG_xSign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		itransform/AGMIMG_llY exch def/AGMIMG_llX exch def
		1 1 transform
		AGMIMG_ySign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		AGMIMG_xSign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		itransform/AGMIMG_urY exch def/AGMIMG_urX exch def			
		[AGMIMG_urX AGMIMG_llX sub 0 0 AGMIMG_urY AGMIMG_llY sub AGMIMG_llX AGMIMG_llY]concat
	}{
	}ifelse
	end
}def
level2 not{
	/colorbuf
	{
		0 1 2 index length 1 sub{
			dup 2 index exch get 
			255 exch sub 
			2 index 
			3 1 roll 
			put
		}for
	}def
	/tint_image_to_color
	{
		begin
			Width Height BitsPerComponent ImageMatrix 
			/DataSource load
		end
		Adobe_AGM_Image begin
			/AGMIMG_mbuf 0 string def
			/AGMIMG_ybuf 0 string def
			/AGMIMG_kbuf 0 string def
			{
				colorbuf dup length AGMIMG_mbuf length ne
					{
					dup length dup dup
					/AGMIMG_mbuf exch string def
					/AGMIMG_ybuf exch string def
					/AGMIMG_kbuf exch string def
					}if
				dup AGMIMG_mbuf copy AGMIMG_ybuf copy AGMIMG_kbuf copy pop
			}
			addprocs
			{AGMIMG_mbuf}{AGMIMG_ybuf}{AGMIMG_kbuf}true 4 colorimage	
		end
	}def			
	/sep_imageormask_lev1
	{
		begin
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{
					255 mul round cvi GrayLookup exch get
				}currenttransfer addprocs settransfer
				currentdict imageormask
			}{
				/sep_colorspace_dict AGMCORE_gget/Components known{
					MappedCSA 0 get/DeviceCMYK eq{
						Components aload pop
					}{
						0 0 0 Components aload pop 1 exch sub
					}ifelse
					Adobe_AGM_Image/AGMIMG_k xddf 
					Adobe_AGM_Image/AGMIMG_y xddf 
					Adobe_AGM_Image/AGMIMG_m xddf 
					Adobe_AGM_Image/AGMIMG_c xddf 
					AGMIMG_y 0.0 eq AGMIMG_m 0.0 eq and AGMIMG_c 0.0 eq and{
						{AGMIMG_k mul 1 exch sub}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						currentcolortransfer
						{AGMIMG_k mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_y mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_m mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_c mul 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer
						currentdict tint_image_to_color
					}ifelse
				}{
					MappedCSA 0 get/DeviceGray eq{
						{255 mul round cvi ColorLookup exch get 0 get}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						MappedCSA 0 get/DeviceCMYK eq{
							currentcolortransfer
							{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}{
							currentcolortransfer
							{pop 1}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}ifelse
					}ifelse
				}ifelse
			}ifelse
		end
	}def
	/sep_image_lev1_sep
	{
		begin
			/sep_colorspace_dict AGMCORE_gget/Components known{
				Components aload pop
				Adobe_AGM_Image/AGMIMG_k xddf 
				Adobe_AGM_Image/AGMIMG_y xddf 
				Adobe_AGM_Image/AGMIMG_m xddf 
				Adobe_AGM_Image/AGMIMG_c xddf 
				{AGMIMG_c mul 1 exch sub}
				{AGMIMG_m mul 1 exch sub}
				{AGMIMG_y mul 1 exch sub}
				{AGMIMG_k mul 1 exch sub}
			}{
				{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}
			}ifelse
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end
	}def
	/indexed_imageormask_lev1
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			currentdict
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{HiVal mul round cvi GrayLookup exch get HiVal div}currenttransfer addprocs settransfer
				imageormask
			}{
				MappedCSA 0 get/DeviceGray eq{
					{HiVal mul round cvi Lookup exch get HiVal div}currenttransfer addprocs settransfer
					imageormask
				}{
					MappedCSA 0 get/DeviceCMYK eq{
						currentcolortransfer
						{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}{
						currentcolortransfer
						{pop 1}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 2 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 1 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 		Lookup exch get HiVal div}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}ifelse
				}ifelse
			}ifelse
		end end
	}def
	/indexed_image_lev1_sep
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end end
	}def
}if
end
systemdict/setpacking known
{setpacking}if
%%EndResource
currentdict Adobe_AGM_Utils eq {end} if
%%EndProlog
%%BeginSetup
Adobe_AGM_Utils begin
2 2010 Adobe_AGM_Core/ds gx
Adobe_CoolType_Core/ds get exec
Adobe_AGM_Image/ds gx
currentdict Adobe_AGM_Utils eq {end} if
%%EndSetup
%%Page: 1 1
%%EndPageComments
%%BeginPageSetup
%ADOBeginClientInjection: PageSetup Start "AI11EPS"
%AI12_RMC_Transparency: Balance=75 RasterRes=300 GradRes=150 Text=0 Stroke=1 Clip=1 OP=0
%ADOEndClientInjection: PageSetup Start "AI11EPS"
Adobe_AGM_Utils begin
Adobe_AGM_Core/ps gx
Adobe_AGM_Utils/capture_cpd gx
Adobe_CoolType_Core/ps get exec
Adobe_AGM_Image/ps gx
%ADOBeginClientInjection: PageSetup End "AI11EPS"
/currentdistillerparams where{pop currentdistillerparams /CoreDistVersion get 5000 lt} {true} ifelse{ userdict /AI11_PDFMark5 /cleartomark load putuserdict /AI11_ReadMetadata_PDFMark5 {flushfile cleartomark } bind put}{ userdict /AI11_PDFMark5 /pdfmark load putuserdict /AI11_ReadMetadata_PDFMark5 {/PUT pdfmark} bind put } ifelse[/NamespacePush AI11_PDFMark5[/_objdef {ai_metadata_stream_123} /type /stream /OBJ AI11_PDFMark5[{ai_metadata_stream_123}currentfile 0 (%  &&end XMP packet marker&&)/SubFileDecode filter AI11_ReadMetadata_PDFMark5<?xpacket begin="﻿" id="W5M0MpCehiHzreSzNTczkc9d"?>
<x:xmpmeta xmlns:x="adobe:ns:meta/" x:xmptk="Adobe XMP Core 5.6-c067 79.157747, 2015/03/30-23:40:42        ">
   <rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
      <rdf:Description rdf:about=""
            xmlns:dc="http://purl.org/dc/elements/1.1/"
            xmlns:xmp="http://ns.adobe.com/xap/1.0/"
            xmlns:xmpGImg="http://ns.adobe.com/xap/1.0/g/img/"
            xmlns:xmpMM="http://ns.adobe.com/xap/1.0/mm/"
            xmlns:stRef="http://ns.adobe.com/xap/1.0/sType/ResourceRef#"
            xmlns:stEvt="http://ns.adobe.com/xap/1.0/sType/ResourceEvent#"
            xmlns:illustrator="http://ns.adobe.com/illustrator/1.0/"
            xmlns:xmpTPg="http://ns.adobe.com/xap/1.0/t/pg/"
            xmlns:stDim="http://ns.adobe.com/xap/1.0/sType/Dimensions#"
            xmlns:xmpG="http://ns.adobe.com/xap/1.0/g/"
            xmlns:pdf="http://ns.adobe.com/pdf/1.3/">
         <dc:format>application/postscript</dc:format>
         <dc:title>
            <rdf:Alt>
               <rdf:li xml:lang="x-default">Print</rdf:li>
            </rdf:Alt>
         </dc:title>
         <xmp:MetadataDate>2015-12-20T00:24:23+02:00</xmp:MetadataDate>
         <xmp:ModifyDate>2015-12-20T00:24:23+02:00</xmp:ModifyDate>
         <xmp:CreateDate>2015-12-20T00:24:22+02:00</xmp:CreateDate>
         <xmp:CreatorTool>Adobe Illustrator CC 2015 (Windows)</xmp:CreatorTool>
         <xmp:Thumbnails>
            <rdf:Alt>
               <rdf:li rdf:parseType="Resource">
                  <xmpGImg:width>256</xmpGImg:width>
                  <xmpGImg:height>240</xmpGImg:height>
                  <xmpGImg:format>JPEG</xmpGImg:format>
                  <xmpGImg:image>/9j/4AAQSkZJRgABAgEC0ALQAAD/7QAsUGhvdG9zaG9wIDMuMAA4QklNA+0AAAAAABAC0AAAAAEA&#xA;AQLQAAAAAQAB/+4ADkFkb2JlAGTAAAAAAf/bAIQABgQEBAUEBgUFBgkGBQYJCwgGBggLDAoKCwoK&#xA;DBAMDAwMDAwQDA4PEA8ODBMTFBQTExwbGxscHx8fHx8fHx8fHwEHBwcNDA0YEBAYGhURFRofHx8f&#xA;Hx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8f/8AAEQgA8AEAAwER&#xA;AAIRAQMRAf/EAaIAAAAHAQEBAQEAAAAAAAAAAAQFAwIGAQAHCAkKCwEAAgIDAQEBAQEAAAAAAAAA&#xA;AQACAwQFBgcICQoLEAACAQMDAgQCBgcDBAIGAnMBAgMRBAAFIRIxQVEGE2EicYEUMpGhBxWxQiPB&#xA;UtHhMxZi8CRygvElQzRTkqKyY3PCNUQnk6OzNhdUZHTD0uIIJoMJChgZhJRFRqS0VtNVKBry4/PE&#xA;1OT0ZXWFlaW1xdXl9WZ2hpamtsbW5vY3R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo+Ck5SVlpeYmZ&#xA;qbnJ2en5KjpKWmp6ipqqusra6voRAAICAQIDBQUEBQYECAMDbQEAAhEDBCESMUEFURNhIgZxgZEy&#xA;obHwFMHR4SNCFVJicvEzJDRDghaSUyWiY7LCB3PSNeJEgxdUkwgJChgZJjZFGidkdFU38qOzwygp&#xA;0+PzhJSktMTU5PRldYWVpbXF1eX1RlZmdoaWprbG1ub2R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo&#xA;+DlJWWl5iZmpucnZ6fkqOkpaanqKmqq6ytrq+v/aAAwDAQACEQMRAD8A9Q5Jw0FqOs6TpqqdQvIb&#xA;QP8AY9Z1QtTrQE75CeSMeZpyMGly5foiZV3BWtLy0vIFuLSeO4gf7MsTB1NPArUZKMgRYa8mKWOX&#xA;DIGJ7ir4Wt2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2&#xA;KuxV2KvH9Zs7DVfzblsNeZvqbhY7dORQGsIMahh05MT0/azUZIiWoqfJ7nS5Z4ezBPD9XM/6bf7P&#xA;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</xmpGImg:image>
               </rdf:li>
            </rdf:Alt>
         </xmp:Thumbnails>
         <xmpMM:InstanceID>xmp.iid:b3e7c769-490a-4b40-94ca-3093d47436cf</xmpMM:InstanceID>
         <xmpMM:DocumentID>xmp.did:b3e7c769-490a-4b40-94ca-3093d47436cf</xmpMM:DocumentID>
         <xmpMM:OriginalDocumentID>uuid:5D20892493BFDB11914A8590D31508C8</xmpMM:OriginalDocumentID>
         <xmpMM:RenditionClass>proof:pdf</xmpMM:RenditionClass>
         <xmpMM:DerivedFrom rdf:parseType="Resource">
            <stRef:instanceID>xmp.iid:1D48DA7C49A6E511B84AF55B6EE8FE35</stRef:instanceID>
            <stRef:documentID>xmp.did:1D48DA7C49A6E511B84AF55B6EE8FE35</stRef:documentID>
            <stRef:originalDocumentID>uuid:5D20892493BFDB11914A8590D31508C8</stRef:originalDocumentID>
            <stRef:renditionClass>proof:pdf</stRef:renditionClass>
         </xmpMM:DerivedFrom>
         <xmpMM:History>
            <rdf:Seq>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:99FAD8AB1AA3E511A0319212236B289E</stEvt:instanceID>
                  <stEvt:when>2015-12-15T13:32:37+02:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CS6 (Windows)</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:1D48DA7C49A6E511B84AF55B6EE8FE35</stEvt:instanceID>
                  <stEvt:when>2015-12-19T17:02:55+02:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CS6 (Windows)</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>converted</stEvt:action>
                  <stEvt:parameters>from application/postscript to application/vnd.adobe.illustrator</stEvt:parameters>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:b3e7c769-490a-4b40-94ca-3093d47436cf</stEvt:instanceID>
                  <stEvt:when>2015-12-20T00:24:23+02:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CC 2015 (Windows)</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
            </rdf:Seq>
         </xmpMM:History>
         <illustrator:StartupProfile>Print</illustrator:StartupProfile>
         <xmpTPg:HasVisibleOverprint>False</xmpTPg:HasVisibleOverprint>
         <xmpTPg:HasVisibleTransparency>True</xmpTPg:HasVisibleTransparency>
         <xmpTPg:NPages>1</xmpTPg:NPages>
         <xmpTPg:MaxPageSize rdf:parseType="Resource">
            <stDim:w>450.000000</stDim:w>
            <stDim:h>420.000000</stDim:h>
            <stDim:unit>Pixels</stDim:unit>
         </xmpTPg:MaxPageSize>
         <xmpTPg:PlateNames>
            <rdf:Seq>
               <rdf:li>Cyan</rdf:li>
               <rdf:li>Magenta</rdf:li>
               <rdf:li>Yellow</rdf:li>
               <rdf:li>Black</rdf:li>
            </rdf:Seq>
         </xmpTPg:PlateNames>
         <xmpTPg:SwatchGroups>
            <rdf:Seq>
               <rdf:li rdf:parseType="Resource">
                  <xmpG:groupName>Default Swatch Group</xmpG:groupName>
                  <xmpG:groupType>0</xmpG:groupType>
                  <xmpG:Colorants>
                     <rdf:Seq>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>White</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>255</xmpG:red>
                           <xmpG:green>255</xmpG:green>
                           <xmpG:blue>255</xmpG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>Black</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>35</xmpG:red>
                           <xmpG:green>31</xmpG:green>
                           <xmpG:blue>32</xmpG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>C=0 M=0 Y=0 K=100</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>35</xmpG:red>
                           <xmpG:green>31</xmpG:green>
                           <xmpG:blue>32</xmpG:blue>
                        </rdf:li>
                     </rdf:Seq>
                  </xmpG:Colorants>
               </rdf:li>
            </rdf:Seq>
         </xmpTPg:SwatchGroups>
         <pdf:Producer>Adobe PDF library 10.01</pdf:Producer>
      </rdf:Description>
   </rdf:RDF>
</x:xmpmeta>
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                           
<?xpacket end="w"?>%  &&end XMP packet marker&&[{ai_metadata_stream_123}<</Type /Metadata /Subtype /XML>>/PUT AI11_PDFMark5[/Document1 dict begin /Metadata {ai_metadata_stream_123} defcurrentdict end /BDC AI11_PDFMark5
%ADOEndClientInjection: PageSetup End "AI11EPS"
%%EndPageSetup
1 -1 scale 0 -420 translate
pgsv
[1 0 0 1 0 0 ]ct
gsave
np
gsave
0 0 mo
0 420 li
450.021 420 li
450.021 0 li
cp
clp
450.021 420 mo
.0205037 420 li
.0205037 0 li
450.021 0 li
450.021 420 li
false sop
/0 
[/DeviceRGB] /CSA add_res
1 1 1 rgb
f
292.985 282.335 mo
234.167 282.335 li
234.167 242.431 li
292.985 242.431 li
292.985 282.335 li
.898039 .298039 .235294 rgb
f
277.408 257.962 mo
267.997 257.962 li
267.997 248.552 li
259.155 248.552 li
259.155 257.962 li
249.745 257.962 li
249.745 266.804 li
259.155 266.804 li
259.155 276.214 li
267.997 276.214 li
267.997 266.804 li
277.408 266.804 li
277.408 257.962 li
1 1 1 rgb
f
237.167 273.039 mo
237.167 245.431 li
271.579 245.431 li
269.376 246.375 267.216 247.416 265.104 248.552 cv
259.155 248.552 li
259.155 252.081 li
256.395 253.88 253.74 255.844 251.208 257.962 cv
249.745 257.962 li
249.745 259.215 li
245.065 263.317 240.833 267.955 237.167 273.039 cv
.917647 .439216 .388235 rgb
f
249.745 259.215 mo
249.745 257.962 li
251.208 257.962 li
250.715 258.374 250.228 258.791 249.745 259.215 cv
259.155 252.081 mo
259.155 248.552 li
265.104 248.552 li
263.074 249.643 261.088 250.822 259.155 252.081 cv
1 1 1 rgb
f
144.949 283.554 mo
144.922 283.676 li
144.877 283.887 144.822 284.098 144.743 284.308 cv
144.718 306.681 li
144.761 306.566 144.799 306.452 144.833 306.339 cv
144.86 306.24 144.877 306.143 144.898 306.046 cv
144.924 305.927 li
144.957 305.746 144.981 305.565 144.987 305.383 cv
144.99 305.241 li
145.015 282.869 li
145.015 283.098 144.99 283.326 144.949 283.554 cv
cp
.941176 .568627 .113725 rgb
f
88.771 306.681 mo
88.7954 284.308 li
144.743 284.308 li
144.718 306.681 li
88.771 306.681 li
cp
1 .913725 .537255 rgb
f
144.743 284.308 mo
88.7954 284.308 li
124.139 271.394 li
132.165 273.103 138.51 275.402 142.052 278.155 cv
144.685 280.202 145.504 282.292 144.743 284.308 cv
cp
.941176 .568627 .113725 rgb
f
99.5454 288.685 mo
99.5454 290.292 98.2436 291.594 96.6372 291.594 cv
95.0308 291.594 93.729 290.292 93.729 288.685 cv
93.729 287.08 95.0308 285.777 96.6372 285.777 cv
98.2436 285.777 99.5454 287.08 99.5454 288.685 cv
cp
.94902 .729412 .262745 rgb
f
140.492 302.296 mo
140.492 303.902 139.19 305.204 137.584 305.204 cv
135.978 305.204 134.675 303.902 134.675 302.296 cv
134.675 300.69 135.978 299.388 137.584 299.388 cv
139.19 299.388 140.492 300.69 140.492 302.296 cv
cp
f
106.641 298.341 mo
106.641 300.525 104.87 302.296 102.686 302.296 cv
100.502 302.296 98.7309 300.525 98.7309 298.341 cv
98.7309 296.157 100.502 294.387 102.686 294.387 cv
104.87 294.387 106.641 296.157 106.641 298.341 cv
cp
.972549 .631373 .235294 rgb
f
144.74 286.957 mo
144.177 286.647 143.541 286.458 142.854 286.458 cv
140.67 286.458 138.899 288.228 138.899 290.411 cv
138.899 292.598 140.67 294.367 142.854 294.367 cv
143.538 294.367 144.171 294.178 144.732 293.873 cv
144.74 286.957 li
cp
f
121.879 295.678 mo
121.879 297.349 120.525 298.703 118.855 298.703 cv
117.185 298.703 115.831 297.349 115.831 295.678 cv
115.831 294.007 117.185 292.653 118.855 292.653 cv
120.525 292.653 121.879 294.007 121.879 295.678 cv
cp
.968627 .737255 .203922 rgb
f
111.236 290.411 mo
111.236 291.216 110.585 291.867 109.782 291.867 cv
108.979 291.867 108.328 291.216 108.328 290.411 cv
108.328 289.609 108.979 288.959 109.782 288.959 cv
110.585 288.959 111.236 289.609 111.236 290.411 cv
cp
.94902 .729412 .262745 rgb
f
130.371 303.343 mo
130.371 304.146 129.72 304.798 128.917 304.798 cv
128.113 304.798 127.462 304.146 127.462 303.343 cv
127.462 302.539 128.113 301.889 128.917 301.889 cv
129.72 301.889 130.371 302.539 130.371 303.343 cv
cp
f
132.93 288.685 mo
132.93 289.795 132.032 290.692 130.923 290.692 cv
129.815 290.692 128.917 289.795 128.917 288.685 cv
128.917 287.578 129.815 286.68 130.923 286.68 cv
132.032 286.68 132.93 287.578 132.93 288.685 cv
cp
f
89.7876 299.388 mo
89.4175 299.388 89.0747 299.495 88.7768 299.671 cv
88.7734 303.116 li
89.0718 303.293 89.416 303.401 89.7876 303.401 cv
90.896 303.401 91.7944 302.503 91.7944 301.395 cv
91.7944 300.286 90.896 299.388 89.7876 299.388 cv
cp
f
123.555 277.289 mo
123.555 277.599 122.739 277.852 121.73 277.852 cv
120.723 277.852 119.905 277.599 119.905 277.289 cv
119.905 276.978 120.723 276.727 121.73 276.727 cv
122.739 276.727 123.555 276.978 123.555 277.289 cv
cp
.858824 .517647 .101961 rgb
f
116.149 282.034 mo
116.149 282.344 115.333 282.596 114.324 282.596 cv
113.316 282.596 112.5 282.344 112.5 282.034 cv
112.5 281.724 113.316 281.472 114.324 281.472 cv
115.333 281.472 116.149 281.724 116.149 282.034 cv
cp
f
132.749 274.784 mo
132.749 275.094 131.932 275.345 130.923 275.345 cv
129.916 275.345 129.099 275.094 129.099 274.784 cv
129.099 274.473 129.916 274.222 130.923 274.222 cv
131.932 274.222 132.749 274.473 132.749 274.784 cv
cp
f
125.154 274.228 mo
125.154 274.385 124.746 274.511 124.242 274.511 cv
123.738 274.511 123.329 274.385 123.329 274.228 cv
123.329 274.074 123.738 273.948 124.242 273.948 cv
124.746 273.948 125.154 274.074 125.154 274.228 cv
cp
f
116.743 276.445 mo
116.743 276.602 116.335 276.727 115.83 276.727 cv
115.327 276.727 114.918 276.602 114.918 276.445 cv
114.918 276.291 115.327 276.166 115.83 276.166 cv
116.335 276.166 116.743 276.291 116.743 276.445 cv
cp
f
130.293 281.323 mo
130.293 281.805 129.026 282.195 127.462 282.195 cv
125.899 282.195 124.633 281.805 124.633 281.323 cv
124.633 280.841 125.899 280.451 127.462 280.451 cv
129.026 280.451 130.293 280.841 130.293 281.323 cv
cp
f
105.842 281.472 mo
105.842 281.908 104.691 282.263 103.272 282.263 cv
101.853 282.263 100.703 281.908 100.703 281.472 cv
100.703 281.035 101.853 280.681 103.272 280.681 cv
104.691 280.681 105.842 281.035 105.842 281.472 cv
cp
f
141.469 280.451 mo
141.469 280.889 140.318 281.242 138.899 281.242 cv
137.48 281.242 136.33 280.889 136.33 280.451 cv
136.33 280.015 137.48 279.659 138.899 279.659 cv
140.318 279.659 141.469 280.015 141.469 280.451 cv
cp
f
356.476 191.825 mo
352.407 191.27 349.971 188.404 349.175 185.073 cv
349.009 184.752 348.861 184.426 348.732 184.089 cv
348.063 184.23 347.366 184.278 346.653 184.218 cv
345.049 184.078 343.647 183.767 342.143 183.323 cv
342.096 183.311 li
341.784 183.311 341.475 183.335 341.163 183.356 cv
340.771 183.463 339.065 183.77 338.817 183.824 cv
338.018 183.997 337.223 184.162 336.418 184.308 cv
334.979 184.569 333.547 184.541 332.19 184.286 cv
329.497 186.534 326.525 187.813 323.684 189.756 cv
323.271 190.961 322.855 192.148 322.305 193.324 cv
319.49 199.345 314.413 203.55 309.99 208.329 cv
309.699 208.645 309.4 208.926 309.096 209.186 cv
319.951 232.104 li
380.887 232.104 li
356.476 191.825 li
cp
.501961 .619608 .243137 rgb
f
305.96 202.567 mo
309.561 210.17 li
312.735 211.004 li
331.793 182.639 li
305.96 202.567 li
cp
.623529 .756863 .286275 rgb
f
341.487 173.033 mo
330.792 183.415 li
326.987 189.793 li
336.41 185.947 li
343.424 192.776 li
343.727 192.359 li
341.987 173.83 li
341.487 173.033 li
cp
.94902 .94902 .94902 rgb
f
356.016 191.064 mo
352.773 186.379 li
348.701 185.537 li
361.933 214.691 li
367.164 232.104 li
380.887 232.104 li
356.016 191.064 li
cp
.454902 .560784 .219608 rgb
f
294.04 216.145 mo
294.697 205.344 li
297.648 196.491 li
295.438 197.429 li
271.451 232.104 li
289.92 232.104 li
295.924 220.284 li
294.04 216.145 li
cp
.329412 .329412 .329412 rgb
f
340.47 232.104 mo
322.715 214.352 li
310.624 207.543 li
307.586 201.036 li
306.807 200.778 306.111 200.418 305.485 199.986 cv
302.146 199.973 299.736 198.52 298.256 196.432 cv
297.648 196.491 li
294.697 205.344 li
294.04 216.145 li
295.924 220.284 li
289.92 232.104 li
340.47 232.104 li
cp
.2 .2 .2 rgb
f
358.873 218.724 mo
352.773 217.487 li
342.861 213.511 li
329.036 220.672 li
336.954 232.104 li
377.785 232.104 li
358.873 218.724 li
cp
.623529 .756863 .286275 rgb
f
313.939 223.398 mo
305.96 223.398 li
292.591 226.194 li
289.268 220.284 li
273.924 228.95 li
271.451 232.104 li
315.848 232.104 li
313.939 223.398 li
cp
.623529 .756863 .282353 rgb
f
324.753 226.194 mo
330.375 222.993 li
332.972 216.766 li
318.744 223.398 li
305.96 232.104 li
325.135 232.104 li
325.826 229.001 li
324.753 226.194 li
cp
.631373 .364706 .207843 rgb
f
347.931 223.398 mo
334.251 214.691 li
332.972 216.766 li
330.375 222.993 li
324.753 226.194 li
325.826 229.001 li
325.135 232.104 li
356.638 232.104 li
347.931 223.398 li
cp
.337255 .196078 .109804 rgb
f
328.987 218.993 mo
331.298 218.839 li
332.972 216.766 li
335.629 220.284 li
335.629 218.058 li
340.698 218.794 li
334.251 214.691 li
327.834 219.279 li
328.987 218.993 li
cp
.901961 .901961 .901961 rgb
f
301.692 188.408 mo
295.438 197.429 li
295.84 198.038 295.907 200.084 295.907 200.084 cv
295.907 200.084 297.893 200.28 297.926 200.667 cv
298.007 201.61 298.046 202.13 298.046 202.13 cv
300.568 199.875 li
302.606 201.223 li
302.759 201.118 li
301.759 188.669 li
301.692 188.408 li
cp
.94902 .94902 .94902 rgb
f
301.759 188.669 mo
302.759 201.118 li
304.453 199.954 li
306.82 202.567 li
307.695 201.255 li
301.759 188.669 li
cp
.901961 .901961 .901961 rgb
f
352.773 186.379 mo
341.987 173.83 li
343.727 192.359 li
348.701 185.537 li
352.773 186.379 li
cp
f
421.167 294.467 mo
388.864 294.467 li
388.864 242.455 li
421.167 242.455 li
421.167 294.467 li
.443137 .192157 .0431373 rgb
f
398.801 255.191 mo
397.299 253.673 li
397.299 246.518 li
398.801 245 li
398.801 255.191 li
.337255 .117647 .027451 rgb
f
391.741 255.191 mo
393.244 253.673 li
393.244 246.518 li
391.741 245 li
391.741 255.191 li
.580392 .298039 .180392 rgb
f
393.244 253.69 mo
393.244 246.502 li
397.299 246.502 li
397.299 253.69 li
393.244 253.69 li
.490196 .203922 .0901961 rgb
f
397.341 246.502 mo
393.201 246.502 li
391.741 245 li
398.801 245 li
397.341 246.502 li
.658824 .321569 .176471 rgb
f
397.341 253.69 mo
393.201 253.69 li
391.741 255.191 li
398.801 255.191 li
397.341 253.69 li
.45098 .219608 .121569 rgb
f
408.97 255.191 mo
407.468 253.673 li
407.468 246.518 li
408.97 245 li
408.97 255.191 li
.337255 .117647 .027451 rgb
f
401.91 255.191 mo
403.411 253.673 li
403.411 246.518 li
401.91 245 li
401.91 255.191 li
.580392 .298039 .180392 rgb
f
403.411 253.69 mo
403.411 246.502 li
407.468 246.502 li
407.468 253.69 li
403.411 253.69 li
.490196 .203922 .0901961 rgb
f
407.511 246.502 mo
403.369 246.502 li
401.91 245 li
408.97 245 li
407.511 246.502 li
.658824 .321569 .176471 rgb
f
407.511 253.69 mo
403.369 253.69 li
401.91 255.191 li
408.97 255.191 li
407.511 253.69 li
.45098 .219608 .121569 rgb
f
419.138 255.191 mo
417.636 253.673 li
417.636 246.518 li
419.138 245 li
419.138 255.191 li
.337255 .117647 .027451 rgb
f
412.078 255.191 mo
413.58 253.673 li
413.58 246.518 li
412.078 245 li
412.078 255.191 li
.580392 .298039 .180392 rgb
f
413.58 253.69 mo
413.58 246.502 li
417.636 246.502 li
417.636 253.69 li
413.58 253.69 li
.490196 .203922 .0901961 rgb
f
417.679 246.502 mo
413.539 246.502 li
412.078 245 li
419.138 245 li
417.679 246.502 li
.658824 .321569 .176471 rgb
f
417.679 253.689 mo
413.539 253.689 li
412.078 255.191 li
419.138 255.191 li
417.679 253.689 li
cp
.45098 .219608 .121569 rgb
f
398.801 267.306 mo
397.299 265.787 li
397.299 258.632 li
398.801 257.112 li
398.801 267.306 li
.337255 .117647 .027451 rgb
f
391.741 267.306 mo
393.244 265.787 li
393.244 258.632 li
391.741 257.112 li
391.741 267.306 li
.580392 .298039 .180392 rgb
f
393.244 265.803 mo
393.244 258.615 li
397.299 258.615 li
397.299 265.803 li
393.244 265.803 li
.490196 .203922 .0901961 rgb
f
397.341 258.615 mo
393.201 258.615 li
391.741 257.112 li
398.801 257.112 li
397.341 258.615 li
.658824 .321569 .176471 rgb
f
397.341 265.803 mo
393.201 265.803 li
391.741 267.306 li
398.801 267.306 li
397.341 265.803 li
.45098 .219608 .121569 rgb
f
388.864 274.156 mo
388.864 242.455 li
421.167 242.455 li
421.167 249.335 li
420.486 249.505 419.808 249.69 419.138 249.888 cv
419.138 245 li
412.078 245 li
412.078 252.564 li
411.022 253.057 409.986 253.586 408.97 254.149 cv
408.97 245 li
401.91 245 li
401.91 255.191 li
407.174 255.191 li
404.171 257.017 401.366 259.144 398.801 261.529 cv
398.801 257.112 li
391.741 257.112 li
391.741 267.306 li
393.46 267.306 li
391.752 269.459 390.213 271.75 388.864 274.156 cv
391.741 255.191 mo
391.741 255.191 li
398.801 255.191 li
398.801 245 li
391.741 245 li
391.741 255.191 li
407.484 253.69 mo
403.395 253.69 li
403.411 253.673 li
403.411 246.518 li
403.396 246.502 li
403.411 246.502 li
403.411 253.69 li
407.468 253.69 li
407.468 253.673 li
407.484 253.69 li
397.315 253.69 mo
393.228 253.69 li
393.244 253.673 li
393.244 246.518 li
393.229 246.502 li
393.244 246.502 li
393.244 253.69 li
397.299 253.69 li
397.299 253.673 li
397.315 253.69 li
407.468 246.518 mo
407.468 246.502 li
407.483 246.502 li
407.468 246.518 li
397.299 246.518 mo
397.299 246.502 li
397.314 246.502 li
397.299 246.518 li
.498039 .27451 .141176 rgb
f
398.801 255.191 mo
398.801 255.191 li
397.341 253.69 li
397.315 253.69 li
397.299 253.673 li
397.299 246.518 li
397.314 246.502 li
397.341 246.502 li
398.801 245 li
398.801 255.191 li
.403922 .207843 .12549 rgb
f
391.741 255.191 mo
391.741 245 li
393.201 246.502 li
393.229 246.502 li
393.244 246.518 li
393.244 253.673 li
393.228 253.69 li
393.201 253.69 li
391.741 255.191 li
.623529 .368627 .262745 rgb
f
397.299 253.69 mo
393.244 253.69 li
393.244 246.502 li
397.299 246.502 li
397.299 246.518 li
397.299 253.673 li
397.299 253.69 li
.541176 .286275 .184314 rgb
f
397.341 246.502 mo
397.314 246.502 li
397.299 246.502 li
393.244 246.502 li
393.229 246.502 li
393.201 246.502 li
391.741 245 li
398.801 245 li
397.341 246.502 li
.694118 .392157 .258824 rgb
f
398.801 255.191 mo
391.741 255.191 li
393.201 253.69 li
393.228 253.69 li
397.315 253.69 li
397.341 253.69 li
398.801 255.191 li
.505882 .298039 .211765 rgb
f
408.315 254.518 mo
407.511 253.69 li
407.484 253.69 li
407.468 253.673 li
407.468 246.518 li
407.483 246.502 li
407.511 246.502 li
408.97 245 li
408.97 254.149 li
408.751 254.27 408.532 254.393 408.315 254.518 cv
.403922 .207843 .12549 rgb
f
401.91 255.191 mo
401.91 245 li
403.369 246.502 li
403.396 246.502 li
403.411 246.518 li
403.411 253.673 li
403.395 253.69 li
403.369 253.69 li
401.91 255.191 li
.623529 .368627 .262745 rgb
f
407.468 253.69 mo
403.411 253.69 li
403.411 246.502 li
407.468 246.502 li
407.468 246.518 li
407.468 253.673 li
407.468 253.69 li
.541176 .286275 .184314 rgb
f
407.511 246.502 mo
407.483 246.502 li
407.468 246.502 li
403.411 246.502 li
403.396 246.502 li
403.369 246.502 li
401.91 245 li
408.97 245 li
407.511 246.502 li
.694118 .392157 .258824 rgb
f
394.699 265.803 mo
393.229 265.803 li
393.244 265.787 li
393.244 258.632 li
393.228 258.615 li
393.244 258.615 li
393.244 265.803 li
394.699 265.803 li
394.699 265.803 li
397.299 258.632 mo
397.299 258.615 li
397.315 258.615 li
397.299 258.632 li
413.58 251.891 mo
413.58 246.518 li
413.565 246.502 li
413.58 246.502 li
413.58 251.891 li
413.58 251.891 li
417.636 246.518 mo
417.636 246.502 li
417.651 246.502 li
417.636 246.518 li
.498039 .27451 .141176 rgb
f
407.174 255.191 mo
401.91 255.191 li
403.369 253.69 li
403.395 253.69 li
407.484 253.69 li
407.511 253.69 li
408.315 254.518 li
407.932 254.737 407.551 254.962 407.174 255.191 cv
.505882 .298039 .211765 rgb
f
417.636 250.357 mo
417.636 246.518 li
417.651 246.502 li
417.679 246.502 li
419.138 245 li
419.138 249.888 li
418.633 250.036 418.134 250.192 417.636 250.357 cv
.403922 .207843 .12549 rgb
f
412.078 252.564 mo
412.078 245 li
413.539 246.502 li
413.565 246.502 li
413.58 246.518 li
413.58 251.891 li
413.076 252.107 412.574 252.332 412.078 252.564 cv
.623529 .368627 .262745 rgb
f
413.58 251.891 mo
413.58 246.502 li
417.636 246.502 li
417.636 246.518 li
417.636 250.357 li
416.258 250.811 414.905 251.323 413.58 251.891 cv
.541176 .286275 .184314 rgb
f
417.679 246.502 mo
417.651 246.502 li
417.636 246.502 li
413.58 246.502 li
413.565 246.502 li
413.539 246.502 li
412.078 245 li
419.138 245 li
417.679 246.502 li
.694118 .392157 .258824 rgb
f
397.299 262.983 mo
397.299 258.632 li
397.315 258.615 li
397.341 258.615 li
398.801 257.112 li
398.801 261.529 li
398.291 262.003 397.789 262.489 397.299 262.983 cv
.403922 .207843 .12549 rgb
f
391.741 267.306 mo
391.741 257.112 li
393.201 258.615 li
393.228 258.615 li
393.244 258.632 li
393.244 265.787 li
393.229 265.803 li
393.201 265.803 li
391.741 267.306 li
.623529 .368627 .262745 rgb
f
394.699 265.803 mo
393.244 265.803 li
393.244 258.615 li
397.299 258.615 li
397.299 258.632 li
397.299 262.983 li
396.398 263.89 395.531 264.831 394.699 265.803 cv
.541176 .286275 .184314 rgb
f
397.341 258.615 mo
397.315 258.615 li
397.299 258.615 li
393.244 258.615 li
393.228 258.615 li
393.201 258.615 li
391.741 257.112 li
398.801 257.112 li
397.341 258.615 li
.694118 .392157 .258824 rgb
f
393.46 267.306 mo
391.741 267.306 li
393.201 265.803 li
393.229 265.803 li
394.699 265.803 li
394.276 266.296 393.864 266.796 393.46 267.306 cv
.505882 .298039 .211765 rgb
f
408.97 267.306 mo
407.468 265.787 li
407.468 258.632 li
408.97 257.112 li
408.97 267.306 li
cp
.337255 .117647 .027451 rgb
f
401.91 267.306 mo
403.411 265.787 li
403.411 258.632 li
401.91 257.112 li
401.91 267.306 li
cp
.580392 .298039 .180392 rgb
f
403.411 265.803 mo
403.411 258.615 li
407.468 258.615 li
407.468 265.803 li
403.411 265.803 li
cp
.490196 .203922 .0901961 rgb
f
407.511 258.615 mo
403.369 258.615 li
401.91 257.112 li
408.97 257.112 li
407.511 258.615 li
cp
.658824 .321569 .176471 rgb
f
407.511 265.803 mo
403.369 265.803 li
401.91 267.306 li
408.97 267.306 li
407.511 265.803 li
cp
.45098 .219608 .121569 rgb
f
419.138 267.306 mo
417.636 265.787 li
417.636 258.632 li
419.138 257.112 li
419.138 267.306 li
cp
.337255 .117647 .027451 rgb
f
412.078 267.306 mo
413.58 265.787 li
413.58 258.632 li
412.078 257.112 li
412.078 267.306 li
cp
.580392 .298039 .180392 rgb
f
413.58 265.803 mo
413.58 258.615 li
417.636 258.615 li
417.636 265.803 li
413.58 265.803 li
cp
.490196 .203922 .0901961 rgb
f
417.679 258.615 mo
413.539 258.615 li
412.078 257.112 li
419.138 257.112 li
417.679 258.615 li
cp
.658824 .321569 .176471 rgb
f
417.679 265.803 mo
413.539 265.803 li
412.078 267.306 li
419.138 267.306 li
417.679 265.803 li
cp
.45098 .219608 .121569 rgb
f
398.801 279.418 mo
397.299 277.9 li
397.299 270.744 li
398.801 269.227 li
398.801 279.418 li
cp
.337255 .117647 .027451 rgb
f
391.741 279.418 mo
393.244 277.9 li
393.244 270.744 li
391.741 269.227 li
391.741 279.418 li
cp
.580392 .298039 .180392 rgb
f
393.244 277.916 mo
393.244 270.728 li
397.299 270.728 li
397.299 277.916 li
393.244 277.916 li
cp
.490196 .203922 .0901961 rgb
f
397.341 270.728 mo
393.201 270.728 li
391.741 269.227 li
398.801 269.227 li
397.341 270.728 li
cp
.658824 .321569 .176471 rgb
f
397.341 277.916 mo
393.201 277.916 li
391.741 279.418 li
398.801 279.418 li
397.341 277.916 li
cp
.45098 .219608 .121569 rgb
f
408.97 279.418 mo
407.468 277.9 li
407.468 270.744 li
408.97 269.227 li
408.97 279.418 li
cp
.337255 .117647 .027451 rgb
f
401.91 279.418 mo
403.411 277.9 li
403.411 270.744 li
401.91 269.227 li
401.91 279.418 li
cp
.580392 .298039 .180392 rgb
f
403.411 277.916 mo
403.411 270.728 li
407.468 270.728 li
407.468 277.916 li
403.411 277.916 li
cp
.490196 .203922 .0901961 rgb
f
407.511 270.728 mo
403.369 270.728 li
401.91 269.227 li
408.97 269.227 li
407.511 270.728 li
cp
.658824 .321569 .176471 rgb
f
407.511 277.916 mo
403.369 277.916 li
401.91 279.418 li
408.97 279.418 li
407.511 277.916 li
cp
.45098 .219608 .121569 rgb
f
419.138 279.418 mo
417.636 277.9 li
417.636 270.744 li
419.138 269.227 li
419.138 279.418 li
cp
.337255 .117647 .027451 rgb
f
412.078 279.418 mo
413.58 277.9 li
413.58 270.744 li
412.078 269.227 li
412.078 279.418 li
cp
.580392 .298039 .180392 rgb
f
413.58 277.916 mo
413.58 270.728 li
417.636 270.728 li
417.636 277.916 li
413.58 277.916 li
cp
.490196 .203922 .0901961 rgb
f
417.679 270.728 mo
413.539 270.728 li
412.078 269.227 li
419.138 269.227 li
417.679 270.728 li
cp
.658824 .321569 .176471 rgb
f
417.679 277.916 mo
413.539 277.916 li
412.078 279.418 li
419.138 279.418 li
417.679 277.916 li
cp
.45098 .219608 .121569 rgb
f
398.801 291.531 mo
397.299 290.014 li
397.299 282.859 li
398.801 281.34 li
398.801 291.531 li
cp
.337255 .117647 .027451 rgb
f
391.741 291.531 mo
393.244 290.014 li
393.244 282.859 li
391.741 281.34 li
391.741 291.531 li
cp
.580392 .298039 .180392 rgb
f
393.244 290.029 mo
393.244 282.842 li
397.299 282.842 li
397.299 290.029 li
393.244 290.029 li
cp
.490196 .203922 .0901961 rgb
f
397.341 282.842 mo
393.201 282.842 li
391.741 281.34 li
398.801 281.34 li
397.341 282.842 li
cp
.658824 .321569 .176471 rgb
f
397.341 290.029 mo
393.201 290.029 li
391.741 291.531 li
398.801 291.531 li
397.341 290.029 li
cp
.45098 .219608 .121569 rgb
f
408.97 291.531 mo
407.468 290.014 li
407.468 282.859 li
408.97 281.34 li
408.97 291.531 li
cp
.337255 .117647 .027451 rgb
f
401.91 291.531 mo
403.411 290.014 li
403.411 282.859 li
401.91 281.34 li
401.91 291.531 li
cp
.580392 .298039 .180392 rgb
f
403.411 290.029 mo
403.411 282.842 li
407.468 282.842 li
407.468 290.029 li
403.411 290.029 li
cp
.490196 .203922 .0901961 rgb
f
407.511 282.842 mo
403.369 282.842 li
401.91 281.34 li
408.97 281.34 li
407.511 282.842 li
cp
.658824 .321569 .176471 rgb
f
407.511 290.029 mo
403.369 290.029 li
401.91 291.531 li
408.97 291.531 li
407.511 290.029 li
cp
.45098 .219608 .121569 rgb
f
419.138 291.531 mo
417.636 290.014 li
417.636 282.859 li
419.138 281.34 li
419.138 291.531 li
cp
.337255 .117647 .027451 rgb
f
412.078 291.531 mo
413.58 290.014 li
413.58 282.859 li
412.078 281.34 li
412.078 291.531 li
cp
.580392 .298039 .180392 rgb
f
413.58 290.029 mo
413.58 282.842 li
417.636 282.842 li
417.636 290.029 li
413.58 290.029 li
cp
.490196 .203922 .0901961 rgb
f
417.679 282.842 mo
413.539 282.842 li
412.078 281.34 li
419.138 281.34 li
417.679 282.842 li
cp
.658824 .321569 .176471 rgb
f
417.679 290.029 mo
413.539 290.029 li
412.078 291.531 li
419.138 291.531 li
417.679 290.029 li
cp
.45098 .219608 .121569 rgb
f
91.2559 364.175 mo
86.2993 364.175 li
86.2993 359.47 li
91.2559 359.47 li
91.2559 364.175 li
cp
.2 .2 .2 rgb
f
89.6255 368.267 mo
84.6689 368.267 li
84.6689 366.677 li
89.6255 366.677 li
89.6255 368.267 li
cp
f
79.5967 341.126 mo
57.2783 341.126 li
57.2783 328.973 li
79.5967 328.973 li
79.5967 341.126 li
cp
f
79.5967 382.519 mo
57.2783 382.519 li
57.2783 394.672 li
79.5967 394.672 li
79.5967 382.519 li
cp
f
77.0503 335.972 mo
77.0503 338.836 li
59.7285 338.836 li
59.7285 335.972 li
57.1821 335.972 li
57.1821 346.28 li
79.5967 346.28 li
79.5967 335.972 li
77.0503 335.972 li
.839216 .215686 .14902 rgb
f
59.8247 387.617 mo
59.8247 384.753 li
77.1465 384.753 li
77.1465 387.617 li
79.6929 387.617 li
79.6929 377.308 li
57.2783 377.308 li
57.2783 387.617 li
59.8247 387.617 li
cp
f
88.8609 361.822 mo
88.8609 373.128 79.6954 382.294 68.3896 382.294 cv
57.0835 382.294 47.918 373.128 47.918 361.822 cv
47.918 350.517 57.0835 341.351 68.3896 341.351 cv
79.6954 341.351 88.8609 350.517 88.8609 361.822 cv
.898039 .298039 .235294 rgb
f
68.3896 379.591 mo
58.5923 379.591 50.6216 371.62 50.6216 361.822 cv
50.6216 352.024 58.5923 344.054 68.3896 344.054 cv
78.187 344.054 86.1572 352.024 86.1572 361.822 cv
86.1572 371.62 78.187 379.591 68.3896 379.591 cv
1 1 1 rgb
f
69.9297 361.822 mo
69.9297 362.647 69.2617 363.315 68.4375 363.315 cv
67.6133 363.315 66.9453 362.647 66.9453 361.822 cv
66.9453 360.998 67.6133 360.33 68.4375 360.33 cv
69.2617 360.33 69.9297 360.998 69.9297 361.822 cv
cp
0 0 0 rgb
f
68.936 351.124 mo
68.0347 351.124 li
68.0347 346.28 li
68.936 346.28 li
68.936 351.124 li
f
68.936 347.968 mo
68.0347 347.968 li
68.0347 346.28 li
68.936 346.28 li
68.936 347.968 li
f
61.1553 350.002 mo
60.312 348.541 li
61.0923 348.09 li
61.9355 349.551 li
61.1553 350.002 li
f
56.2134 355.202 mo
54.7524 354.358 li
55.2036 353.577 li
56.6645 354.421 li
56.2134 355.202 li
f
54.5347 362.177 mo
52.8476 362.177 li
52.8476 361.276 li
54.5347 361.276 li
54.5347 362.177 li
f
55.1069 369.901 mo
54.6558 369.12 li
56.1167 368.276 li
56.5679 369.058 li
55.1069 369.901 li
f
60.9248 375.46 mo
60.1445 375.009 li
60.9878 373.548 li
61.7681 373.999 li
60.9248 375.46 li
cp
f
68.7436 377.364 mo
67.8423 377.364 li
67.8423 375.679 li
68.7436 375.679 li
68.7436 377.364 li
cp
f
75.687 375.557 mo
74.8428 374.096 li
75.623 373.645 li
76.4673 375.105 li
75.687 375.557 li
cp
f
81.5762 370.067 mo
80.1152 369.226 li
80.5654 368.444 li
82.0264 369.286 li
81.5762 370.067 li
cp
f
82.2451 362.37 mo
82.2441 361.47 li
83.9302 361.469 li
83.9311 362.369 li
82.2451 362.37 li
cp
f
80.6626 355.369 mo
80.2114 354.59 li
81.6714 353.746 li
82.1226 354.525 li
80.6626 355.369 li
cp
f
75.7915 350.098 mo
75.0113 349.647 li
75.854 348.186 li
76.6343 348.638 li
75.7915 350.098 li
f
57.7397 362.225 mo
52.8965 362.225 li
52.8965 361.324 li
57.7397 361.324 li
57.7397 362.225 li
f
68.8403 377.364 mo
67.939 377.364 li
67.939 372.521 li
68.8403 372.521 li
68.8403 377.364 li
cp
f
83.979 362.32 mo
79.1352 362.32 li
79.1352 361.42 li
83.979 361.42 li
83.979 362.32 li
cp
f
69.291 361.92 mo
67.4883 361.92 li
67.4883 356.439 li
69.291 356.439 li
69.291 361.92 li
cp
f
68.8452 362.697 mo
67.9341 361.143 li
79.2373 354.522 li
80.1484 356.077 li
68.8452 362.697 li
cp
f
50.6246 362.149 mo
50.6245 362.148 50.6245 362.148 50.6245 362.147 cv
50.6246 362.149 li
50.6234 362.076 mo
50.6234 362.075 50.6234 362.075 50.6234 362.074 cv
50.6234 362.075 50.6234 362.075 50.6234 362.076 cv
50.623 362.043 mo
50.6229 362.041 50.6229 362.037 50.6229 362.035 cv
50.6229 362.037 50.6229 362.041 50.623 362.043 cv
50.6226 362.008 mo
50.6225 362.005 50.6225 362.003 50.6225 362 cv
50.6225 362.003 50.6225 362.005 50.6226 362.008 cv
50.6222 361.967 mo
50.6222 361.967 li
50.6222 361.967 li
50.6219 361.934 mo
50.6219 361.931 50.6219 361.927 50.6219 361.924 cv
50.6219 361.927 50.6219 361.931 50.6219 361.934 cv
50.6218 361.9 mo
50.6218 361.896 50.6217 361.893 50.6217 361.889 cv
50.6217 361.893 50.6218 361.896 50.6218 361.9 cv
50.6217 361.865 mo
50.6217 361.862 50.6216 361.859 50.6216 361.855 cv
50.6216 361.859 50.6217 361.862 50.6217 361.865 cv
68.6099 344.055 mo
68.6087 344.055 68.6083 344.055 68.6071 344.055 cv
68.6083 344.055 68.6088 344.055 68.6099 344.055 cv
68.5751 344.055 mo
68.5733 344.055 68.5722 344.055 68.5704 344.055 cv
68.572 344.055 68.5736 344.055 68.5751 344.055 cv
68.5007 344.054 mo
68.4989 344.054 68.4967 344.054 68.495 344.054 cv
68.4969 344.054 68.4988 344.054 68.5007 344.054 cv
68.4671 344.054 mo
68.4641 344.054 68.4604 344.054 68.4574 344.054 cv
68.4608 344.054 68.4637 344.054 68.4671 344.054 cv
68.4326 344.054 mo
68.4296 344.054 68.426 344.054 68.423 344.054 cv
68.4265 344.054 68.4291 344.054 68.4326 344.054 cv
.843137 .301961 .247059 rgb
f
58.6182 376.647 mo
53.891 373.52 50.7344 368.202 50.6246 362.149 cv
50.6245 362.147 li
50.6241 362.124 50.6237 362.1 50.6234 362.076 cv
50.6234 362.075 50.6234 362.075 50.6234 362.074 cv
50.6232 362.064 50.6231 362.053 50.623 362.043 cv
50.6229 362.041 50.6229 362.037 50.6229 362.035 cv
50.6228 362.026 50.6227 362.017 50.6226 362.008 cv
50.6225 362.005 50.6225 362.003 50.6225 362 cv
50.6224 361.99 50.6223 361.978 50.6222 361.967 cv
50.6222 361.967 li
50.6221 361.956 50.622 361.945 50.6219 361.934 cv
50.6219 361.931 50.6219 361.927 50.6219 361.924 cv
50.6218 361.916 50.6218 361.908 50.6218 361.9 cv
50.6218 361.896 50.6217 361.893 50.6217 361.889 cv
50.6217 361.881 50.6217 361.873 50.6217 361.865 cv
50.6217 361.862 50.6216 361.859 50.6216 361.855 cv
50.6216 361.844 50.6216 361.833 50.6216 361.822 cv
50.6216 361.822 li
50.6216 352.024 58.5923 344.054 68.3896 344.054 cv
68.4006 344.054 68.412 344.054 68.423 344.054 cv
68.426 344.054 68.4296 344.054 68.4326 344.054 cv
68.4406 344.054 68.4494 344.054 68.4574 344.054 cv
68.4604 344.054 68.4641 344.054 68.4671 344.054 cv
68.4762 344.054 68.4858 344.054 68.495 344.054 cv
68.4967 344.054 68.4989 344.054 68.5007 344.054 cv
68.5239 344.054 68.5472 344.054 68.5704 344.055 cv
68.5722 344.055 68.5733 344.055 68.5751 344.055 cv
68.5857 344.055 68.5965 344.055 68.6071 344.055 cv
68.6083 344.055 68.6087 344.055 68.6099 344.055 cv
74.7663 344.131 80.1687 347.361 83.2998 352.192 cv
81.4805 351.628 79.5567 351.32 77.5719 351.32 cv
66.792 351.32 57.7969 360.315 57.7969 371.095 cv
57.7969 373.017 58.0874 374.88 58.6182 376.647 cv
56.1167 368.276 mo
54.6558 369.12 li
55.1069 369.901 li
56.5679 369.058 li
56.1167 368.276 li
52.8965 362.177 mo
52.8965 362.225 li
57.7397 362.225 li
57.7397 361.324 li
54.5347 361.324 li
54.5347 361.276 li
52.8476 361.276 li
52.8476 362.177 li
52.8965 362.177 li
55.2036 353.577 mo
54.7524 354.358 li
56.2134 355.202 li
56.6645 354.421 li
55.2036 353.577 li
68.0347 346.28 mo
68.0347 351.124 li
68.936 351.124 li
68.936 347.968 li
68.936 346.28 li
68.0347 346.28 li
75.854 348.186 mo
75.0113 349.647 li
75.7915 350.098 li
76.6343 348.638 li
75.854 348.186 li
61.0923 348.09 mo
60.312 348.541 li
61.1553 350.002 li
61.9355 349.551 li
61.0923 348.09 li
.933333 .933333 .933333 rgb
f
68.936 351.124 mo
68.0347 351.124 li
68.0347 346.28 li
68.936 346.28 li
68.0347 346.28 li
68.0347 347.968 li
68.936 347.968 li
68.936 351.124 li
.0352941 .0352941 .0352941 rgb
f
68.936 347.968 mo
68.936 347.968 li
68.0347 347.968 li
68.0347 346.28 li
68.936 346.28 li
68.936 347.968 li
f
61.1553 350.002 mo
60.312 348.541 li
61.0923 348.09 li
61.9355 349.551 li
61.1553 350.002 li
f
56.2134 355.202 mo
54.7524 354.358 li
55.2036 353.577 li
56.6645 354.421 li
56.2134 355.202 li
f
52.8965 362.177 mo
52.8476 362.177 li
52.8476 361.276 li
54.5347 361.276 li
54.5347 361.324 li
52.8965 361.324 li
52.8965 362.177 li
f
55.1069 369.901 mo
54.6558 369.12 li
56.1167 368.276 li
56.5679 369.058 li
55.1069 369.901 li
f
75.7915 350.098 mo
75.0113 349.647 li
75.854 348.186 li
76.6343 348.638 li
75.7915 350.098 li
f
57.7397 362.225 mo
52.8965 362.225 li
52.8965 362.177 li
52.8965 361.324 li
54.5347 361.324 li
57.7397 361.324 li
57.7397 362.225 li
f
253.325 347.065 mo
258.09 340.076 li
258.494 341.546 li
250.554 337.857 li
250.054 337.625 249.836 337.029 250.069 336.529 cv
250.172 336.307 250.347 336.141 250.552 336.045 cv
258.502 332.326 li
258.656 334.195 li
250.705 331.963 li
250.173 331.813 249.864 331.261 250.013 330.728 cv
250.085 330.473 250.253 330.267 250.465 330.14 cv
255.953 326.877 li
255.949 328.594 li
248.861 324.328 li
248.388 324.043 248.235 323.429 248.521 322.955 cv
248.657 322.728 248.872 322.574 249.108 322.508 cv
256.196 320.537 li
255.978 322.373 li
248.891 318.426 li
248.407 318.157 248.235 317.549 248.503 317.065 cv
248.579 316.95 li
251.099 313.608 li
250.911 314.379 li
250.581 308.903 li
250.568 308.682 250.737 308.491 250.959 308.478 cv
251.15 308.467 251.319 308.592 251.37 308.769 cv
252.882 314.041 li
252.953 314.287 252.899 314.541 252.757 314.731 cv
252.695 314.813 li
250.175 318.154 li
249.864 316.679 li
256.951 320.627 li
257.434 320.895 257.606 321.504 257.338 321.986 cv
257.203 322.228 256.98 322.395 256.732 322.463 cv
249.646 324.435 li
249.893 322.614 li
256.98 326.88 li
257.453 327.164 257.605 327.779 257.321 328.252 cv
257.234 328.398 257.111 328.516 256.975 328.597 cv
251.487 331.859 li
251.246 330.037 li
259.197 332.27 li
259.729 332.419 260.038 332.971 259.889 333.503 cv
259.808 333.793 259.602 334.02 259.35 334.139 cv
251.399 337.855 li
251.398 336.043 li
259.338 339.732 li
259.838 339.965 260.056 340.56 259.822 341.06 cv
259.742 341.203 li
254.979 348.191 li
254.667 348.647 254.045 348.766 253.589 348.454 cv
253.132 348.143 253.015 347.522 253.325 347.065 cv
cp
.807843 .8 .811765 rgb
f
284.284 311.73 mo
284.47 311.622 284.63 311.478 284.763 311.307 cv
285.321 310.574 285.181 309.522 284.448 308.963 cv
283.735 308.417 282.657 308.558 282.106 309.275 cv
281.835 309.631 281.718 310.069 281.776 310.513 cv
281.837 310.955 282.064 311.348 282.419 311.619 cv
282.962 312.034 283.694 312.078 284.284 311.73 cv
cp
282.179 308.166 mo
283.05 307.652 284.13 307.717 284.933 308.33 cv
286.015 309.156 286.222 310.71 285.396 311.789 cv
285.2 312.044 284.962 312.255 284.689 312.417 cv
283.819 312.93 282.737 312.865 281.935 312.252 cv
281.411 311.852 281.075 311.272 280.987 310.617 cv
280.899 309.965 281.073 309.316 281.474 308.793 cv
281.667 308.538 281.905 308.326 282.179 308.166 cv
cp
.388235 .262745 .180392 rgb
f
289.114 315.676 mo
288.267 316.78 286.685 316.989 285.579 316.143 cv
284.476 315.293 284.267 313.712 285.114 312.606 cv
295.294 299.338 li
296.142 298.231 299.169 295.929 300.274 296.777 cv
300.274 296.777 300.142 301.3 299.296 302.406 cv
289.114 315.676 li
cp
.807843 .8 .811765 rgb
f
297.888 301.79 mo
297.888 301.79 297.364 302.611 296.528 303.805 cv
296.105 304.397 295.626 305.102 295.083 305.83 cv
294.536 306.56 293.958 307.338 293.378 308.117 cv
292.778 308.881 292.181 309.647 291.618 310.361 cv
291.06 311.08 290.505 311.724 290.046 312.291 cv
289.112 313.41 288.456 314.131 288.456 314.131 cv
288.456 314.131 288.981 313.309 289.814 312.114 cv
290.239 311.523 290.716 310.818 291.263 310.09 cv
291.808 309.359 292.388 308.582 292.968 307.805 cv
293.565 307.039 294.163 306.275 294.726 305.559 cv
295.286 304.842 295.839 304.197 296.3 303.631 cv
297.231 302.512 297.888 301.79 297.888 301.79 cv
cp
.658824 .658824 .658824 rgb
f
294.226 327.787 mo
296.075 326.703 299.218 328.631 301.243 332.091 cv
301.968 333.328 302.446 334.592 302.683 335.76 cv
305.245 335.58 310.339 333.111 310.339 333.111 cv
288.743 316.606 li
284.39 322.305 li
284.39 322.305 288.466 326.497 292.954 330.209 cv
293.056 329.102 293.474 328.228 294.226 327.787 cv
.807843 .8 .811765 rgb
f
275.273 331.94 mo
275.273 331.94 275.18 331.843 275.005 331.656 cv
274.84 331.472 274.558 331.203 274.279 330.852 cv
273.984 330.505 273.625 330.082 273.273 329.59 cv
273.09 329.346 272.894 329.084 272.688 328.811 cv
272.578 328.674 272.576 328.521 272.604 328.361 cv
272.627 328.204 272.592 328.049 272.579 327.887 cv
272.3 325.31 271.928 321.874 271.557 318.437 cv
271.186 315.002 270.813 311.566 270.533 308.988 cv
270.513 308.829 270.513 308.668 270.463 308.519 cv
270.394 308.371 270.383 308.219 270.473 308.061 cv
270.615 307.748 270.749 307.453 270.877 307.174 cv
271.117 306.618 271.377 306.127 271.584 305.726 cv
271.779 305.324 271.988 305.004 272.107 304.786 cv
272.232 304.569 272.299 304.453 272.299 304.453 cv
272.299 304.453 272.389 304.553 272.559 304.738 cv
272.722 304.924 272.993 305.193 273.27 305.543 cv
273.559 305.893 273.916 306.315 274.269 306.807 cv
274.453 307.051 274.648 307.312 274.854 307.588 cv
274.977 307.723 274.998 307.872 274.962 308.031 cv
274.944 308.19 274.981 308.346 274.994 308.507 cv
275.272 311.083 275.644 314.52 276.016 317.955 cv
276.388 321.392 276.76 324.826 277.039 327.404 cv
277.061 327.565 277.059 327.724 277.115 327.875 cv
277.175 328.023 277.207 328.174 277.128 328.33 cv
276.986 328.643 276.852 328.94 276.725 329.217 cv
276.485 329.772 276.226 330.262 276.012 330.666 cv
275.813 331.067 275.598 331.39 275.473 331.605 cv
275.343 331.824 275.273 331.94 275.273 331.94 cv
f
262.994 355.26 mo
260.848 355.356 259.029 353.697 258.93 351.553 cv
258.834 349.407 260.492 347.588 262.639 347.492 cv
288.409 346.315 li
290.556 346.217 296.282 347.502 296.382 349.648 cv
296.382 349.648 290.909 353.986 288.765 354.086 cv
262.994 355.26 li
f
289.608 311.85 mo
289.439 311.719 li
289.189 311.529 li
286.392 309.391 282.392 309.924 280.253 312.723 cv
252.286 349.314 li
250.148 352.111 250.683 356.111 253.48 358.25 cv
253.731 358.441 li
253.901 358.57 li
256.697 360.709 260.697 360.175 262.836 357.376 cv
290.802 320.785 li
292.94 317.986 292.405 313.987 289.608 311.85 cv
.898039 .298039 .235294 rgb
f
257.433 353.513 mo
256.351 352.685 256.145 351.138 256.971 350.055 cv
257.799 348.974 259.347 348.768 260.429 349.594 cv
261.511 350.42 261.717 351.969 260.891 353.051 cv
260.064 354.133 258.516 354.34 257.433 353.513 cv
cp
.807843 .8 .811765 rgb
f
257.57 350.514 mo
258.145 349.764 259.221 349.619 259.972 350.191 cv
260.722 350.766 260.865 351.842 260.293 352.594 cv
259.719 353.345 258.642 353.488 257.889 352.914 cv
257.141 352.341 256.996 351.264 257.57 350.514 cv
cp
.2 .2 .2 rgb
f
288.095 351.815 mo
288.095 351.815 286.991 352.024 285.327 352.244 cv
284.495 352.342 283.526 352.48 282.483 352.584 cv
281.442 352.693 280.329 352.783 279.217 352.874 cv
278.103 352.947 276.988 353.025 275.941 353.068 cv
274.898 353.123 273.917 353.128 273.08 353.155 cv
271.402 353.184 270.279 353.139 270.279 353.139 cv
270.279 353.139 271.383 352.929 273.045 352.709 cv
273.878 352.611 274.848 352.472 275.89 352.369 cv
276.931 352.259 278.043 352.17 279.157 352.079 cv
280.273 352.006 281.386 351.929 282.433 351.885 cv
283.478 351.832 284.456 351.826 285.294 351.798 cv
286.972 351.77 288.095 351.815 288.095 351.815 cv
cp
.658824 .658824 .658824 rgb
f
305.023 331 mo
305.023 331 304.171 330.506 302.942 329.696 cv
301.716 328.887 300.12 327.752 298.565 326.566 cv
297.013 325.377 295.499 324.139 294.396 323.167 cv
293.292 322.191 292.591 321.5 292.591 321.5 cv
292.591 321.5 293.444 321.996 294.673 322.803 cv
295.899 323.612 297.493 324.748 299.048 325.934 cv
300.601 327.123 302.114 328.363 303.218 329.334 cv
304.319 330.309 305.023 331 305.023 331 cv
cp
f
264.645 350.76 mo
264.34 350.76 264.033 350.664 263.772 350.465 cv
263.141 349.984 263.021 349.08 263.502 348.45 cv
284.509 320.965 li
284.792 320.596 285.22 320.402 285.652 320.402 cv
285.957 320.402 286.264 320.498 286.524 320.697 cv
287.153 321.18 287.276 322.082 286.794 322.713 cv
265.789 350.197 li
265.505 350.566 265.078 350.76 264.645 350.76 cv
.917647 .439216 .388235 rgb
f
409.319 338.082 mo
409.433 336.713 408.01 335.768 406.709 335.772 cv
405.288 335.777 404.072 336.478 402.963 335.214 cv
402.096 334.228 401.685 332.935 401.225 331.788 cv
400.629 330.291 399.278 329.152 397.704 328.647 cv
396.293 328.195 394.899 328.25 393.4 328.268 cv
391.955 328.283 390.539 329.194 389.425 330.04 cv
388.419 330.805 387.889 332.287 386.673 332.654 cv
386.124 332.818 385.56 333.057 384.989 333.12 cv
384.335 333.193 383.788 333.464 383.135 333.527 cv
382.509 333.586 381.896 333.371 381.238 333.422 cv
380.573 333.477 380.305 333.703 379.827 334.086 cv
379.431 334.404 378.934 334.664 378.575 335.059 cv
378.173 335.506 378.189 336.15 378.077 336.738 cv
377.841 337.955 377.877 338.678 378.565 339.755 cv
379.373 341.027 380.774 341.755 382.299 341.908 cv
385.03 342.185 387.94 341.949 390.691 341.949 cv
391.857 341.949 392.988 341.828 394.15 341.782 cv
395.629 341.726 397.113 341.712 398.593 341.645 cv
399.977 341.584 401.282 341.194 402.678 341.144 cv
403.503 341.113 404.325 341.024 405.15 341.022 cv
405.845 341.02 406.677 341.324 407.345 341.229 cv
408.685 341.041 409.233 339.117 409.319 338.082 cv
cp
.921569 .858824 .670588 rgb
f
395.64 331.911 mo
395.64 332.353 396.147 332.709 396.772 332.709 cv
397.393 332.709 397.899 332.353 397.899 331.911 cv
397.899 331.473 397.393 331.115 396.772 331.115 cv
396.147 331.115 395.64 331.473 395.64 331.911 cv
cp
.631373 .364706 .207843 rgb
f
400.441 338.582 mo
400.441 338.894 400.801 339.145 401.239 339.145 cv
401.678 339.145 402.035 338.894 402.035 338.582 cv
402.035 338.273 401.678 338.02 401.239 338.02 cv
400.801 338.02 400.441 338.273 400.441 338.582 cv
cp
f
381.282 335.711 mo
381.282 336.055 381.678 336.334 382.165 336.334 cv
382.654 336.334 383.05 336.055 383.05 335.711 cv
383.05 335.367 382.654 335.088 382.165 335.088 cv
381.678 335.088 381.282 335.367 381.282 335.711 cv
cp
f
390.686 333.887 mo
390.686 334.178 391.021 334.414 391.434 334.414 cv
391.845 334.414 392.181 334.178 392.181 333.887 cv
392.181 333.596 391.845 333.359 391.434 333.359 cv
391.021 333.359 390.686 333.596 390.686 333.887 cv
cp
f
386.528 335.711 mo
386.528 335.985 386.846 336.209 387.235 336.209 cv
387.625 336.209 387.943 335.985 387.943 335.711 cv
387.943 335.435 387.625 335.212 387.235 335.212 cv
386.846 335.212 386.528 335.435 386.528 335.711 cv
cp
f
384.128 338.81 mo
384.128 339.131 384.498 339.393 384.953 339.393 cv
385.408 339.393 385.773 339.131 385.773 338.81 cv
385.773 338.49 385.408 338.231 384.953 338.231 cv
384.498 338.231 384.128 338.49 384.128 338.81 cv
cp
f
392.372 337.65 mo
392.372 338.203 393.007 338.65 393.792 338.65 cv
394.571 338.65 395.207 338.203 395.207 337.65 cv
395.207 337.1 394.571 336.652 393.792 336.652 cv
393.007 336.652 392.372 337.1 392.372 337.65 cv
cp
f
406.002 338.231 mo
406.002 338.426 406.222 338.582 406.498 338.582 cv
406.773 338.582 406.995 338.426 406.995 338.231 cv
406.995 338.037 406.773 337.881 406.498 337.881 cv
406.222 337.881 406.002 338.037 406.002 338.231 cv
cp
f
408.953 340.33 mo
396.749 340.33 li
390.887 340.33 li
378.683 340.33 li
378.683 340.33 379.563 355.416 382.885 362.096 cv
386.209 368.775 388.33 376.631 387.717 381.586 cv
387.452 383.719 385.09 388.556 384.458 389.685 cv
383.822 390.816 382.885 394.959 382.885 394.959 cv
390.887 394.959 li
396.749 394.959 li
404.751 394.959 li
404.751 394.959 403.812 390.816 403.182 389.685 cv
402.546 388.556 400.185 383.719 399.921 381.586 cv
399.306 376.631 401.427 368.775 404.751 362.096 cv
408.075 355.416 408.953 340.33 408.953 340.33 cv
.839216 .215686 .14902 rgb
f
406.972 343.023 mo
396.365 343.023 li
391.271 343.023 li
380.664 343.023 li
380.664 343.023 381.426 356.621 384.314 362.644 cv
387.205 368.664 389.326 375.744 388.823 380.211 cv
388.606 382.133 387.114 386.494 386.581 387.513 cv
386.048 388.531 384.314 392.267 384.314 392.267 cv
384.314 392.267 388.702 389.826 393.818 389.826 cv
399.599 389.826 403.321 392.267 403.321 392.267 cv
403.321 392.267 401.588 388.531 401.057 387.513 cv
400.522 386.494 399.03 382.133 398.813 380.211 cv
398.311 375.744 400.433 368.664 403.321 362.644 cv
406.211 356.621 406.972 343.023 406.972 343.023 cv
.980392 .552941 .0392157 rgb
f
388.557 346.111 mo
388.557 346.84 387.965 347.432 387.235 347.432 cv
386.506 347.432 385.915 346.84 385.915 346.111 cv
385.915 345.381 386.506 344.79 387.235 344.79 cv
387.965 344.79 388.557 345.381 388.557 346.111 cv
1 .87451 .65098 rgb
f
390.62 351.24 mo
390.62 351.827 390.145 352.303 389.558 352.303 cv
388.973 352.303 388.496 351.827 388.496 351.24 cv
388.496 350.654 388.973 350.18 389.558 350.18 cv
390.145 350.18 390.62 350.654 390.62 351.24 cv
cp
f
400.162 347.621 mo
400.162 348.246 399.655 348.752 399.03 348.752 cv
398.405 348.752 397.899 348.246 397.899 347.621 cv
397.899 346.997 398.405 346.49 399.03 346.49 cv
399.655 346.49 400.162 346.997 400.162 347.621 cv
cp
f
403.143 352.21 mo
403.143 352.771 402.688 353.225 402.128 353.225 cv
401.567 353.225 401.112 352.771 401.112 352.21 cv
401.112 351.648 401.567 351.194 402.128 351.194 cv
402.688 351.194 403.143 351.648 403.143 352.21 cv
cp
f
397.832 354.263 mo
397.832 354.85 397.356 355.324 396.771 355.324 cv
396.184 355.324 395.709 354.85 395.709 354.263 cv
395.709 353.676 396.184 353.201 396.771 353.201 cv
397.356 353.201 397.832 353.676 397.832 354.263 cv
cp
f
390.686 356.602 mo
390.686 357.11 390.273 357.523 389.763 357.523 cv
389.253 357.523 388.84 357.11 388.84 356.602 cv
388.84 356.092 389.253 355.678 389.763 355.678 cv
390.273 355.678 390.686 356.092 390.686 356.602 cv
cp
f
387.742 354.263 mo
387.742 354.543 387.515 354.77 387.235 354.77 cv
386.956 354.77 386.729 354.543 386.729 354.263 cv
386.729 353.982 386.956 353.756 387.235 353.756 cv
387.515 353.756 387.742 353.982 387.742 354.263 cv
f
392.213 364.293 mo
392.213 364.721 391.863 365.07 391.434 365.07 cv
391.004 365.07 390.654 364.721 390.654 364.293 cv
390.654 363.861 391.004 363.514 391.434 363.514 cv
391.863 363.514 392.213 363.861 392.213 364.293 cv
cp
f
398.822 368.55 mo
398.822 369.059 398.409 369.471 397.899 369.471 cv
397.39 369.471 396.977 369.059 396.977 368.55 cv
396.977 368.039 397.39 367.626 397.899 367.626 cv
398.409 367.626 398.822 368.039 398.822 368.55 cv
cp
f
397.303 374.997 mo
397.303 375.291 397.064 375.529 396.771 375.529 cv
396.476 375.529 396.238 375.291 396.238 374.997 cv
396.238 374.702 396.476 374.465 396.771 374.465 cv
397.064 374.465 397.303 374.702 397.303 374.997 cv
cp
f
394.436 381.697 mo
394.436 382.053 394.147 382.342 393.791 382.342 cv
393.434 382.342 393.145 382.053 393.145 381.697 cv
393.145 381.34 393.434 381.051 393.791 381.051 cv
394.147 381.051 394.436 381.34 394.436 381.697 cv
cp
f
399.162 388.31 mo
399.162 388.496 399.01 388.648 398.822 388.648 cv
398.635 388.648 398.483 388.496 398.483 388.31 cv
398.483 388.121 398.635 387.971 398.822 387.971 cv
399.01 387.971 399.162 388.121 399.162 388.31 cv
cp
f
391.54 387.576 mo
391.54 387.828 391.335 388.034 391.082 388.034 cv
390.829 388.034 390.624 387.828 390.624 387.576 cv
390.624 387.322 390.829 387.118 391.082 387.118 cv
391.335 387.118 391.54 387.322 391.54 387.576 cv
f
384.314 392.267 mo
384.314 392.267 385.78 388.531 386.332 387.513 cv
386.883 386.494 388.284 382.133 388.515 380.211 cv
389.049 375.744 387.205 368.664 384.314 362.644 cv
381.426 356.621 380.664 343.023 380.664 343.023 cv
380.664 343.023 li
380.664 343.023 381.426 356.621 384.314 362.644 cv
387.205 368.664 389.326 375.744 388.823 380.211 cv
388.606 382.133 387.114 386.494 386.581 387.513 cv
386.048 388.531 384.314 392.267 384.314 392.267 cv
384.314 392.267 mo
384.322 392.263 386.566 391.016 389.714 390.306 cv
389.714 390.308 389.713 390.309 389.713 390.311 cv
386.57 391.02 384.324 392.261 384.314 392.267 cv
.870588 .372549 .317647 rgb
f
384.314 392.267 mo
384.314 392.267 li
384.314 392.267 386.048 388.531 386.581 387.513 cv
387.114 386.494 388.606 382.133 388.823 380.211 cv
389.326 375.744 387.205 368.664 384.314 362.644 cv
381.426 356.621 380.664 343.023 380.664 343.023 cv
386.329 343.023 li
386.242 343.77 386.162 344.579 386.097 345.442 cv
385.981 345.638 385.915 345.867 385.915 346.111 cv
385.915 346.294 385.952 346.467 386.019 346.625 cv
385.679 352.717 386.155 361.006 389.763 368.549 cv
393.237 375.814 391.866 384.031 389.714 390.306 cv
386.566 391.016 384.322 392.263 384.314 392.267 cv
384.314 392.267 li
.984314 .643137 .231373 rgb
f
386.019 346.625 mo
385.952 346.467 385.915 346.294 385.915 346.111 cv
385.915 345.867 385.981 345.638 386.097 345.442 cv
386.068 345.826 386.041 346.221 386.019 346.625 cv
1 .898039 .721569 rgb
f
345.898 383.027 mo
345.898 383.027 344.741 388.168 345.898 389.471 cv
347.055 390.776 346.401 392.897 340.855 391.592 cv
335.311 390.287 333.844 392.002 333.844 392.002 cv
345.898 383.027 li
cp
.839216 .215686 .14902 rgb
f
312.388 383.027 mo
312.388 383.027 313.544 388.168 312.388 389.471 cv
311.23 390.776 311.884 392.897 317.429 391.592 cv
322.975 390.287 324.442 392.002 324.442 392.002 cv
312.388 383.027 li
cp
f
347.665 373.465 mo
347.336 369.364 345.681 365.643 343.124 362.727 cv
338.969 357.604 334.147 356.631 333.497 349.705 cv
333.28 347.397 334.781 344.427 335.925 340.42 cv
335.925 340.42 332.94 341.921 329.856 341.921 cv
325.883 341.921 325.94 341.41 322.36 340.42 cv
323.454 344.256 324.947 347.175 324.732 349.482 cv
324.049 356.816 318.905 357.975 315.161 362.727 cv
312.604 365.643 310.949 369.364 310.62 373.465 cv
310.555 373.593 li
310.61 373.593 li
310.577 374.047 310.555 374.505 310.555 374.969 cv
310.555 385.236 318.877 393.557 329.142 393.557 cv
339.408 393.557 347.731 385.236 347.731 374.969 cv
347.731 374.505 347.708 374.047 347.674 373.593 cv
347.731 373.593 li
347.665 373.465 li
f
333.497 349.705 mo
333.28 347.397 334.781 344.427 335.925 340.42 cv
335.925 340.42 332.94 341.921 329.856 341.921 cv
325.883 341.921 325.94 341.41 322.36 340.42 cv
323.454 344.256 324.947 347.175 324.732 349.482 cv
324.707 349.761 324.662 350.015 324.624 350.274 cv
333.575 350.274 li
333.551 350.085 333.516 349.905 333.497 349.705 cv
cp
.898039 .298039 .235294 rgb
f
343.124 362.727 mo
339.089 357.753 334.439 356.673 333.575 350.274 cv
324.624 350.274 li
323.65 356.894 318.764 358.154 315.161 362.727 cv
312.73 365.501 311.115 369.006 310.681 372.867 cv
316.126 374.897 322.425 376.066 329.142 376.066 cv
335.862 376.066 342.159 374.897 347.604 372.867 cv
347.17 369.006 345.556 365.501 343.124 362.727 cv
f
330.325 351.691 mo
327.96 351.691 li
325.07 351.691 323.773 351.056 323.773 350.274 cv
323.773 349.494 325.07 350.292 327.96 350.292 cv
330.325 350.292 li
333.216 350.292 334.513 349.494 334.513 350.274 cv
334.513 351.056 333.216 351.691 330.325 351.691 cv
cp
.2 .2 .2 rgb
f
327.264 378.572 mo
331.441 378.572 li
331.441 380.322 li
327.264 380.322 li
327.264 383.93 li
325.013 383.93 li
325.013 380.322 li
322.625 380.322 li
322.625 378.572 li
325.013 378.572 li
325.013 364.101 li
335.659 364.101 li
335.659 366.149 li
327.264 366.149 li
327.264 373.405 li
335.13 373.405 li
335.13 375.452 li
327.264 375.452 li
327.264 378.572 li
cp
1 1 1 rgb
f
314.241 382.195 mo
312.871 378.989 312.467 376.107 312.677 373.56 cv
313.296 373.76 313.925 373.949 314.563 374.126 cv
313.622 378.866 314.241 382.195 314.241 382.195 cv
.870588 .372549 .317647 rgb
f
314.563 374.126 mo
313.925 373.949 313.296 373.76 312.677 373.56 cv
313.441 364.277 322.36 359.435 322.36 359.435 cv
317.486 364.544 315.403 369.897 314.563 374.126 cv
.917647 .439216 .388235 rgb
f
73.5161 235.579 mo
73.7495 227.166 77.3208 218.736 79.0727 215.08 cv
77.5879 214.858 76.5947 214.748 76.5947 214.748 cv
69.5757 213.96 li
62.5518 214.748 li
62.5518 214.748 49.9502 216.136 47.2803 219.071 cv
42.7153 224.091 42.3945 245.765 42.3945 245.765 cv
69.5405 250.1 li
69.5405 250.11 li
69.5747 250.105 li
69.6064 250.11 li
69.6064 250.1 li
75.6304 249.138 li
74.4648 245.741 73.3647 241.031 73.5161 235.579 cv
cp
.917647 .905882 .921569 rgb
f
91.8677 219.071 mo
91.2329 218.372 90.0332 217.763 88.5781 217.239 cv
87.3193 247.27 li
96.7519 245.765 li
96.7519 245.765 96.4316 224.091 91.8677 219.071 cv
cp
.807843 .8 .811765 rgb
f
72.3999 214.671 mo
66.0102 213.623 63.8037 209.955 63.8037 209.955 cv
72.645 206.041 li
65.6186 206.041 li
64.1758 206.041 63.0039 207.072 63.0039 208.347 cv
63.0039 214.282 li
63.0039 215.557 64.1758 216.588 65.6186 216.588 cv
73.9824 216.588 li
75.4263 216.588 76.5947 215.557 76.5947 214.282 cv
76.5947 214.154 li
75.6186 214.699 74.27 214.98 72.3999 214.671 cv
cp
.976471 .764706 .580392 rgb
f
73.9824 206.041 mo
72.645 206.041 li
63.189 208.76 li
63.189 208.76 64.6377 213.69 72.3999 214.671 cv
74.2768 214.911 75.6186 215.294 76.5947 214.748 cv
76.5947 208.347 li
76.5947 207.072 75.4263 206.041 73.9824 206.041 cv
cp
.819608 .643137 .486275 rgb
f
82.0762 195.107 mo
81.7476 195.006 81.3765 195.238 81.0161 195.707 cv
81.0264 195.475 81.0308 195.248 81.0308 195.02 cv
81.0308 189.503 78.2573 186.01 74.2915 183.934 cv
73.7715 185.88 72.2065 186.265 69.5918 186.265 cv
68.582 186.265 67.7295 186.021 67.0322 185.612 cv
66.3159 186.062 65.4307 186.335 64.3672 186.335 cv
63.3301 186.335 62.46 186.079 61.7519 185.648 cv
59.7851 188.072 58.5703 191.374 58.5703 195.02 cv
58.5703 195.248 58.5757 195.475 58.585 195.707 cv
58.2256 195.238 57.852 195.006 57.5259 195.107 cv
56.7358 195.352 56.498 197.424 56.9976 199.737 cv
57.4951 202.049 58.5386 203.725 59.3281 203.48 cv
59.6094 203.393 60.0864 202.181 60.2192 201.703 cv
62.1279 207.264 65.5542 213.192 69.8008 213.192 cv
74.0469 213.192 78.4853 208.454 79.041 201.041 cv
79.1738 201.518 79.9932 203.393 80.272 203.48 cv
81.062 203.725 82.1059 202.049 82.603 199.737 cv
83.1016 197.424 82.8643 195.352 82.0762 195.107 cv
cp
1 .847059 .705882 rgb
f
81.5591 189.427 mo
81.2515 189.48 80.9302 189.514 80.5869 189.514 cv
77.3081 189.514 75.6777 188.203 75.6919 185.661 cv
73.3398 185.65 70.9897 185.529 68.7202 184.94 cv
67.9946 186.445 66.5488 186.335 64.3672 186.335 cv
63.2808 186.335 62.3799 186.05 61.6548 185.583 cv
61.5566 186.012 61.4907 186.459 61.4829 186.936 cv
61.3125 192.999 68.9556 193.993 69.77 192.366 cv
70.3652 194.457 72.0361 193.483 72.1518 191.605 cv
73.0815 194.024 75.4946 194.126 75.9634 192.462 cv
78.3906 195.721 78.8994 198.273 79.4214 201.721 cv
81.0161 195.707 li
81.8188 193.619 82.0234 191.52 81.5591 189.427 cv
cp
.678431 .52549 .380392 rgb
f
62.5532 186.028 mo
62.1059 185.863 61.7046 186.887 61.354 186.617 cv
58.9062 187.507 57.6753 189.196 58.585 195.707 cv
60.2192 201.703 li
59.6811 193.3 63.812 192.16 62.5532 186.028 cv
cp
f
69.5737 211.671 mo
68.5693 211.577 67.2012 211.232 66.2051 210.411 cv
66.3979 209.27 66.6821 208.158 67.2466 207.129 cv
67.8711 206.713 69.0947 206.898 69.8799 206.898 cv
70.6655 206.898 71.7441 206.713 72.3696 207.129 cv
72.9331 208.158 73.2173 209.27 73.4101 210.411 cv
72.416 211.232 70.6367 211.577 69.5737 211.671 cv
cp
78.8569 198.64 mo
78.1182 200.477 77.7661 202.319 77.7349 204.165 cv
77.5615 206.121 76.8579 207.892 75.833 209.55 cv
75.1758 209.868 74.5547 210.078 73.9717 210.171 cv
73.8359 208.956 73.603 207.706 73.251 206.408 cv
72.4121 205.66 70.9004 205.185 69.7192 205.185 cv
68.5391 205.185 67.2046 205.66 66.3652 206.408 cv
66.0137 207.706 65.7783 208.956 65.645 210.171 cv
65.0605 210.078 64.4399 209.868 63.7827 209.55 cv
62.7583 207.892 62.0537 206.121 61.8813 204.165 cv
61.8491 202.319 61.4971 200.477 60.7602 198.64 cv
59.5874 199.007 li
60.8325 204.572 li
61.2524 206.471 62.1103 208.249 63.3232 209.932 cv
63.9995 210.3 64.5644 210.804 65.0054 211.452 cv
66.0527 212.824 67.7793 213.524 69.3276 213.902 cv
69.5757 213.96 li
69.8081 213.908 li
71.4336 213.531 73.5615 212.826 74.6128 211.452 cv
75.0518 210.804 75.6167 210.3 76.2934 209.932 cv
77.5049 208.249 78.3638 206.471 78.7837 204.572 cv
80.0283 199.007 li
78.8569 198.64 li
cp
f
59.3174 197.318 mo
59.3838 197.856 59.4678 198.412 59.5874 199.007 cv
61.1201 199.721 li
61.1201 199.721 60.7646 198.631 60.6748 197.679 cv
60.1782 197.617 59.7246 197.494 59.3174 197.318 cv
cp
f
88.8257 193.232 mo
88.8257 196.399 80.3076 198.967 69.7988 198.967 cv
59.2925 198.967 50.7744 196.399 50.7744 193.232 cv
50.7744 190.066 59.2925 187.499 69.7988 187.499 cv
80.3076 187.499 88.8257 190.066 88.8257 193.232 cv
cp
.14902 .14902 .14902 rgb
f
70.3335 190.414 mo
66.2837 190.414 62.5093 189.034 59.458 186.728 cv
59.4165 190.66 li
59.4165 192.018 64.1728 193.232 69.7988 193.232 cv
75.4258 193.232 79.9868 192.134 79.9868 190.777 cv
79.9868 187.572 li
77.1748 189.365 73.8584 190.414 70.3335 190.414 cv
cp
.639216 .639216 .639216 rgb
f
60.5337 191.784 mo
61.3242 192.167 62.4917 192.502 63.9082 192.752 cv
65.084 189.738 li
61.8296 188.468 li
60.5337 191.784 li
cp
.741176 .741176 .741176 rgb
f
69.7236 180.82 mo
68.0351 180.82 61.8174 179.786 60.8149 180.936 cv
59.9707 181.905 59.458 183.17 59.458 184.557 cv
59.458 188.972 li
59.458 190.328 64.1728 191.483 69.7988 191.483 cv
75.4258 191.483 79.9868 190.382 79.9868 189.026 cv
79.9868 184.557 li
79.9868 183.17 79.4756 181.905 78.6313 180.936 cv
77.6294 179.786 71.4111 180.82 69.7236 180.82 cv
cp
.235294 .235294 .235294 rgb
f
62.9272 182.665 mo
62.9272 182.665 61.5972 182.298 61.4702 185.708 cv
61.3418 189.118 61.4702 188.858 61.4702 188.858 cv
61.4702 188.858 63.6684 189.89 64.5493 189.97 cv
65.4302 190.049 64.563 184.584 64.5493 183.977 cv
64.5356 183.369 64.6387 182.091 62.9272 182.665 cv
cp
.458824 .45098 .454902 rgb
f
79.0371 181.47 mo
77.8389 182.4 76.8599 184.632 76.8506 185.08 cv
76.8364 185.687 77.375 185.274 76.8506 185.569 cv
76.3926 185.826 76.064 189.882 76.5718 190.861 cv
76.5732 190.86 li
78.562 190.432 79.8506 189.821 79.9756 189.137 cv
79.9756 189.136 li
79.9946 188.474 79.9971 187.358 79.9297 185.569 cv
79.8931 184.574 79.917 184.92 79.9687 184.145 cv
79.895 183.157 79.5605 182.244 79.0371 181.47 cv
cp
.14902 .14902 .14902 rgb
f
60.2124 193.007 mo
55.3384 196.294 li
55.3384 196.294 57.5664 197.474 61.7266 198.021 cv
63.4946 193.811 li
63.4946 193.811 61.9121 193.847 60.2124 193.007 cv
cp
.458824 .45098 .454902 rgb
f
79.0727 221.92 mo
81.8047 220.369 li
81.2153 215.427 li
80.436 215.291 79.709 215.175 79.0727 215.08 cv
77.3208 218.736 73.7495 227.166 73.5161 235.579 cv
73.4878 236.591 73.5151 237.568 73.5659 238.525 cv
80.4385 227.198 li
79.0727 221.92 li
cp
.811765 .207843 .145098 rgb
f
81.2153 215.427 mo
81.8047 220.369 li
79.0727 221.92 li
80.4385 227.198 li
73.5659 238.525 li
73.7876 242.725 74.6811 246.37 75.6304 249.138 cv
87.3193 247.27 li
88.5781 217.239 li
86.3657 216.439 83.5571 215.84 81.2153 215.427 cv
cp
.898039 .298039 .235294 rgb
f
47.2803 219.071 mo
47.9145 218.372 49.1143 217.763 50.5698 217.239 cv
51.8286 247.27 li
42.3955 245.765 li
42.3955 245.765 42.7153 224.091 47.2803 219.071 cv
cp
.807843 .8 .811765 rgb
f
60.0752 221.92 mo
57.3433 220.369 li
57.9326 215.427 li
58.7109 215.291 59.4385 215.175 60.0752 215.08 cv
61.8271 218.736 65.3975 227.166 65.6309 235.579 cv
65.6592 236.591 65.6323 237.568 65.5815 238.525 cv
58.7095 227.198 li
60.0752 221.92 li
cp
.811765 .207843 .145098 rgb
f
57.9326 215.427 mo
57.3433 220.369 li
60.0752 221.92 li
58.7095 227.198 li
65.5815 238.525 li
65.3599 242.725 64.4658 246.37 63.5166 249.138 cv
51.8286 247.27 li
50.5698 217.239 li
52.7817 216.439 55.5908 215.84 57.9326 215.427 cv
cp
.898039 .298039 .235294 rgb
f
361.654 270.515 mo
303.154 270.515 li
301.497 270.515 300.154 269.172 300.154 267.515 cv
300.154 262.159 li
300.154 260.502 301.497 259.159 303.154 259.159 cv
361.654 259.159 li
363.311 259.159 364.654 260.502 364.654 262.159 cv
364.654 267.515 li
364.654 269.172 363.311 270.515 361.654 270.515 cv
f
346.939 251.519 mo
317.869 251.519 li
309.841 251.519 303.334 258.025 303.334 266.054 cv
303.334 274.082 309.841 280.589 317.869 280.589 cv
322.821 280.589 327.189 278.107 329.814 274.324 cv
330.612 273.992 331.484 273.801 332.404 273.801 cv
333.323 273.801 334.194 273.992 334.995 274.324 cv
337.619 278.107 341.987 280.589 346.939 280.589 cv
354.967 280.589 361.475 274.082 361.475 266.054 cv
361.475 258.025 354.967 251.519 346.939 251.519 cv
.2 .2 .2 rgb
f
346.939 277.863 mo
343.073 277.863 339.444 275.96 337.234 272.772 cv
336.778 272.115 li
336.042 271.809 li
334.872 271.321 333.648 271.075 332.404 271.075 cv
331.158 271.075 329.936 271.321 328.766 271.809 cv
328.028 272.115 li
327.574 272.772 li
325.362 275.96 321.733 277.863 317.869 277.863 cv
311.356 277.863 306.06 272.565 306.06 266.054 cv
306.06 259.542 311.356 254.244 317.869 254.244 cv
346.939 254.244 li
353.451 254.244 358.749 259.542 358.749 266.054 cv
358.749 272.565 353.451 277.863 346.939 277.863 cv
.980392 .552941 .0392157 rgb
f
314.162 269.246 mo
309.782 269.129 li
321.609 257.302 li
326.169 257.238 li
314.162 269.246 li
.984314 .643137 .231373 rgb
f
319.601 266.378 mo
325.767 260.211 li
328.073 260.211 li
321.946 266.338 li
319.601 266.378 li
f
337.985 269.88 mo
349.992 257.872 li
354.372 257.989 li
342.545 269.816 li
337.985 269.88 li
f
338.388 266.907 mo
336.081 266.907 li
342.208 260.78 li
344.554 260.74 li
338.388 266.907 li
f
256.975 197.597 mo
256.975 197.597 268.509 191.935 269.419 194.398 cv
270.697 197.854 265.097 205.598 258.546 204.352 cv
251.998 203.107 256.975 197.597 256.975 197.597 cv
cp
.870588 .733333 .505882 rgb
f
232.683 197.597 mo
232.683 197.597 221.148 191.935 220.238 194.398 cv
218.961 197.854 224.562 205.598 231.11 204.352 cv
237.66 203.107 232.683 197.597 232.683 197.597 cv
cp
f
252.987 191.081 mo
252.987 191.081 258.594 187.075 260.806 181.085 cv
260.806 181.085 264.355 190.258 253.812 200.194 cv
248.377 205.314 252.987 191.081 252.987 191.081 cv
cp
.654902 .65098 .658824 rgb
f
236.671 191.081 mo
236.671 191.081 231.064 187.075 228.851 181.085 cv
228.851 181.085 225.303 190.258 235.848 200.194 cv
241.28 205.314 236.671 191.081 236.671 191.081 cv
cp
f
259.955 206.341 mo
259.955 217.221 253.183 227.447 244.828 227.447 cv
236.475 227.447 229.703 217.221 229.703 206.341 cv
229.703 195.461 236.475 188.048 244.828 188.048 cv
253.183 188.048 259.955 195.461 259.955 206.341 cv
cp
.847059 .839216 .85098 rgb
f
257.474 220.622 mo
257.474 226.354 251.812 230.999 244.828 230.999 cv
237.844 230.999 232.183 226.354 232.183 220.622 cv
232.183 214.892 237.844 210.246 244.828 210.246 cv
251.812 210.246 257.474 214.892 257.474 220.622 cv
cp
.870588 .733333 .505882 rgb
f
242.909 219.649 mo
242.909 221.048 241.777 222.179 240.38 222.179 cv
238.983 222.179 237.85 221.048 237.85 219.649 cv
237.85 218.253 238.983 217.121 240.38 217.121 cv
241.777 217.121 242.909 218.253 242.909 219.649 cv
cp
.2 .2 .2 rgb
f
246.748 219.649 mo
246.748 221.048 247.881 222.179 249.276 222.179 cv
250.675 222.179 251.807 221.048 251.807 219.649 cv
251.807 218.253 250.675 217.121 249.276 217.121 cv
247.881 217.121 246.748 218.253 246.748 219.649 cv
cp
f
241.008 200.594 mo
241.008 201.61 240.185 202.434 239.171 202.434 cv
238.153 202.434 237.331 201.61 237.331 200.594 cv
237.331 199.579 238.153 198.756 239.171 198.756 cv
240.185 198.756 241.008 199.579 241.008 200.594 cv
cp
f
248.648 200.594 mo
248.648 201.61 249.472 202.434 250.487 202.434 cv
251.504 202.434 252.327 201.61 252.327 200.594 cv
252.327 199.579 251.504 198.756 250.487 198.756 cv
249.472 198.756 248.648 199.579 248.648 200.594 cv
cp
f
239.229 189.249 mo
239.49 190.196 240.031 190.925 241.008 191.195 cv
245.067 192.317 245.22 193.649 246.748 194.177 cv
248.083 194.639 251.501 194.459 252.327 193.319 cv
253.886 191.165 251.759 191.554 250.475 189.27 cv
248.73 188.476 246.825 188.048 244.828 188.048 cv
242.85 188.048 240.962 188.469 239.229 189.249 cv
cp
f
238.495 225.382 mo
238.495 225.382 239.267 225.497 240.423 225.669 cv
240.705 225.705 241.012 225.745 241.335 225.786 cv
241.654 225.838 241.998 225.842 242.342 225.898 cv
243.04 225.949 243.777 226.008 244.514 226.01 cv
244.883 226.026 245.249 226.02 245.611 226.003 cv
245.974 225.999 246.329 225.983 246.674 225.95 cv
247.362 225.894 248.016 225.826 248.571 225.724 cv
248.855 225.679 249.115 225.637 249.345 225.6 cv
249.57 225.543 249.774 225.506 249.943 225.473 cv
250.282 225.409 250.487 225.382 250.487 225.382 cv
250.487 225.382 250.339 225.514 250.06 225.727 cv
249.783 225.947 249.37 226.24 248.819 226.493 cv
248.551 226.64 248.249 226.773 247.916 226.872 cv
247.587 226.986 247.237 227.116 246.861 227.175 cv
246.118 227.348 245.301 227.441 244.489 227.416 cv
242.858 227.402 241.278 226.95 240.193 226.439 cv
239.095 225.944 238.495 225.382 238.495 225.382 cv
cp
.470588 .368627 .262745 rgb
f
256.273 210.246 mo
257.186 211.408 258.078 212.845 258.754 214.26 cv
259.527 211.762 259.955 209.072 259.955 206.341 cv
259.952 206.192 li
258.796 206.063 258.654 205.193 257.474 205.503 cv
254.756 206.219 254.381 207.845 256.273 210.246 cv
cp
.2 .2 .2 rgb
f
231.975 217.121 mo
233.181 216.026 233.628 213.718 233.387 213.006 cv
233.081 212.11 230.495 212.777 231.371 209.806 cv
231.807 208.329 230.821 207.568 229.718 207.174 cv
229.805 209.899 230.569 214.244 231.975 217.121 cv
cp
f
163.327 201.309 mo
164.02 188.645 li
164.714 201.309 li
163.327 201.309 li
.137255 .121569 .12549 rgb
f
164.076 199.183 mo
164.02 199.105 li
144.019 219.012 li
171.692 219.012 li
184.023 219.012 li
164.076 199.183 li
.376471 .203922 .105882 rgb
f
135.716 208.171 mo
136.41 195.508 li
137.104 208.171 li
135.716 208.171 li
cp
.137255 .121569 .12549 rgb
f
190.516 220.66 mo
191.21 195.508 li
191.903 220.66 li
190.516 220.66 li
cp
f
209.078 243.976 mo
209.078 247.182 li
206.467 247.182 li
206.467 243.976 li
203.37 243.976 li
203.37 247.182 li
200.76 247.182 li
200.76 243.976 li
197.665 243.976 li
197.665 247.182 li
195.055 247.182 li
195.055 243.976 li
194.448 243.976 li
194.448 263.821 li
211.013 263.821 li
211.013 243.976 li
209.078 243.976 li
cp
.690196 .545098 .34902 rgb
f
118.032 243.976 mo
118.032 247.182 li
120.642 247.182 li
120.642 243.976 li
123.739 243.976 li
123.739 247.182 li
126.349 247.182 li
126.349 243.976 li
129.445 243.976 li
129.445 247.182 li
132.055 247.182 li
132.055 243.976 li
132.662 243.976 li
132.662 263.821 li
116.097 263.821 li
116.097 243.976 li
118.032 243.976 li
cp
f
183.986 263.821 mo
143.566 263.821 li
143.566 222.309 li
183.986 222.309 li
183.986 263.821 li
cp
.858824 .721569 .462745 rgb
f
163.776 245.314 mo
160.736 245.314 158.271 246.804 158.271 248.642 cv
158.271 263.821 li
169.282 263.821 li
169.282 248.642 li
169.282 246.804 166.817 245.314 163.776 245.314 cv
cp
.376471 .203922 .105882 rgb
f
151.296 234.741 mo
149.316 234.741 147.709 235.711 147.709 236.906 cv
147.709 241.105 li
154.883 241.105 li
154.883 236.906 li
154.883 235.711 153.277 234.741 151.296 234.741 cv
cp
f
163.776 234.741 mo
161.797 234.741 160.189 235.711 160.189 236.906 cv
160.189 241.105 li
167.363 241.105 li
167.363 236.906 li
167.363 235.711 165.758 234.741 163.776 234.741 cv
cp
f
176.257 234.741 mo
178.238 234.741 179.844 235.711 179.844 236.906 cv
179.844 241.105 li
172.67 241.105 li
172.67 236.906 li
172.67 235.711 174.276 234.741 176.257 234.741 cv
cp
f
155.903 230.461 mo
152.318 230.461 li
152.318 225.342 li
155.903 225.342 li
155.903 230.461 li
cp
.419608 .215686 .121569 rgb
f
162.305 230.461 mo
158.721 230.461 li
158.721 225.342 li
162.305 225.342 li
162.305 230.461 li
cp
f
168.708 230.461 mo
165.124 230.461 li
165.124 225.342 li
168.708 225.342 li
168.708 230.461 li
cp
f
175.111 230.461 mo
171.525 230.461 li
171.525 225.342 li
175.111 225.342 li
175.111 230.461 li
cp
f
144.019 219.012 mo
141.684 222.309 li
186.358 222.309 li
184.023 219.012 li
144.019 219.012 li
cp
.376471 .203922 .105882 rgb
f
198.421 263.821 mo
184 263.821 li
184 230.543 li
198.421 230.543 li
198.421 263.821 li
cp
.792157 .627451 .4 rgb
f
191.21 255.98 mo
189.922 255.98 188.878 256.612 188.878 257.39 cv
188.878 263.821 li
193.543 263.821 li
193.543 257.39 li
193.543 256.612 192.5 255.98 191.21 255.98 cv
cp
.376471 .203922 .105882 rgb
f
187.252 235.887 mo
186.412 235.887 185.732 236.299 185.732 236.808 cv
185.732 238.584 li
188.773 238.584 li
188.773 236.808 li
188.773 236.299 188.09 235.887 187.252 235.887 cv
cp
f
191.21 235.887 mo
190.372 235.887 189.691 236.299 189.691 236.808 cv
189.691 238.584 li
192.73 238.584 li
192.73 236.808 li
192.73 236.299 192.049 235.887 191.21 235.887 cv
cp
f
195.169 235.887 mo
196.009 235.887 196.689 236.299 196.689 236.808 cv
196.689 238.584 li
193.651 238.584 li
193.651 236.808 li
193.651 236.299 194.329 235.887 195.169 235.887 cv
cp
f
187.252 242.628 mo
186.412 242.628 185.732 243.039 185.732 243.546 cv
185.732 245.324 li
188.773 245.324 li
188.773 243.546 li
188.773 243.039 188.09 242.628 187.252 242.628 cv
cp
f
191.21 242.628 mo
190.372 242.628 189.691 243.039 189.691 243.546 cv
189.691 245.324 li
192.73 245.324 li
192.73 243.546 li
192.73 243.039 192.049 242.628 191.21 242.628 cv
cp
f
195.169 242.628 mo
196.009 242.628 196.689 243.039 196.689 243.546 cv
196.689 245.324 li
193.651 245.324 li
193.651 243.546 li
193.651 243.039 194.329 242.628 195.169 242.628 cv
cp
f
187.252 249.368 mo
186.412 249.368 185.732 249.779 185.732 250.286 cv
185.732 252.064 li
188.773 252.064 li
188.773 250.286 li
188.773 249.779 188.09 249.368 187.252 249.368 cv
cp
f
191.21 249.368 mo
190.372 249.368 189.691 249.779 189.691 250.286 cv
189.691 252.064 li
192.73 252.064 li
192.73 250.286 li
192.73 249.779 192.049 249.368 191.21 249.368 cv
cp
f
195.169 249.368 mo
196.009 249.368 196.689 249.779 196.689 250.286 cv
196.689 252.064 li
193.651 252.064 li
193.651 250.286 li
193.651 249.779 194.329 249.368 195.169 249.368 cv
cp
f
191.231 204.698 mo
184.041 229.146 li
198.421 229.146 li
191.231 204.698 li
cp
f
184.041 229.146 mo
183.201 230.543 li
199.261 230.543 li
198.421 229.146 li
184.041 229.146 li
cp
.419608 .215686 .121569 rgb
f
143.601 263.821 mo
129.179 263.821 li
129.179 230.543 li
143.601 230.543 li
143.601 263.821 li
cp
.792157 .627451 .4 rgb
f
136.389 255.98 mo
135.101 255.98 134.058 256.612 134.058 257.39 cv
134.058 263.821 li
138.722 263.821 li
138.722 257.39 li
138.722 256.612 137.679 255.98 136.389 255.98 cv
cp
.376471 .203922 .105882 rgb
f
132.429 235.887 mo
131.591 235.887 130.911 236.299 130.911 236.808 cv
130.911 238.584 li
133.949 238.584 li
133.949 236.808 li
133.949 236.299 133.269 235.887 132.429 235.887 cv
cp
f
136.389 235.887 mo
135.551 235.887 134.871 236.299 134.871 236.808 cv
134.871 238.584 li
137.909 238.584 li
137.909 236.808 li
137.909 236.299 137.229 235.887 136.389 235.887 cv
cp
f
140.348 235.887 mo
141.189 235.887 141.869 236.299 141.869 236.808 cv
141.869 238.584 li
138.829 238.584 li
138.829 236.808 li
138.829 236.299 139.508 235.887 140.348 235.887 cv
cp
f
132.429 242.628 mo
131.591 242.628 130.911 243.039 130.911 243.546 cv
130.911 245.324 li
133.949 245.324 li
133.949 243.546 li
133.949 243.039 133.269 242.628 132.429 242.628 cv
cp
f
136.389 242.628 mo
135.551 242.628 134.871 243.039 134.871 243.546 cv
134.871 245.324 li
137.909 245.324 li
137.909 243.546 li
137.909 243.039 137.229 242.628 136.389 242.628 cv
cp
f
140.348 242.628 mo
141.189 242.628 141.869 243.039 141.869 243.546 cv
141.869 245.324 li
138.829 245.324 li
138.829 243.546 li
138.829 243.039 139.508 242.628 140.348 242.628 cv
cp
f
132.429 249.368 mo
131.591 249.368 130.911 249.779 130.911 250.286 cv
130.911 252.064 li
133.949 252.064 li
133.949 250.286 li
133.949 249.779 133.269 249.368 132.429 249.368 cv
cp
f
136.389 249.368 mo
135.551 249.368 134.871 249.779 134.871 250.286 cv
134.871 252.064 li
137.909 252.064 li
137.909 250.286 li
137.909 249.779 137.229 249.368 136.389 249.368 cv
cp
f
140.348 249.368 mo
141.189 249.368 141.869 249.779 141.869 250.286 cv
141.869 252.064 li
138.829 252.064 li
138.829 250.286 li
138.829 249.779 139.508 249.368 140.348 249.368 cv
cp
f
136.41 204.698 mo
129.22 229.146 li
143.601 229.146 li
136.41 204.698 li
cp
f
129.22 229.146 mo
128.38 230.543 li
144.44 230.543 li
143.601 229.146 li
129.22 229.146 li
cp
.419608 .215686 .121569 rgb
f
147.709 217.186 mo
163.501 201.309 li
161.13 211.198 li
147.709 217.186 li
.501961 .364706 .286275 rgb
f
148.808 318.25 mo
146.961 316.751 144.54 316.002 142.119 316.002 cv
139.697 316.002 137.276 316.751 135.429 318.25 cv
111.007 338.062 li
142.119 338.062 li
173.23 338.062 li
148.808 318.25 li
.898039 .298039 .235294 rgb
f
108.522 341.94 mo
108.522 341.94 108.522 341.072 108.522 340.001 cv
108.522 338.93 109.657 338.063 111.058 338.063 cv
173.18 338.063 li
174.58 338.063 175.715 338.93 175.715 340.001 cv
175.715 341.94 li
108.522 341.94 li
cp
.980392 .552941 .0392157 rgb
f
123.597 368.646 mo
114.553 368.646 li
114.553 341.94 li
123.597 341.94 li
123.597 368.646 li
cp
.807843 .8 .811765 rgb
f
146.642 368.646 mo
137.596 368.646 li
137.596 341.94 li
146.642 341.94 li
146.642 368.646 li
cp
f
169.685 368.646 mo
160.641 368.646 li
160.641 341.94 li
169.685 341.94 li
169.685 368.646 li
cp
f
148.149 373.346 mo
136.088 373.346 li
136.088 368.646 li
148.149 368.646 li
148.149 373.346 li
cp
.792157 .627451 .4 rgb
f
171.193 373.346 mo
159.132 373.346 li
159.132 368.646 li
171.193 368.646 li
171.193 373.346 li
cp
f
125.105 373.346 mo
113.044 373.346 li
113.044 368.646 li
125.105 368.646 li
125.105 373.346 li
cp
f
173.231 378.766 mo
111.007 378.766 li
111.007 374.065 li
173.231 374.065 li
173.231 378.766 li
cp
.329412 .329412 .329412 rgb
f
175.715 384.327 mo
108.522 384.327 li
108.522 379.627 li
175.715 379.627 li
175.715 384.327 li
cp
.2 .2 .2 rgb
f
119.689 333.002 mo
119.689 333.002 138.292 317.64 140.229 317.64 cv
140.229 317.64 140.23 317.64 140.231 317.64 cv
140.235 317.64 140.239 317.64 140.244 317.64 cv
145.362 317.64 144.279 322.537 143.001 323.548 cv
138.147 327.385 119.689 333.002 119.689 333.002 cv
.917647 .439216 .388235 rgb
f
326.924 311.963 mo
345.632 311.381 li
356.319 345.094 li
326.924 311.963 li
.898039 .298039 .235294 rgb
f
356.319 345.094 mo
356.709 344.928 347.417 311.998 347.417 311.998 cv
347.213 311.381 li
356.741 345.508 li
356.319 345.094 li
f
367.007 311.381 mo
385.715 311.961 li
356.237 345.763 li
367.007 311.381 li
.839216 .215686 .14902 rgb
f
356.319 345.094 mo
367.332 311.83 li
384.738 311.83 li
356.319 345.094 li
366.682 310.931 mo
366.478 311.548 li
355.465 344.81 li
355.371 345.096 li
355.708 345.27 356.002 345.492 356.237 345.763 cv
356.411 345.83 356.586 345.896 356.737 345.99 cv
357.004 345.678 li
385.9 311.9 li
366.682 310.931 li
1 1 1 rgb
f
344.684 311.381 mo
367.955 311.381 li
356.319 346.525 li
344.684 311.381 li
.898039 .298039 .235294 rgb
f
356.319 345.094 mo
345.307 311.83 li
367.332 311.83 li
356.319 345.094 li
344.06 310.931 mo
344.452 312.113 li
355.465 345.377 li
355.577 345.715 li
355.89 346.012 355.9 346.227 356.319 346.525 cv
356.376 346.566 356.553 346.301 356.728 346.037 cv
356.893 345.788 357.057 345.539 357.118 345.545 cv
357.174 345.377 li
368.187 312.113 li
368.578 310.931 li
344.06 310.931 li
1 1 1 rgb
f
326.924 311.963 mo
339.35 293.949 li
349.358 293.949 li
346.004 312.281 li
326.924 311.963 li
.898039 .298039 .235294 rgb
f
349.898 293.5 mo
348.818 293.5 li
339.59 293.5 li
339.109 293.5 li
338.843 293.898 li
327.153 311.329 li
326.644 311.906 li
327.576 312.731 li
345.629 312.731 li
346.379 312.731 li
346.515 311.992 li
349.704 294.562 li
349.898 293.5 li
348.818 294.399 mo
345.629 311.83 li
327.9 311.83 li
339.59 294.399 li
348.818 294.399 li
1 1 1 rgb
f
366.964 312.281 mo
363.271 293.949 li
373.291 293.949 li
385.582 312.281 li
366.964 312.281 li
cp
.839216 .215686 .14902 rgb
f
373.531 293.5 mo
373.051 293.5 li
363.82 293.5 li
362.721 293.5 li
362.939 294.577 li
366.45 312.008 li
366.596 312.73 li
367.332 312.73 li
384.738 312.73 li
384.945 312.836 li
385.9 311.9 li
373.798 293.898 li
373.531 293.5 li
cp
373.051 294.399 mo
384.738 311.83 li
367.332 311.83 li
363.82 294.399 li
373.051 294.399 li
cp
1 1 1 rgb
f
345.089 312.281 mo
348.443 293.949 li
364.189 293.949 li
367.882 312.281 li
345.089 312.281 li
.898039 .298039 .235294 rgb
f
364.557 293.5 mo
363.82 293.5 li
348.818 293.5 li
348.068 293.5 li
347.933 294.237 li
344.743 311.668 li
344.549 312.731 li
345.629 312.731 li
367.332 312.731 li
368.432 312.731 li
368.214 311.652 li
364.702 294.222 li
364.557 293.5 li
363.82 294.399 mo
367.332 311.83 li
345.629 311.83 li
348.818 294.399 li
363.82 294.399 li
1 1 1 rgb
f
354.809 343.396 mo
327.349 312.529 li
327.576 312.731 li
327.605 312.731 li
354.807 343.389 li
354.809 343.396 li
f
354.807 343.389 mo
327.605 312.731 li
344.549 312.731 li
344.656 312.731 li
354.807 343.389 li
.956863 .466667 .368627 rgb
f
356.319 345.094 mo
345.605 312.731 li
345.629 312.731 li
356.319 312.731 li
356.319 345.094 li
f
356.319 345.094 mo
354.809 343.396 li
354.807 343.389 li
344.656 312.731 li
345.605 312.731 li
356.319 345.094 li
1 1 1 rgb
f
344.714 311.83 mo
327.9 311.83 li
339.59 294.399 li
347.903 294.399 li
344.743 311.668 li
344.714 311.83 li
.956863 .466667 .368627 rgb
f
344.549 312.731 mo
327.605 312.731 li
327.576 312.731 li
327.349 312.529 li
339.59 294.399 li
327.9 311.83 li
344.714 311.83 li
344.549 312.731 li
1 1 1 rgb
f
356.319 311.83 mo
345.629 311.83 li
348.818 294.399 li
356.319 294.399 li
356.319 311.83 li
.956863 .466667 .368627 rgb
f
356.319 312.731 mo
345.629 312.731 li
345.605 312.731 li
344.656 312.731 li
344.549 312.731 li
344.714 311.83 li
344.743 311.668 li
347.903 294.399 li
348.818 294.399 li
345.629 311.83 li
356.319 311.83 li
356.319 312.731 li
1 1 1 rgb
f
346.232 306.033 mo
348.818 310.001 li
353.1 312.171 li
348.818 314.34 li
346.805 318.309 li
344.135 314.34 li
339.852 312.171 li
344.135 310.001 li
346.232 306.033 li
cp
f
220.574 307.042 mo
220.574 307.964 219.965 308.713 219.215 308.713 cv
218.196 308.713 li
217.446 308.713 216.838 307.964 216.838 307.042 cv
216.838 306.119 217.446 305.371 218.196 305.371 cv
219.215 305.371 li
219.965 305.371 220.574 306.119 220.574 307.042 cv
cp
.678431 .52549 .380392 rgb
f
199.694 295.138 mo
199.694 296.06 199.086 296.809 198.336 296.809 cv
197.316 296.809 li
196.567 296.809 195.959 296.06 195.959 295.138 cv
195.959 294.215 196.567 293.468 197.316 293.468 cv
198.336 293.468 li
199.086 293.468 199.694 294.215 199.694 295.138 cv
cp
f
199.694 299.245 mo
199.694 300.168 199.086 300.916 198.336 300.916 cv
197.316 300.916 li
196.567 300.916 195.959 300.168 195.959 299.245 cv
195.959 298.322 196.567 297.574 197.316 297.574 cv
198.336 297.574 li
199.086 297.574 199.694 298.322 199.694 299.245 cv
cp
f
199.694 303.144 mo
199.694 304.065 199.086 304.815 198.336 304.815 cv
197.316 304.815 li
196.567 304.815 195.959 304.065 195.959 303.144 cv
195.959 302.221 196.567 301.473 197.316 301.473 cv
198.336 301.473 li
199.086 301.473 199.694 302.221 199.694 303.144 cv
cp
f
199.694 307.042 mo
199.694 307.964 199.086 308.713 198.336 308.713 cv
197.316 308.713 li
196.567 308.713 195.959 307.964 195.959 307.042 cv
195.959 306.119 196.567 305.371 197.316 305.371 cv
198.336 305.371 li
199.086 305.371 199.694 306.119 199.694 307.042 cv
cp
f
220.574 295.138 mo
220.574 296.06 219.965 296.809 219.215 296.809 cv
218.196 296.809 li
217.446 296.809 216.838 296.06 216.838 295.138 cv
216.838 294.215 217.446 293.468 218.196 293.468 cv
219.215 293.468 li
219.965 293.468 220.574 294.215 220.574 295.138 cv
cp
f
196.494 315.353 mo
199.158 315.353 li
199.158 290.052 li
196.494 290.052 li
196.494 315.353 li
cp
f
217.282 315.353 mo
219.945 315.353 li
219.945 290.052 li
217.282 290.052 li
217.282 315.353 li
cp
f
220.719 305.845 mo
221.028 306.203 li
221.952 306.272 li
221.896 306.944 li
222.031 307.539 li
222.605 308.393 li
221.13 308.349 li
220.916 308.802 li
221.008 310.147 li
220.195 310.156 li
219.442 310.322 li
218.882 309.592 li
217.951 309.856 li
217.125 309.522 li
218.097 308.103 li
217.36 307.775 li
216.148 307.065 li
216.95 306.376 li
217.905 306.124 li
218.057 305.44 li
218.567 305.005 li
219.152 304.463 li
219.818 305.644 li
220.686 304.527 li
220.719 305.845 li
cp
.788235 .0745098 .231373 rgb
f
220.751 307.386 mo
220.705 307.667 li
221.028 308.119 li
220.695 308.35 li
220.475 308.641 li
220.3 309.234 li
219.754 308.537 li
219.463 308.61 li
218.877 309.171 li
218.562 308.797 li
218.195 308.515 li
218.317 307.977 li
217.838 307.647 li
217.676 307.139 li
218.706 307.042 li
218.572 306.576 li
218.435 305.745 li
219.061 305.852 li
219.544 306.194 li
219.918 306.003 li
220.314 306.071 li
220.788 306.133 li
220.499 306.894 li
221.347 306.866 li
220.751 307.386 li
cp
.909804 .0862745 .266667 rgb
f
195.7 305.845 mo
195.391 306.203 li
194.467 306.272 li
194.523 306.944 li
194.388 307.539 li
193.814 308.393 li
195.289 308.349 li
195.503 308.802 li
195.411 310.147 li
196.224 310.156 li
196.977 310.322 li
197.537 309.592 li
198.468 309.856 li
199.294 309.522 li
198.322 308.103 li
199.059 307.775 li
200.271 307.065 li
199.469 306.376 li
198.514 306.124 li
198.362 305.44 li
197.852 305.005 li
197.267 304.463 li
196.601 305.644 li
195.733 304.527 li
195.7 305.845 li
cp
.788235 .0745098 .231373 rgb
f
195.668 307.386 mo
195.714 307.667 li
195.391 308.119 li
195.724 308.35 li
195.944 308.641 li
196.119 309.234 li
196.665 308.537 li
196.956 308.61 li
197.542 309.171 li
197.857 308.797 li
198.224 308.515 li
198.102 307.977 li
198.581 307.647 li
198.743 307.139 li
197.713 307.042 li
197.847 306.576 li
197.984 305.745 li
197.357 305.852 li
196.875 306.194 li
196.501 306.003 li
196.105 306.071 li
195.631 306.133 li
195.92 306.894 li
195.072 306.866 li
195.668 307.386 li
cp
.909804 .0862745 .266667 rgb
f
228.066 312.061 mo
227.494 311.342 226.413 310.714 225.103 310.175 cv
223.108 309.351 222.379 308.733 219.967 308.308 cv
219.165 308.168 218.415 308.048 217.761 307.95 cv
216.231 307.723 215.208 307.608 215.208 307.608 cv
207.978 306.797 li
200.743 307.608 li
200.743 307.608 198.696 307.835 196.06 308.295 cv
195.983 308.308 li
195.958 308.314 li
193.157 308.806 192.004 309.56 189.925 310.59 cv
189.896 310.605 li
189.614 310.744 189.35 310.89 189.107 311.04 cv
189.059 311.071 li
188.824 311.22 188.606 311.372 188.415 311.53 cv
188.383 311.56 li
188.19 311.723 188.022 311.89 187.883 312.061 cv
183.771 317.232 185.134 339.558 185.134 339.558 cv
207.947 344.023 li
207.947 344.034 li
207.976 344.028 li
208.002 344.034 li
208.002 344.023 li
213.065 343.032 li
222.889 341.109 li
230.815 339.558 li
230.815 339.558 232.181 317.232 228.066 312.061 cv
cp
.917647 .905882 .921569 rgb
f
210.725 307.649 mo
204.541 306.635 202.405 303.085 202.405 303.085 cv
210.961 299.298 li
204.162 299.298 li
202.767 299.298 201.632 300.296 201.632 301.529 cv
201.632 307.273 li
201.632 308.507 202.767 309.504 204.162 309.504 cv
212.256 309.504 li
213.652 309.504 214.784 308.507 214.784 307.273 cv
214.784 307.148 li
213.839 307.677 212.533 307.946 210.725 307.649 cv
cp
.976471 .764706 .580392 rgb
f
212.256 299.298 mo
210.961 299.298 li
201.811 301.929 li
201.811 301.929 203.212 306.699 210.725 307.649 cv
212.54 307.881 213.839 308.251 214.784 307.724 cv
214.784 301.529 li
214.784 300.296 213.652 299.298 212.256 299.298 cv
cp
.819608 .643137 .486275 rgb
f
220.087 288.717 mo
219.771 288.619 219.41 288.844 219.064 289.297 cv
219.072 289.071 219.077 288.853 219.077 288.633 cv
219.077 286.859 218.775 285.308 218.241 283.945 cv
216.169 284.275 214.023 284.005 212.142 282.951 cv
212.073 282.938 li
211.858 282.903 211.689 282.878 211.54 282.853 cv
210.592 282.757 209.644 282.661 208.689 282.624 cv
208.414 282.613 208.008 282.664 207.651 282.718 cv
207.491 282.794 207.348 282.871 207.248 282.939 cv
204.539 284.792 201.121 284.816 198.178 283.627 cv
197.64 285.167 197.342 286.857 197.342 288.633 cv
197.342 288.853 197.345 289.071 197.356 289.297 cv
197.009 288.844 196.646 288.619 196.331 288.717 cv
195.565 288.953 196.582 290.925 197.064 293.164 cv
197.546 295.401 198.807 297.045 199.569 296.809 cv
199.572 296.805 li
201.495 301.626 204.532 306.217 208.209 306.217 cv
211.915 306.217 215.759 302.483 216.877 296.493 cv
217.585 296.291 218.401 294.817 218.818 292.877 cv
219.299 290.638 220.851 288.953 220.087 288.717 cv
cp
1 .847059 .705882 rgb
f
196.494 290.052 mo
196.574 291.016 196.925 291.516 198.383 291.758 cv
209.515 293.611 209.248 278.478 209.248 278.478 cv
199.158 278.007 196.445 283.868 196.494 290.052 cv
cp
.678431 .52549 .380392 rgb
f
219.945 290.052 mo
219.865 291.016 219.515 291.516 218.057 291.758 cv
206.926 293.611 207.192 278.478 207.192 278.478 cv
217.282 278.007 219.994 283.868 219.945 290.052 cv
cp
f
208.03 277.561 mo
202.669 277.561 196.912 282.222 196.912 286.118 cv
196.912 288.098 198.401 288.808 200.565 289.028 cv
201.709 285.637 204.222 283.012 208.115 283.012 cv
211.995 283.012 214.503 285.616 215.653 288.989 cv
217.918 288.749 219.509 288.022 219.509 286.037 cv
219.509 282.141 213.389 277.561 208.03 277.561 cv
cp
f
220.574 299.245 mo
220.574 300.168 219.965 300.916 219.215 300.916 cv
218.196 300.916 li
217.446 300.916 216.838 300.168 216.838 299.245 cv
216.838 298.322 217.446 297.574 218.196 297.574 cv
219.215 297.574 li
219.965 297.574 220.574 298.322 220.574 299.245 cv
cp
f
220.574 303.144 mo
220.574 304.065 219.965 304.815 219.215 304.815 cv
218.196 304.815 li
217.446 304.815 216.838 304.065 216.838 303.144 cv
216.838 302.221 217.446 301.473 218.196 301.473 cv
219.215 301.473 li
219.965 301.473 220.574 302.221 220.574 303.144 cv
cp
f
225.135 310.139 mo
223.593 309.353 222.407 308.755 220.124 308.338 cv
218.524 318.982 li
197.432 318.982 li
195.832 308.338 li
193.549 308.755 192.362 309.353 190.82 310.139 cv
192.147 316.699 194.451 330.263 193.471 341.19 cv
200.989 342.662 li
200.989 342.661 li
207.947 344.023 li
207.947 344.034 li
207.976 344.028 li
208.002 344.034 li
208.002 344.023 li
213.065 343.032 li
214.966 342.66 li
214.966 342.662 li
222.485 341.19 li
221.505 330.263 223.81 316.699 225.135 310.139 cv
cp
.0666667 .0745098 .054902 rgb
f
200.927 321.368 mo
200.927 321.792 200.585 322.135 200.16 322.135 cv
199.736 322.135 199.395 321.792 199.395 321.368 cv
199.395 320.944 199.736 320.602 200.16 320.602 cv
200.585 320.602 200.927 320.944 200.927 321.368 cv
cp
.788235 .0745098 .231373 rgb
f
203.532 321.368 mo
203.532 321.792 203.19 322.135 202.767 322.135 cv
202.342 322.135 202 321.792 202 321.368 cv
202 320.944 202.342 320.602 202.767 320.602 cv
203.19 320.602 203.532 320.944 203.532 321.368 cv
cp
f
206.139 321.368 mo
206.139 321.792 205.796 322.135 205.372 322.135 cv
204.948 322.135 204.606 321.792 204.606 321.368 cv
204.606 320.944 204.948 320.602 205.372 320.602 cv
205.796 320.602 206.139 320.944 206.139 321.368 cv
cp
f
208.744 321.368 mo
208.744 321.792 208.402 322.135 207.978 322.135 cv
207.554 322.135 207.212 321.792 207.212 321.368 cv
207.212 320.944 207.554 320.602 207.978 320.602 cv
208.402 320.602 208.744 320.944 208.744 321.368 cv
cp
f
211.35 321.368 mo
211.35 321.792 211.008 322.135 210.584 322.135 cv
210.159 322.135 209.817 321.792 209.817 321.368 cv
209.817 320.944 210.159 320.602 210.584 320.602 cv
211.008 320.602 211.35 320.944 211.35 321.368 cv
cp
f
213.955 321.368 mo
213.955 321.792 213.613 322.135 213.189 322.135 cv
212.766 322.135 212.423 321.792 212.423 321.368 cv
212.423 320.944 212.766 320.602 213.189 320.602 cv
213.613 320.602 213.955 320.944 213.955 321.368 cv
cp
f
216.562 321.368 mo
216.562 321.792 216.22 322.135 215.795 322.135 cv
215.371 322.135 215.029 321.792 215.029 321.368 cv
215.029 320.944 215.371 320.602 215.795 320.602 cv
216.22 320.602 216.562 320.944 216.562 321.368 cv
cp
f
203.509 324.318 mo
208.116 324.941 li
212.723 324.318 li
203.509 324.318 li
cp
201.42 326.406 mo
208.116 327.349 li
214.812 326.406 li
208.116 325.5 li
201.42 326.406 li
cp
201.043 328.904 mo
208.116 330.32 li
215.189 328.904 li
208.116 327.908 li
201.043 328.904 li
cp
201.804 332.149 mo
208.116 333.497 li
214.428 332.149 li
208.116 330.886 li
201.804 332.149 li
cp
200.853 335.615 mo
208.116 336.876 li
215.38 335.615 li
208.116 334.065 li
200.853 335.615 li
cp
215.795 338.767 mo
215.748 338.762 li
208.116 337.439 li
200.484 338.762 li
200.338 338.793 200.19 338.688 200.164 338.536 cv
200.137 338.386 200.238 338.242 200.389 338.217 cv
206.496 337.157 li
199.347 335.917 li
199.216 335.894 199.12 335.781 199.118 335.648 cv
199.115 335.517 199.207 335.4 199.337 335.373 cv
206.79 333.781 li
200.378 332.411 li
200.25 332.384 200.159 332.271 200.16 332.139 cv
200.16 332.008 200.253 331.895 200.382 331.869 cv
206.705 330.603 li
199.34 329.128 li
199.208 329.102 199.114 328.983 199.118 328.849 cv
199.122 328.714 199.222 328.601 199.356 328.582 cv
206.129 327.628 li
199.356 326.675 li
199.219 326.655 199.117 326.538 199.118 326.399 cv
199.118 326.262 199.22 326.145 199.357 326.126 cv
206.049 325.221 li
199.357 324.315 li
199.213 324.296 199.108 324.168 199.118 324.022 cv
199.128 323.877 199.249 323.764 199.395 323.764 cv
216.838 323.764 li
216.984 323.764 217.105 323.877 217.114 324.022 cv
217.124 324.168 217.02 324.296 216.875 324.315 cv
210.183 325.221 li
216.875 326.126 li
217.012 326.145 217.115 326.262 217.115 326.399 cv
217.115 326.538 217.014 326.655 216.877 326.675 cv
210.103 327.628 li
216.877 328.582 li
217.01 328.601 217.111 328.714 217.115 328.849 cv
217.119 328.983 217.025 329.102 216.892 329.128 cv
209.527 330.603 li
215.849 331.869 li
215.978 331.895 216.071 332.008 216.072 332.139 cv
216.073 332.271 215.981 332.384 215.853 332.411 cv
209.442 333.78 li
216.896 335.373 li
217.025 335.4 217.117 335.517 217.115 335.648 cv
217.112 335.781 217.016 335.894 216.885 335.917 cv
209.736 337.157 li
215.842 338.217 li
215.993 338.242 216.094 338.386 216.068 338.536 cv
216.044 338.671 215.927 338.767 215.795 338.767 cv
cp
.917647 .905882 .921569 rgb
f
77.3672 255.733 mo
77.3672 255.733 62.7183 253.822 51.8887 270.383 cv
41.0605 286.943 21.3149 324.525 35.3276 325.799 cv
49.3413 327.072 55.7109 315.608 62.0801 302.868 cv
68.4502 290.129 87.2026 257.364 77.3672 255.733 cv
cp
.792157 .627451 .4 rgb
f
36.4936 310.535 mo
37.0976 310.486 37.6982 310.464 38.2905 310.389 cv
38.876 310.36 39.457 310.279 40.0146 310.222 cv
40.5625 310.184 41.1147 310.085 41.6152 310.045 cv
42.1099 310.008 42.6216 309.9 43.0469 309.888 cv
43.4741 309.871 43.9297 309.765 44.271 309.782 cv
44.6172 309.799 44.9873 309.736 45.2446 309.772 cv
45.7646 309.837 46.1572 309.875 46.1572 309.875 cv
46.1572 309.875 46.0156 309.584 45.5996 309.071 cv
45.3892 308.819 45.0947 308.607 44.7314 308.345 cv
44.3667 308.053 43.9468 307.878 43.4609 307.636 cv
42.9707 307.392 42.4531 307.264 41.8794 307.083 cv
41.3076 306.916 40.7187 306.826 40.0918 306.721 cv
38.8525 306.552 37.5356 306.518 36.2383 306.596 cv
35.1626 306.675 34.1094 306.839 33.105 307.054 cv
32.6797 308.272 32.2959 309.464 31.9629 310.614 cv
33.395 310.659 34.9487 310.637 36.4936 310.535 cv
cp
.670588 .462745 .188235 rgb
f
51.6733 299.156 mo
51.6504 299.066 51.5845 298.923 51.4673 298.746 cv
51.3525 298.573 51.189 298.365 50.9751 298.149 cv
50.749 297.905 50.4526 297.694 50.0962 297.447 cv
49.9536 297.341 49.8032 297.249 49.6445 297.162 cv
49.3901 297.022 49.1157 296.898 48.8188 296.757 cv
48.3252 296.521 47.8013 296.379 47.2295 296.201 cv
46.6577 296.037 46.0669 295.935 45.4429 295.826 cv
44.2036 295.643 42.8896 295.584 41.5928 295.635 cv
40.206 295.677 38.8398 295.853 37.6123 296.11 cv
37.0854 297.245 36.5718 298.375 36.084 299.497 cv
37.7905 299.642 39.7827 299.666 41.7559 299.575 cv
42.3833 299.544 43.0073 299.528 43.623 299.476 cv
44.2246 299.454 44.8223 299.393 45.3945 299.347 cv
45.9629 299.317 46.5288 299.242 47.0478 299.209 cv
47.5615 299.183 48.0786 299.101 48.5225 299.091 cv
48.6982 299.082 li
49.085 299.06 49.4692 299.003 49.7773 299.023 cv
49.9624 299.03 li
50.2622 299.037 50.5542 299.019 50.7754 299.058 cv
50.9141 299.08 li
51.1616 299.126 51.3779 299.167 51.5078 299.208 cv
51.6294 299.247 51.6973 299.268 51.6973 299.268 cv
51.6733 299.156 li
cp
f
62.7773 278.052 mo
62.7773 278.052 62.7808 277.978 62.7642 277.825 cv
62.7539 277.663 62.6694 277.423 62.4946 277.154 cv
62.3223 276.885 62.0649 276.577 61.7256 276.308 cv
61.4722 276.078 61.168 275.866 60.8257 275.651 cv
60.6738 275.557 60.5161 275.468 60.3501 275.383 cv
60.0942 275.248 59.8232 275.123 59.5366 274.999 cv
59.0342 274.78 58.498 274.607 57.9287 274.441 cv
57.3574 274.279 56.7637 274.153 56.147 274.04 cv
54.9072 273.824 53.5981 273.718 52.3018 273.711 cv
51.4214 273.697 50.5547 273.745 49.7046 273.817 cv
48.9917 274.969 48.2563 276.18 47.5078 277.445 cv
49.0039 277.584 50.6465 277.655 52.2803 277.655 cv
52.9536 277.659 53.6265 277.661 54.2856 277.645 cv
54.9228 277.641 55.5508 277.616 56.1548 277.6 cv
56.7637 277.585 57.3574 277.555 57.9145 277.541 cv
58.4634 277.528 58.9941 277.498 59.4712 277.498 cv
59.6392 277.496 li
60.0547 277.494 60.4507 277.478 60.79 277.504 cv
60.9722 277.518 li
61.2988 277.547 61.5962 277.57 61.8335 277.627 cv
61.9687 277.662 li
62.2236 277.74 62.46 277.817 62.5757 277.909 cv
62.7051 278.003 62.7773 278.052 62.7773 278.052 cv
cp
f
54.7339 266.544 mo
55.6587 266.612 56.5981 266.668 57.543 266.696 cv
60.3325 266.775 63.0884 266.685 65.1103 266.704 cv
65.6152 266.711 66.0835 266.717 66.479 266.763 cv
66.8779 266.809 67.2251 266.861 67.4961 266.953 cv
67.7544 267.049 68 267.143 68.1079 267.261 cv
68.2456 267.38 68.3179 267.444 68.3179 267.444 cv
68.3179 267.444 68.3252 267.354 68.3096 267.158 cv
68.3057 266.962 68.2119 266.672 68.0093 266.356 cv
67.8066 266.04 67.501 265.683 67.1011 265.385 cv
66.708 265.063 66.2353 264.758 65.7031 264.493 cv
63.7436 263.49 61.0659 262.933 58.376 262.785 cv
57.1509 263.865 55.9307 265.114 54.7339 266.544 cv
cp
f
47.0185 288.615 mo
47.6684 288.603 48.3169 288.595 48.9536 288.56 cv
49.5742 288.546 50.1865 288.505 50.7754 288.472 cv
51.3638 288.451 51.9434 288.399 52.4814 288.374 cv
53.0132 288.354 53.5361 288.301 53.9961 288.294 cv
54.1684 288.29 li
54.5693 288.276 54.96 288.241 55.2832 288.264 cv
55.4668 288.274 li
55.7803 288.291 56.0752 288.294 56.3052 288.343 cv
56.4409 288.371 li
56.6924 288.433 56.9184 288.491 57.0415 288.559 cv
57.168 288.624 57.2373 288.658 57.2373 288.658 cv
57.2373 288.658 57.2373 288.604 57.2187 288.489 cv
57.2026 288.364 57.1265 288.173 56.9814 287.949 cv
56.8369 287.729 56.6265 287.471 56.3501 287.228 cv
56.1108 286.992 55.8105 286.78 55.4604 286.55 cv
55.314 286.448 55.1597 286.358 54.998 286.273 cv
54.7417 286.135 54.4697 286.011 54.1782 285.879 cv
53.6797 285.65 53.1489 285.493 52.5786 285.322 cv
52.0078 285.157 51.415 285.043 50.7949 284.934 cv
49.5561 284.734 48.2441 284.65 46.9473 284.673 cv
45.666 284.677 44.4067 284.797 43.2339 284.982 cv
42.6167 286.118 42.0039 287.27 41.3979 288.434 cv
43.0923 288.603 45.0649 288.664 47.0185 288.615 cv
cp
f
77.3672 255.733 mo
77.3672 255.733 77.0083 255.686 76.3618 255.67 cv
77.291 259.23 76.4873 264.865 70.8032 273.71 cv
59.7129 290.969 51.3818 313.232 48.5327 322.257 cv
54.2344 318.053 58.1597 310.708 62.0801 302.868 cv
68.4502 290.129 86.5571 258.548 77.3672 255.733 cv
cp
.690196 .545098 .34902 rgb
f
263.814 382.191 mo
263.814 382.191 259.386 370.293 242.455 368.711 cv
225.524 367.13 189.041 367.21 193.697 378.37 cv
198.355 389.53 209.623 389.769 221.86 389.494 cv
234.098 389.222 266.522 390.319 263.814 382.191 cv
cp
.792157 .627451 .4 rgb
f
205.764 373.129 mo
206.043 373.568 206.302 374.016 206.597 374.435 cv
206.853 374.869 207.148 375.278 207.416 375.679 cv
207.665 376.08 207.961 376.46 208.193 376.824 cv
208.419 377.185 208.707 377.53 208.887 377.849 cv
209.071 378.167 209.335 378.471 209.458 378.736 cv
209.585 379.007 209.78 379.263 209.857 379.473 cv
210.016 379.894 210.145 380.207 210.145 380.207 cv
210.145 380.207 210.309 379.983 210.532 379.462 cv
210.638 379.2 210.682 378.891 210.736 378.51 cv
210.811 378.115 210.775 377.727 210.765 377.26 cv
210.753 376.789 210.642 376.345 210.549 375.836 cv
210.447 375.335 210.278 374.851 210.107 374.332 cv
209.738 373.322 209.235 372.309 208.655 371.354 cv
208.163 370.568 207.616 369.834 207.05 369.157 cv
205.952 369.323 204.894 369.51 203.886 369.718 cv
204.426 370.824 205.067 371.996 205.764 373.129 cv
cp
.670588 .462745 .188235 rgb
f
220.504 380.097 mo
220.564 380.043 220.646 379.935 220.733 379.775 cv
220.818 379.619 220.91 379.411 220.989 379.162 cv
221.084 378.892 221.124 378.582 221.17 378.212 cv
221.192 378.061 221.202 377.909 221.205 377.755 cv
221.209 377.505 221.193 377.247 221.181 376.964 cv
221.163 376.495 221.061 376.04 220.966 375.534 cv
220.861 375.033 220.701 374.543 220.533 374.026 cv
220.176 373.01 219.692 371.988 219.134 371.023 cv
218.545 369.986 217.863 369.019 217.175 368.19 cv
216.101 368.244 215.036 368.308 213.987 368.387 cv
214.564 369.742 215.344 371.266 216.204 372.728 cv
216.481 373.192 216.742 373.661 217.03 374.107 cv
217.288 374.557 217.575 374.986 217.839 375.402 cv
218.089 375.822 218.373 376.222 218.606 376.603 cv
218.834 376.982 219.104 377.343 219.289 377.677 cv
219.366 377.806 li
219.537 378.091 219.735 378.359 219.844 378.603 cv
219.913 378.745 li
220.028 378.976 220.159 379.191 220.219 379.374 cv
220.257 379.489 li
220.321 379.696 220.377 379.876 220.398 379.991 cv
220.418 380.1 220.43 380.16 220.43 380.16 cv
220.504 380.097 li
cp
f
240.998 380.064 mo
240.998 380.064 241.055 380.037 241.164 379.962 cv
241.284 379.89 241.433 379.728 241.566 379.488 cv
241.702 379.249 241.833 378.93 241.901 378.564 cv
241.975 378.279 242.013 377.964 242.038 377.616 cv
242.05 377.463 242.054 377.308 242.052 377.147 cv
242.052 376.899 242.037 376.643 242.017 376.375 cv
241.981 375.905 241.898 375.429 241.795 374.93 cv
241.689 374.43 241.547 373.929 241.385 373.415 cv
241.051 372.386 240.606 371.349 240.092 370.361 cv
239.748 369.685 239.364 369.047 238.968 368.43 cv
237.807 368.35 236.592 368.278 235.33 368.216 cv
235.825 369.409 236.43 370.685 237.086 371.927 cv
237.353 372.441 237.622 372.952 237.898 373.447 cv
238.158 373.93 238.428 374.397 238.684 374.85 cv
238.939 375.307 239.199 375.745 239.434 376.163 cv
239.665 376.575 239.899 376.966 240.091 377.328 cv
240.16 377.455 li
240.329 377.771 240.5 378.065 240.616 378.333 cv
240.68 378.478 li
240.788 378.737 240.89 378.972 240.942 379.176 cv
240.97 379.292 li
241.012 379.517 241.048 379.728 241.024 379.853 cv
241.006 379.988 240.998 380.064 240.998 380.064 cv
cp
f
246.515 369.332 mo
246.834 370.063 247.168 370.798 247.526 371.528 cv
248.585 373.679 249.761 375.737 250.558 377.281 cv
250.755 377.668 250.939 378.026 251.063 378.346 cv
251.188 378.666 251.287 378.951 251.325 379.193 cv
251.357 379.429 251.384 379.653 251.338 379.782 cv
251.302 379.935 251.283 380.016 251.283 380.016 cv
251.283 380.016 251.354 379.985 251.496 379.895 cv
251.644 379.813 251.826 379.625 251.985 379.345 cv
252.144 379.064 252.293 378.688 252.359 378.265 cv
252.446 377.836 252.488 377.354 252.476 376.844 cv
252.45 374.952 251.8 372.694 250.832 370.59 cv
249.52 370.093 248.081 369.668 246.515 369.332 cv
cp
f
226.646 372.328 mo
226.916 372.817 227.182 373.307 227.465 373.776 cv
227.724 374.242 228.001 374.691 228.263 375.126 cv
228.514 375.565 228.786 375.984 229.022 376.384 cv
229.25 376.779 229.501 377.155 229.69 377.501 cv
229.763 377.631 li
229.934 377.931 230.117 378.213 230.23 378.468 cv
230.295 378.61 li
230.408 378.855 230.525 379.081 230.58 379.275 cv
230.613 379.391 li
230.667 379.605 230.713 379.802 230.712 379.922 cv
230.713 380.045 230.714 380.11 230.714 380.11 cv
230.835 380.028 li
230.924 379.966 231.038 379.832 231.15 379.632 cv
231.259 379.434 231.371 379.17 231.445 378.862 cv
231.528 378.587 231.569 378.272 231.604 377.914 cv
231.622 377.762 231.628 377.608 231.628 377.452 cv
231.63 377.201 231.615 376.945 231.599 376.67 cv
231.572 376.2 231.479 375.734 231.38 375.231 cv
231.275 374.731 231.125 374.235 230.959 373.721 cv
230.612 372.699 230.149 371.668 229.612 370.692 cv
229.096 369.72 228.499 368.811 227.887 367.995 cv
226.775 367.981 225.655 367.978 224.527 367.984 cv
225.078 369.341 225.824 370.863 226.646 372.328 cv
cp
f
263.814 382.191 mo
263.814 382.191 263.706 381.9 263.458 381.401 cv
261.126 383.537 256.522 385.189 247.519 384.419 cv
229.952 382.919 209.691 385.525 201.689 386.982 cv
207.173 389.627 214.329 389.662 221.86 389.494 cv
234.098 389.222 265.364 390.304 263.814 382.191 cv
cp
.690196 .545098 .34902 rgb
f
450.021 164.026 mo
0 164.026 li
0 162.974 li
450.021 162.974 li
450.021 164.026 li
cp
.321569 .321569 .321569 rgb
f
450.021 163.5 mo
.0205037 163.5 li
.0205037 0 li
450.021 0 li
450.021 163.5 li
.917647 1 .988235 rgb
f
81.0059 84.4072 mo
81.0059 84.4072 140.786 43.9541 155.903 44.2271 cv
171.02 44.5 180.025 30.5 184.023 28.5 cv
188.02 26.5 213.987 39.5 213.987 39.5 cv
213.987 39.5 276.875 90.5952 283.434 95.6621 cv
289.992 100.729 341.018 112.519 341.018 112.519 cv
341.018 112.519 368.132 89.3115 378.076 85.9058 cv
388.021 82.5 418.903 93.5791 425.962 100.54 cv
433.02 107.5 450.021 116.384 450.021 116.384 cv
450.021 136.528 li
78.1514 108.477 li
81.0059 84.4072 li
.580392 .886275 .976471 rgb
f
443.669 115.536 mo
443.669 115.536 401.627 70.2003 389.844 69.1754 cv
378.061 68.1503 372.595 53.4625 369.706 51.1318 cv
366.818 48.8011 345.204 59.496 345.204 59.496 cv
345.204 59.496 290.71 104.891 285.055 109.365 cv
279.4 113.838 238.437 121.182 238.437 121.182 cv
238.437 121.182 219.901 95.7893 212.543 91.5514 cv
205.185 87.3134 179.96 95.6776 173.71 101.991 cv
167.459 108.304 153.268 115.676 153.268 115.676 cv
151.059 135.7 li
443.25 139.705 li
443.669 115.536 li
f
.0205037 102.148 mo
.0205037 102.148 51.1025 67.3711 66.0615 71.4355 cv
81.0205 75.5 131.123 100.359 134.71 100.359 cv
138.296 100.359 219.021 102.797 225.02 102.148 cv
231.021 101.5 281.204 78.4678 292.112 79.4839 cv
303.021 80.5 399.021 130.548 450.021 131.524 cv
450.021 136.528 li
.0205037 136.528 li
.0205037 102.148 li
.74902 .847059 .968627 rgb
f
450.021 163.5 mo
.0205037 163.5 li
.0205037 136.528 li
450.021 136.528 li
450.021 163.5 li
.454902 .560784 .219608 rgb
f
450.021 156.271 mo
0 156.271 li
0 142.076 li
450.021 142.076 li
450.021 156.271 li
.388235 .478431 .188235 rgb
f
211.218 101.286 mo
175.968 101.286 li
175.968 44.5295 li
211.218 44.5295 li
211.218 101.286 li
.443137 .192157 .0431373 rgb
f
186.811 58.4277 mo
185.172 56.7705 li
185.172 48.9626 li
186.811 47.3065 li
186.811 58.4277 li
.337255 .117647 .027451 rgb
f
179.107 58.4277 mo
180.747 56.7705 li
180.747 48.9626 li
179.107 47.3065 li
179.107 58.4277 li
.580392 .298039 .180392 rgb
f
180.747 56.7886 mo
180.747 48.9455 li
185.172 48.9455 li
185.172 56.7886 li
180.747 56.7886 li
.490196 .203922 .0901961 rgb
f
185.218 48.9455 mo
180.701 48.9455 li
179.107 47.3065 li
186.811 47.3065 li
185.218 48.9455 li
.658824 .321569 .176471 rgb
f
185.218 56.7886 mo
180.701 56.7886 li
179.107 58.4277 li
186.811 58.4277 li
185.218 56.7886 li
.45098 .219608 .121569 rgb
f
197.907 58.4277 mo
196.269 56.7705 li
196.269 48.9626 li
197.907 47.3065 li
197.907 58.4277 li
.337255 .117647 .027451 rgb
f
190.204 58.4277 mo
191.842 56.7705 li
191.842 48.9626 li
190.204 47.3065 li
190.204 58.4277 li
.580392 .298039 .180392 rgb
f
191.842 56.7886 mo
191.842 48.9455 li
196.269 48.9455 li
196.269 56.7886 li
191.842 56.7886 li
.490196 .203922 .0901961 rgb
f
196.315 48.9455 mo
191.796 48.9455 li
190.204 47.3065 li
197.907 47.3065 li
196.315 48.9455 li
.658824 .321569 .176471 rgb
f
196.315 56.7886 mo
191.796 56.7886 li
190.204 58.4277 li
197.907 58.4277 li
196.315 56.7886 li
.45098 .219608 .121569 rgb
f
209.003 58.4277 mo
207.364 56.7705 li
207.364 48.9626 li
209.003 47.3065 li
209.003 58.4277 li
.337255 .117647 .027451 rgb
f
201.299 58.4277 mo
202.939 56.7705 li
202.939 48.9626 li
201.299 47.3065 li
201.299 58.4277 li
.580392 .298039 .180392 rgb
f
202.939 56.7886 mo
202.939 48.9455 li
207.364 48.9455 li
207.364 56.7886 li
202.939 56.7886 li
.490196 .203922 .0901961 rgb
f
207.411 48.9455 mo
202.895 48.9455 li
201.299 47.3065 li
209.003 47.3065 li
207.411 48.9455 li
.658824 .321569 .176471 rgb
f
207.411 56.7886 mo
202.895 56.7886 li
201.299 58.4277 li
209.003 58.4277 li
207.411 56.7886 li
cp
.45098 .219608 .121569 rgb
f
186.811 71.6471 mo
185.172 69.99 li
185.172 62.1819 li
186.811 60.5238 li
186.811 71.6471 li
.337255 .117647 .027451 rgb
f
179.107 71.6471 mo
180.747 69.99 li
180.747 62.1819 li
179.107 60.5238 li
179.107 71.6471 li
.580392 .298039 .180392 rgb
f
180.747 70.007 mo
180.747 62.1637 li
185.172 62.1637 li
185.172 70.007 li
180.747 70.007 li
.490196 .203922 .0901961 rgb
f
185.218 62.1637 mo
180.701 62.1637 li
179.107 60.5238 li
186.811 60.5238 li
185.218 62.1637 li
.658824 .321569 .176471 rgb
f
185.218 70.007 mo
180.701 70.007 li
179.107 71.6471 li
186.811 71.6471 li
185.218 70.007 li
.45098 .219608 .121569 rgb
f
175.968 79.1225 mo
175.968 44.5295 li
211.218 44.5295 li
211.218 52.037 li
210.474 52.2227 209.735 52.424 209.003 52.64 cv
209.003 47.3065 li
201.299 47.3065 li
201.299 55.5603 li
200.147 56.0989 199.017 56.6756 197.907 57.2899 cv
197.907 47.3065 li
190.204 47.3065 li
190.204 58.4277 li
195.948 58.4277 li
192.671 60.4196 189.61 62.7407 186.811 65.3432 cv
186.811 60.5238 li
179.107 60.5238 li
179.107 71.6471 li
180.983 71.6471 li
179.119 73.9962 177.439 76.4962 175.968 79.1225 cv
179.107 58.4277 mo
179.107 58.4277 li
186.811 58.4277 li
186.811 47.3065 li
179.107 47.3065 li
179.107 58.4277 li
185.19 56.7886 mo
180.729 56.7886 li
180.747 56.7705 li
180.747 48.9626 li
180.73 48.9455 li
180.747 48.9455 li
180.747 56.7886 li
185.172 56.7886 li
185.172 56.7705 li
185.19 56.7886 li
185.172 48.9626 mo
185.172 48.9455 li
185.189 48.9455 li
185.172 48.9626 li
.498039 .27451 .141176 rgb
f
186.811 58.4277 mo
186.811 58.4277 li
185.218 56.7886 li
185.19 56.7886 li
185.172 56.7705 li
185.172 48.9626 li
185.189 48.9455 li
185.218 48.9455 li
186.811 47.3065 li
186.811 58.4277 li
.403922 .207843 .12549 rgb
f
179.107 58.4277 mo
179.107 47.3065 li
180.701 48.9455 li
180.73 48.9455 li
180.747 48.9626 li
180.747 56.7705 li
180.729 56.7886 li
180.701 56.7886 li
179.107 58.4277 li
.623529 .368627 .262745 rgb
f
196.287 56.7886 mo
191.824 56.7886 li
191.842 56.7705 li
191.842 48.9626 li
191.825 48.9455 li
191.842 48.9455 li
191.842 56.7886 li
196.269 56.7886 li
196.269 56.7705 li
196.287 56.7886 li
202.939 54.8259 mo
202.939 48.9626 li
202.922 48.9455 li
202.939 48.9455 li
202.939 54.8259 li
202.939 54.8259 li
207.364 48.9626 mo
207.364 48.9455 li
207.381 48.9455 li
207.364 48.9626 li
196.269 48.9626 mo
196.269 48.9455 li
196.286 48.9455 li
196.269 48.9626 li
.498039 .27451 .141176 rgb
f
185.172 56.7886 mo
180.747 56.7886 li
180.747 48.9455 li
185.172 48.9455 li
185.172 48.9626 li
185.172 56.7705 li
185.172 56.7886 li
.541176 .286275 .184314 rgb
f
185.218 48.9455 mo
185.189 48.9455 li
185.172 48.9455 li
180.747 48.9455 li
180.73 48.9455 li
180.701 48.9455 li
179.107 47.3065 li
186.811 47.3065 li
185.218 48.9455 li
.694118 .392157 .258824 rgb
f
186.811 58.4277 mo
179.107 58.4277 li
180.701 56.7886 li
180.729 56.7886 li
185.19 56.7886 li
185.218 56.7886 li
186.811 58.4277 li
.505882 .298039 .211765 rgb
f
197.193 57.6924 mo
196.315 56.7886 li
196.287 56.7886 li
196.269 56.7705 li
196.269 48.9626 li
196.286 48.9455 li
196.315 48.9455 li
197.907 47.3065 li
197.907 57.2899 li
197.668 57.4224 197.43 57.5565 197.193 57.6924 cv
.403922 .207843 .12549 rgb
f
190.204 58.4277 mo
190.204 47.3065 li
191.796 48.9455 li
191.825 48.9455 li
191.842 48.9626 li
191.842 56.7705 li
191.824 56.7886 li
191.796 56.7886 li
190.204 58.4277 li
.623529 .368627 .262745 rgb
f
196.269 56.7886 mo
191.842 56.7886 li
191.842 48.9455 li
196.269 48.9455 li
196.269 48.9626 li
196.269 56.7705 li
196.269 56.7886 li
.541176 .286275 .184314 rgb
f
196.315 48.9455 mo
196.286 48.9455 li
196.269 48.9455 li
191.842 48.9455 li
191.825 48.9455 li
191.796 48.9455 li
190.204 47.3065 li
197.907 47.3065 li
196.315 48.9455 li
.694118 .392157 .258824 rgb
f
195.948 58.4277 mo
190.204 58.4277 li
191.796 56.7886 li
191.824 56.7886 li
196.287 56.7886 li
196.315 56.7886 li
197.193 57.6924 li
196.775 57.9322 196.359 58.1774 195.948 58.4277 cv
.505882 .298039 .211765 rgb
f
207.364 53.1519 mo
207.364 48.9626 li
207.381 48.9455 li
207.411 48.9455 li
209.003 47.3065 li
209.003 52.64 li
208.453 52.8024 207.908 52.9727 207.364 53.1519 cv
.403922 .207843 .12549 rgb
f
201.299 55.5603 mo
201.299 47.3065 li
202.895 48.9455 li
202.922 48.9455 li
202.939 48.9626 li
202.939 54.8259 li
202.388 55.0621 201.842 55.3068 201.299 55.5603 cv
.623529 .368627 .262745 rgb
f
202.939 54.8259 mo
202.939 48.9455 li
207.364 48.9455 li
207.364 48.9626 li
207.364 53.1519 li
205.862 53.6472 204.385 54.2068 202.939 54.8259 cv
.541176 .286275 .184314 rgb
f
207.411 48.9455 mo
207.381 48.9455 li
207.364 48.9455 li
202.939 48.9455 li
202.922 48.9455 li
202.895 48.9455 li
201.299 47.3065 li
209.003 47.3065 li
207.411 48.9455 li
.694118 .392157 .258824 rgb
f
182.335 70.007 mo
180.731 70.007 li
180.747 69.99 li
180.747 62.1819 li
180.729 62.1637 li
180.747 62.1637 li
180.747 70.007 li
182.335 70.007 li
182.335 70.007 li
185.172 62.1819 mo
185.172 62.1637 li
185.19 62.1637 li
185.172 62.1819 li
.498039 .27451 .141176 rgb
f
185.172 66.9298 mo
185.172 62.1819 li
185.19 62.1637 li
185.218 62.1637 li
186.811 60.5238 li
186.811 65.3432 li
186.255 65.8606 185.707 66.3906 185.172 66.9298 cv
.403922 .207843 .12549 rgb
f
179.107 71.6471 mo
179.107 60.5238 li
180.701 62.1637 li
180.729 62.1637 li
180.747 62.1819 li
180.747 69.99 li
180.731 70.007 li
180.701 70.007 li
179.107 71.6471 li
.623529 .368627 .262745 rgb
f
182.335 70.007 mo
180.747 70.007 li
180.747 62.1637 li
185.172 62.1637 li
185.172 62.1819 li
185.172 66.9298 li
184.189 67.9201 183.242 68.9467 182.335 70.007 cv
.541176 .286275 .184314 rgb
f
185.218 62.1637 mo
185.19 62.1637 li
185.172 62.1637 li
180.747 62.1637 li
180.729 62.1637 li
180.701 62.1637 li
179.107 60.5238 li
186.811 60.5238 li
185.218 62.1637 li
.694118 .392157 .258824 rgb
f
180.983 71.6471 mo
179.107 71.6471 li
180.701 70.007 li
180.731 70.007 li
182.335 70.007 li
181.873 70.5456 181.424 71.0913 180.983 71.6471 cv
.505882 .298039 .211765 rgb
f
197.907 71.6471 mo
196.269 69.9899 li
196.269 62.1819 li
197.907 60.5238 li
197.907 71.6471 li
cp
.337255 .117647 .027451 rgb
f
190.204 71.6471 mo
191.842 69.9899 li
191.842 62.1819 li
190.204 60.5238 li
190.204 71.6471 li
cp
.580392 .298039 .180392 rgb
f
191.842 70.007 mo
191.842 62.1638 li
196.269 62.1638 li
196.269 70.007 li
191.842 70.007 li
cp
.490196 .203922 .0901961 rgb
f
196.315 62.1638 mo
191.796 62.1638 li
190.204 60.5238 li
197.907 60.5238 li
196.315 62.1638 li
cp
.658824 .321569 .176471 rgb
f
196.315 70.007 mo
191.796 70.007 li
190.204 71.6471 li
197.907 71.6471 li
196.315 70.007 li
cp
.45098 .219608 .121569 rgb
f
209.003 71.6471 mo
207.364 69.9899 li
207.364 62.1819 li
209.003 60.5238 li
209.003 71.6471 li
cp
.337255 .117647 .027451 rgb
f
201.299 71.6471 mo
202.939 69.9899 li
202.939 62.1819 li
201.299 60.5238 li
201.299 71.6471 li
cp
.580392 .298039 .180392 rgb
f
202.939 70.007 mo
202.939 62.1638 li
207.364 62.1638 li
207.364 70.007 li
202.939 70.007 li
cp
.490196 .203922 .0901961 rgb
f
207.411 62.1638 mo
202.895 62.1638 li
201.299 60.5238 li
209.003 60.5238 li
207.411 62.1638 li
cp
.658824 .321569 .176471 rgb
f
207.411 70.007 mo
202.895 70.007 li
201.299 71.6471 li
209.003 71.6471 li
207.411 70.007 li
cp
.45098 .219608 .121569 rgb
f
186.811 84.8643 mo
185.172 83.2082 li
185.172 75.3991 li
186.811 73.7432 li
186.811 84.8643 li
cp
.337255 .117647 .027451 rgb
f
179.107 84.8643 mo
180.747 83.2082 li
180.747 75.3991 li
179.107 73.7432 li
179.107 84.8643 li
cp
.580392 .298039 .180392 rgb
f
180.747 83.2253 mo
180.747 75.3821 li
185.172 75.3821 li
185.172 83.2253 li
180.747 83.2253 li
cp
.490196 .203922 .0901961 rgb
f
185.218 75.3821 mo
180.701 75.3821 li
179.107 73.7432 li
186.811 73.7432 li
185.218 75.3821 li
cp
.658824 .321569 .176471 rgb
f
185.218 83.2253 mo
180.701 83.2253 li
179.107 84.8643 li
186.811 84.8643 li
185.218 83.2253 li
cp
.45098 .219608 .121569 rgb
f
197.907 84.8643 mo
196.269 83.2082 li
196.269 75.3991 li
197.907 73.7432 li
197.907 84.8643 li
cp
.337255 .117647 .027451 rgb
f
190.204 84.8643 mo
191.842 83.2082 li
191.842 75.3991 li
190.204 73.7432 li
190.204 84.8643 li
cp
.580392 .298039 .180392 rgb
f
191.842 83.2253 mo
191.842 75.3821 li
196.269 75.3821 li
196.269 83.2253 li
191.842 83.2253 li
cp
.490196 .203922 .0901961 rgb
f
196.315 75.3821 mo
191.796 75.3821 li
190.204 73.7432 li
197.907 73.7432 li
196.315 75.3821 li
cp
.658824 .321569 .176471 rgb
f
196.315 83.2253 mo
191.796 83.2253 li
190.204 84.8643 li
197.907 84.8643 li
196.315 83.2253 li
cp
.45098 .219608 .121569 rgb
f
209.003 84.8643 mo
207.364 83.2082 li
207.364 75.3991 li
209.003 73.7432 li
209.003 84.8643 li
cp
.337255 .117647 .027451 rgb
f
201.299 84.8643 mo
202.939 83.2082 li
202.939 75.3991 li
201.299 73.7432 li
201.299 84.8643 li
cp
.580392 .298039 .180392 rgb
f
202.939 83.2253 mo
202.939 75.3821 li
207.364 75.3821 li
207.364 83.2253 li
202.939 83.2253 li
cp
.490196 .203922 .0901961 rgb
f
207.411 75.3821 mo
202.895 75.3821 li
201.299 73.7432 li
209.003 73.7432 li
207.411 75.3821 li
cp
.658824 .321569 .176471 rgb
f
207.411 83.2253 mo
202.895 83.2253 li
201.299 84.8643 li
209.003 84.8643 li
207.411 83.2253 li
cp
.45098 .219608 .121569 rgb
f
186.811 98.0825 mo
185.172 96.4266 li
185.172 88.6196 li
186.811 86.9614 li
186.811 98.0825 li
cp
.337255 .117647 .027451 rgb
f
179.107 98.0825 mo
180.747 96.4266 li
180.747 88.6196 li
179.107 86.9614 li
179.107 98.0825 li
cp
.580392 .298039 .180392 rgb
f
180.747 96.4436 mo
180.747 88.6004 li
185.172 88.6004 li
185.172 96.4436 li
180.747 96.4436 li
cp
.490196 .203922 .0901961 rgb
f
185.218 88.6004 mo
180.701 88.6004 li
179.107 86.9614 li
186.811 86.9614 li
185.218 88.6004 li
cp
.658824 .321569 .176471 rgb
f
185.218 96.4436 mo
180.701 96.4436 li
179.107 98.0825 li
186.811 98.0825 li
185.218 96.4436 li
cp
.45098 .219608 .121569 rgb
f
197.907 98.0825 mo
196.269 96.4266 li
196.269 88.6196 li
197.907 86.9614 li
197.907 98.0825 li
cp
.337255 .117647 .027451 rgb
f
190.204 98.0825 mo
191.842 96.4266 li
191.842 88.6196 li
190.204 86.9614 li
190.204 98.0825 li
cp
.580392 .298039 .180392 rgb
f
191.842 96.4436 mo
191.842 88.6004 li
196.269 88.6004 li
196.269 96.4436 li
191.842 96.4436 li
cp
.490196 .203922 .0901961 rgb
f
196.315 88.6004 mo
191.796 88.6004 li
190.204 86.9614 li
197.907 86.9614 li
196.315 88.6004 li
cp
.658824 .321569 .176471 rgb
f
196.315 96.4436 mo
191.796 96.4436 li
190.204 98.0825 li
197.907 98.0825 li
196.315 96.4436 li
cp
.45098 .219608 .121569 rgb
f
209.003 98.0825 mo
207.364 96.4266 li
207.364 88.6196 li
209.003 86.9614 li
209.003 98.0825 li
cp
.337255 .117647 .027451 rgb
f
201.299 98.0825 mo
202.939 96.4266 li
202.939 88.6196 li
201.299 86.9614 li
201.299 98.0825 li
cp
.580392 .298039 .180392 rgb
f
202.939 96.4436 mo
202.939 88.6004 li
207.364 88.6004 li
207.364 96.4436 li
202.939 96.4436 li
cp
.490196 .203922 .0901961 rgb
f
207.411 88.6004 mo
202.895 88.6004 li
201.299 86.9614 li
209.003 86.9614 li
207.411 88.6004 li
cp
.658824 .321569 .176471 rgb
f
207.411 96.4436 mo
202.895 96.4436 li
201.299 98.0825 li
209.003 98.0825 li
207.411 96.4436 li
cp
.45098 .219608 .121569 rgb
f
275.737 76.8899 mo
268.422 75.8926 264.042 70.7391 262.61 64.7501 cv
262.312 64.1725 262.047 63.5859 261.814 62.9801 cv
260.61 63.2332 259.358 63.3206 258.077 63.2119 cv
255.191 62.9609 252.67 62.4009 249.967 61.6038 cv
249.882 61.5825 li
249.322 61.5825 248.766 61.6246 248.205 61.6635 cv
247.5 61.8547 244.434 62.4063 243.987 62.5042 cv
242.551 62.8149 241.121 63.1117 239.673 63.3733 cv
237.086 63.8444 234.511 63.7932 232.073 63.335 cv
227.23 67.377 221.887 69.675 216.778 73.1693 cv
216.034 75.3363 215.286 77.4697 214.297 79.5856 cv
209.237 90.4104 200.109 97.9706 192.157 106.564 cv
191.633 107.133 191.096 107.637 190.548 108.104 cv
210.067 149.31 li
319.628 149.31 li
275.737 76.8899 li
cp
.501961 .619608 .243137 rgb
f
184.91 96.2044 mo
191.384 109.874 li
197.092 111.373 li
231.357 60.373 li
184.91 96.2044 li
cp
.623529 .756863 .286275 rgb
f
248.789 43.1021 mo
229.558 61.7684 li
222.717 73.2359 li
239.66 66.3214 li
252.269 78.6003 li
252.815 77.8507 li
249.687 44.5349 li
248.789 43.1021 li
cp
.94902 .94902 .94902 rgb
f
274.91 75.5222 mo
269.079 67.0977 li
261.759 65.584 li
285.549 118.003 li
294.955 149.31 li
319.628 149.31 li
274.91 75.5222 li
cp
.454902 .560784 .219608 rgb
f
163.478 120.616 mo
164.66 101.196 li
169.964 85.2793 li
165.991 86.9652 li
122.864 149.31 li
156.07 149.31 li
166.865 128.059 li
163.478 120.616 li
cp
.329412 .329412 .329412 rgb
f
246.958 149.31 mo
215.036 117.394 li
193.295 105.15 li
187.834 93.4512 li
186.433 92.9877 185.183 92.3397 184.057 91.5639 cv
178.052 91.5394 173.72 88.9281 171.058 85.1722 cv
169.964 85.2793 li
164.66 101.196 li
163.478 120.616 li
166.865 128.059 li
156.07 149.31 li
246.958 149.31 li
cp
.2 .2 .2 rgb
f
280.048 125.253 mo
269.079 123.03 li
251.259 115.88 li
226.401 128.756 li
240.637 149.31 li
314.051 149.31 li
280.048 125.253 li
cp
.623529 .756863 .286275 rgb
f
199.257 133.657 mo
184.91 133.657 li
160.873 138.686 li
154.899 128.059 li
127.309 143.641 li
122.864 149.31 li
202.688 149.31 li
199.257 133.657 li
cp
.623529 .756863 .282353 rgb
f
218.699 138.686 mo
228.808 132.93 li
233.478 121.733 li
207.896 133.657 li
184.91 149.31 li
219.386 149.31 li
220.63 143.732 li
218.699 138.686 li
cp
.631373 .364706 .207843 rgb
f
260.374 133.657 mo
235.777 118.003 li
233.478 121.733 li
228.808 132.93 li
218.699 138.686 li
220.63 143.732 li
219.386 149.31 li
276.029 149.31 li
260.374 133.657 li
cp
.337255 .196078 .109804 rgb
f
226.313 125.738 mo
230.468 125.461 li
233.478 121.733 li
238.255 128.059 li
238.255 124.056 li
247.37 125.38 li
235.777 118.003 li
224.24 126.252 li
226.313 125.738 li
cp
.901961 .901961 .901961 rgb
f
177.237 70.7466 mo
165.991 86.9652 li
166.714 88.0607 166.835 91.7393 166.835 91.7393 cv
166.835 91.7393 170.407 92.0925 170.465 92.7873 cv
170.61 94.4838 170.681 95.4178 170.681 95.4178 cv
175.216 91.3636 li
178.88 93.7869 li
179.154 93.5989 li
177.356 71.2154 li
177.237 70.7466 li
cp
.94902 .94902 .94902 rgb
f
177.356 71.2154 mo
179.154 93.5989 li
182.201 91.5059 li
186.457 96.2044 li
188.031 93.8445 li
177.356 71.2154 li
cp
.901961 .901961 .901961 rgb
f
269.079 67.0977 mo
249.687 44.5349 li
252.815 77.8507 li
261.759 65.584 li
269.079 67.0977 li
cp
f
81.3832 62.6402 mo
82.3465 45.0586 li
83.3099 62.6402 li
81.3832 62.6402 li
.137255 .121569 .12549 rgb
f
82.4238 59.6883 mo
82.3465 59.5797 li
54.5763 87.2193 li
92.9982 87.2193 li
110.118 87.2193 li
82.4238 59.6883 li
.376471 .203922 .105882 rgb
f
43.0486 72.1676 mo
44.012 54.586 li
44.9754 72.1676 li
43.0486 72.1676 li
cp
.137255 .121569 .12549 rgb
f
119.132 89.5078 mo
120.096 54.586 li
121.059 89.5078 li
119.132 89.5078 li
cp
f
144.904 121.879 mo
144.904 126.33 li
141.28 126.33 li
141.28 121.879 li
136.979 121.879 li
136.979 126.33 li
133.356 126.33 li
133.356 121.879 li
129.059 121.879 li
129.059 126.33 li
125.435 126.33 li
125.435 121.879 li
124.591 121.879 li
124.591 149.433 li
147.591 149.433 li
147.591 121.879 li
144.904 121.879 li
cp
.690196 .545098 .34902 rgb
f
18.4961 121.879 mo
18.4961 126.33 li
22.1193 126.33 li
22.1193 121.879 li
26.4193 121.879 li
26.4193 126.33 li
30.0425 126.33 li
30.0425 121.879 li
34.3412 121.879 li
34.3412 126.33 li
37.965 126.33 li
37.965 121.879 li
38.8085 121.879 li
38.8085 149.433 li
15.8091 149.433 li
15.8091 121.879 li
18.4961 121.879 li
cp
f
110.067 149.433 mo
53.9476 149.433 li
53.9476 91.7963 li
110.067 91.7963 li
110.067 149.433 li
cp
.858824 .721569 .462745 rgb
f
82.0072 123.736 mo
77.7861 123.736 74.3632 125.806 74.3632 128.358 cv
74.3632 149.433 li
89.6516 149.433 li
89.6516 128.358 li
89.6516 125.806 86.2292 123.736 82.0072 123.736 cv
cp
.376471 .203922 .105882 rgb
f
64.6792 109.058 mo
61.9308 109.058 59.6994 110.405 59.6994 112.064 cv
59.6994 117.893 li
69.6595 117.893 li
69.6595 112.064 li
69.6595 110.405 67.4307 109.058 64.6792 109.058 cv
cp
f
82.0072 109.058 mo
79.2588 109.058 77.0274 110.405 77.0274 112.064 cv
77.0274 117.893 li
86.9875 117.893 li
86.9875 112.064 li
86.9875 110.405 84.7587 109.058 82.0072 109.058 cv
cp
f
99.3351 109.058 mo
102.086 109.058 104.316 110.405 104.316 112.064 cv
104.316 117.893 li
94.3553 117.893 li
94.3553 112.064 li
94.3553 110.405 96.5847 109.058 99.3351 109.058 cv
cp
f
71.0763 103.115 mo
66.0981 103.115 li
66.0981 96.0077 li
71.0763 96.0077 li
71.0763 103.115 li
cp
.419608 .215686 .121569 rgb
f
79.9643 103.115 mo
74.9883 103.115 li
74.9883 96.0077 li
79.9643 96.0077 li
79.9643 103.115 li
cp
f
88.8539 103.115 mo
83.8778 103.115 li
83.8778 96.0077 li
88.8539 96.0077 li
88.8539 103.115 li
cp
f
97.7441 103.115 mo
92.7654 103.115 li
92.7654 96.0077 li
97.7441 96.0077 li
97.7441 103.115 li
cp
f
54.5763 87.2194 mo
51.3346 91.7963 li
113.36 91.7963 li
110.118 87.2194 li
54.5763 87.2194 li
cp
.376471 .203922 .105882 rgb
f
130.108 149.433 mo
110.086 149.433 li
110.086 103.229 li
130.108 103.229 li
130.108 149.433 li
cp
.792157 .627451 .4 rgb
f
120.096 138.547 mo
118.308 138.547 116.859 139.424 116.859 140.503 cv
116.859 149.433 li
123.336 149.433 li
123.336 140.503 li
123.336 139.424 121.887 138.547 120.096 138.547 cv
cp
.376471 .203922 .105882 rgb
f
114.602 110.649 mo
113.435 110.649 112.491 111.22 112.491 111.927 cv
112.491 114.393 li
116.713 114.393 li
116.713 111.927 li
116.713 111.22 115.764 110.649 114.602 110.649 cv
cp
f
120.096 110.649 mo
118.932 110.649 117.988 111.22 117.988 111.927 cv
117.988 114.393 li
122.206 114.393 li
122.206 111.927 li
122.206 111.22 121.261 110.649 120.096 110.649 cv
cp
f
125.593 110.649 mo
126.76 110.649 127.704 111.22 127.704 111.927 cv
127.704 114.393 li
123.486 114.393 li
123.486 111.927 li
123.486 111.22 124.426 110.649 125.593 110.649 cv
cp
f
114.602 120.008 mo
113.435 120.008 112.491 120.579 112.491 121.283 cv
112.491 123.751 li
116.713 123.751 li
116.713 121.283 li
116.713 120.579 115.764 120.008 114.602 120.008 cv
cp
f
120.096 120.008 mo
118.932 120.008 117.988 120.579 117.988 121.283 cv
117.988 123.751 li
122.206 123.751 li
122.206 121.283 li
122.206 120.579 121.261 120.008 120.096 120.008 cv
cp
f
125.593 120.008 mo
126.76 120.008 127.704 120.579 127.704 121.283 cv
127.704 123.751 li
123.486 123.751 li
123.486 121.283 li
123.486 120.579 124.426 120.008 125.593 120.008 cv
cp
f
114.602 129.366 mo
113.435 129.366 112.491 129.937 112.491 130.641 cv
112.491 133.11 li
116.713 133.11 li
116.713 130.641 li
116.713 129.937 115.764 129.366 114.602 129.366 cv
cp
f
120.096 129.366 mo
118.932 129.366 117.988 129.937 117.988 130.641 cv
117.988 133.11 li
122.206 133.11 li
122.206 130.641 li
122.206 129.937 121.261 129.366 120.096 129.366 cv
cp
f
125.593 129.366 mo
126.76 129.366 127.704 129.937 127.704 130.641 cv
127.704 133.11 li
123.486 133.11 li
123.486 130.641 li
123.486 129.937 124.426 129.366 125.593 129.366 cv
cp
f
120.125 67.3461 mo
110.142 101.29 li
130.108 101.29 li
120.125 67.3461 li
cp
f
110.142 101.29 mo
108.976 103.229 li
131.275 103.229 li
130.108 101.29 li
110.142 101.29 li
cp
.419608 .215686 .121569 rgb
f
53.995 149.433 mo
33.9726 149.433 li
33.9726 103.229 li
53.995 103.229 li
53.995 149.433 li
cp
.792157 .627451 .4 rgb
f
43.9822 138.547 mo
42.1945 138.547 40.7458 139.424 40.7458 140.503 cv
40.7458 149.433 li
47.2222 149.433 li
47.2222 140.503 li
47.2222 139.424 45.773 138.547 43.9822 138.547 cv
cp
.376471 .203922 .105882 rgb
f
38.4839 110.649 mo
37.3214 110.649 36.3772 111.22 36.3772 111.927 cv
36.3772 114.393 li
40.595 114.393 li
40.595 111.927 li
40.595 111.22 39.6509 110.649 38.4839 110.649 cv
cp
f
43.9822 110.649 mo
42.8196 110.649 41.8744 111.22 41.8744 111.927 cv
41.8744 114.393 li
46.0927 114.393 li
46.0927 111.927 li
46.0927 111.22 45.148 110.649 43.9822 110.649 cv
cp
f
49.4793 110.649 mo
50.6462 110.649 51.5904 111.22 51.5904 111.927 cv
51.5904 114.393 li
47.3704 114.393 li
47.3704 111.927 li
47.3704 111.22 48.313 110.649 49.4793 110.649 cv
cp
f
38.4839 120.008 mo
37.3214 120.008 36.3772 120.579 36.3772 121.283 cv
36.3772 123.751 li
40.595 123.751 li
40.595 121.283 li
40.595 120.579 39.6509 120.008 38.4839 120.008 cv
cp
f
43.9822 120.008 mo
42.8196 120.008 41.8744 120.579 41.8744 121.283 cv
41.8744 123.751 li
46.0927 123.751 li
46.0927 121.283 li
46.0927 120.579 45.148 120.008 43.9822 120.008 cv
cp
f
49.4793 120.008 mo
50.6462 120.008 51.5904 120.579 51.5904 121.283 cv
51.5904 123.751 li
47.3704 123.751 li
47.3704 121.283 li
47.3704 120.579 48.313 120.008 49.4793 120.008 cv
cp
f
38.4839 129.366 mo
37.3214 129.366 36.3772 129.937 36.3772 130.641 cv
36.3772 133.11 li
40.595 133.11 li
40.595 130.641 li
40.595 129.937 39.6509 129.366 38.4839 129.366 cv
cp
f
43.9822 129.366 mo
42.8196 129.366 41.8744 129.937 41.8744 130.641 cv
41.8744 133.11 li
46.0927 133.11 li
46.0927 130.641 li
46.0927 129.937 45.148 129.366 43.9822 129.366 cv
cp
f
49.4793 129.366 mo
50.6462 129.366 51.5904 129.937 51.5904 130.641 cv
51.5904 133.11 li
47.3704 133.11 li
47.3704 130.641 li
47.3704 129.937 48.313 129.366 49.4793 129.366 cv
cp
f
44.012 67.3461 mo
34.0296 101.29 li
53.995 101.29 li
44.012 67.3461 li
cp
f
34.0296 101.29 mo
32.8627 103.229 li
55.1613 103.229 li
53.995 101.29 li
34.0296 101.29 li
cp
.419608 .215686 .121569 rgb
f
59.6994 84.6852 mo
81.6251 62.6402 li
78.3327 76.371 li
59.6994 84.6852 li
.501961 .364706 .286275 rgb
f
100.277 51.1405 mo
82.3471 51.1405 li
82.3471 38.9766 li
100.277 38.9766 li
100.277 51.1405 li
.898039 .298039 .235294 rgb
f
95.5292 43.7107 mo
92.6605 43.7107 li
92.6605 40.8426 li
89.9655 40.8426 li
89.9655 43.7107 li
87.0967 43.7107 li
87.0967 46.4063 li
89.9655 46.4063 li
89.9655 49.2744 li
92.6605 49.2744 li
92.6605 46.4063 li
95.5292 46.4063 li
95.5292 43.7107 li
1 1 1 rgb
f
83.2626 48.3069 mo
83.2626 39.8909 li
93.7517 39.8909 li
93.08 40.1787 92.4213 40.4965 91.7777 40.8426 cv
89.9655 40.8426 li
89.9655 41.9178 li
89.1238 42.4662 88.3147 43.0649 87.5427 43.7107 cv
87.0967 43.7107 li
87.0967 44.0926 li
85.6699 45.3433 84.3801 46.7569 83.2626 48.3069 cv
.917647 .439216 .388235 rgb
f
87.0967 44.0926 mo
87.0967 43.7107 li
87.5427 43.7107 li
87.3928 43.8361 87.2438 43.9637 87.0967 44.0926 cv
89.9655 41.9178 mo
89.9655 40.8426 li
91.7777 40.8426 li
91.1592 41.1752 90.5544 41.5341 89.9655 41.9178 cv
1 1 1 rgb
f
324.81 149.02 mo
324.81 150.001 324.35 150.165 322.653 150.165 cv
320.959 150.165 320.499 150.001 320.499 149.02 cv
320.499 148.04 320.959 147.245 322.653 147.245 cv
324.35 147.245 324.81 148.04 324.81 149.02 cv
cp
.898039 .298039 .235294 rgb
f
318.249 149.02 mo
318.249 150.001 317.789 150.165 316.092 150.165 cv
314.397 150.165 313.937 150.001 313.937 149.02 cv
313.937 148.04 314.397 147.245 316.092 147.245 cv
317.789 147.245 318.249 148.04 318.249 149.02 cv
cp
f
307.939 112.543 mo
306.465 119.306 li
309.044 119.535 li
310.848 112.304 li
307.939 112.543 li
cp
.976471 .764706 .580392 rgb
f
324.918 96.1771 mo
324.918 96.6136 324.629 96.9689 324.272 96.9689 cv
323.789 96.9689 li
323.434 96.9689 323.147 96.6136 323.147 96.1771 cv
323.147 95.7397 323.434 95.3854 323.789 95.3854 cv
324.272 95.3854 li
324.629 95.3854 324.918 95.7397 324.918 96.1771 cv
cp
.2 .2 .2 rgb
f
315.02 90.5346 mo
315.02 90.9725 314.731 91.3263 314.376 91.3263 cv
313.894 91.3263 li
313.538 91.3263 313.25 90.9725 313.25 90.5346 cv
313.25 90.0971 313.538 89.7434 313.894 89.7434 cv
314.376 89.7434 li
314.731 89.7434 315.02 90.0971 315.02 90.5346 cv
cp
f
315.02 92.4815 mo
315.02 92.9195 314.731 93.2732 314.376 93.2732 cv
313.894 93.2732 li
313.538 93.2732 313.25 92.9195 313.25 92.4815 cv
313.25 92.0441 313.538 91.6897 313.894 91.6897 cv
314.376 91.6897 li
314.731 91.6897 315.02 92.0441 315.02 92.4815 cv
cp
f
315.02 94.3293 mo
315.02 94.7663 314.731 95.1211 314.376 95.1211 cv
313.894 95.1211 li
313.538 95.1211 313.25 94.7663 313.25 94.3293 cv
313.25 93.8919 313.538 93.537 313.894 93.537 cv
314.376 93.537 li
314.731 93.537 315.02 93.8919 315.02 94.3293 cv
cp
f
315.02 96.1771 mo
315.02 96.6136 314.731 96.9689 314.376 96.9689 cv
313.894 96.9689 li
313.538 96.9689 313.25 96.6136 313.25 96.1771 cv
313.25 95.7397 313.538 95.3854 313.894 95.3854 cv
314.376 95.3854 li
314.731 95.3854 315.02 95.7397 315.02 96.1771 cv
cp
f
324.918 90.5346 mo
324.918 90.9725 324.629 91.3263 324.272 91.3263 cv
323.789 91.3263 li
323.434 91.3263 323.147 90.9725 323.147 90.5346 cv
323.147 90.0971 323.434 89.7434 323.789 89.7434 cv
324.272 89.7434 li
324.629 89.7434 324.918 90.0971 324.918 90.5346 cv
cp
f
313.504 100.117 mo
314.766 100.117 li
314.766 88.1235 li
313.504 88.1235 li
313.504 100.117 li
cp
f
323.357 100.117 mo
324.619 100.117 li
324.619 88.1235 li
323.357 88.1235 li
323.357 100.117 li
cp
f
324.986 95.6091 mo
325.132 95.7791 li
325.569 95.8122 li
325.543 96.1308 li
325.607 96.4132 li
325.879 96.8176 li
325.181 96.7963 li
325.08 97.0116 li
325.123 97.6494 li
324.738 97.6531 li
324.38 97.732 li
324.115 97.3856 li
323.674 97.5113 li
323.283 97.3526 li
323.742 96.6802 li
323.394 96.5245 li
322.818 96.1878 li
323.199 95.8612 li
323.652 95.7424 li
323.724 95.4178 li
323.965 95.2117 li
324.243 94.9548 li
324.559 95.5143 li
324.97 94.9853 li
324.986 95.6091 li
cp
.788235 .0745098 .231373 rgb
f
325.001 96.3397 mo
324.98 96.4734 li
325.132 96.6876 li
324.975 96.7968 li
324.871 96.9354 li
324.787 97.2162 li
324.529 96.8858 li
324.39 96.9204 li
324.112 97.1858 li
323.963 97.0094 li
323.789 96.8752 li
323.848 96.6199 li
323.62 96.4643 li
323.543 96.2229 li
324.031 96.1771 li
323.968 95.956 li
323.902 95.5623 li
324.2 95.6129 li
324.429 95.7754 li
324.606 95.6848 li
324.794 95.7174 li
325.019 95.7461 li
324.88 96.1068 li
325.283 96.0941 li
325.001 96.3397 li
cp
.909804 .0862745 .266667 rgb
f
313.127 95.6091 mo
312.98 95.7791 li
312.542 95.8122 li
312.569 96.1308 li
312.504 96.4132 li
312.232 96.8176 li
312.932 96.7963 li
313.034 97.0116 li
312.99 97.6494 li
313.375 97.6531 li
313.733 97.732 li
313.998 97.3856 li
314.438 97.5113 li
314.831 97.3526 li
314.37 96.6802 li
314.72 96.5245 li
315.294 96.1878 li
314.913 95.8612 li
314.461 95.7424 li
314.388 95.4178 li
314.147 95.2117 li
313.869 94.9548 li
313.554 95.5143 li
313.143 94.9853 li
313.127 95.6091 li
cp
.788235 .0745098 .231373 rgb
f
313.112 96.3397 mo
313.134 96.4734 li
312.98 96.6876 li
313.138 96.7968 li
313.244 96.9354 li
313.326 97.2162 li
313.585 96.8858 li
313.722 96.9204 li
314 97.1858 li
314.149 97.0094 li
314.322 96.8752 li
314.266 96.6199 li
314.493 96.4643 li
314.569 96.2229 li
314.081 96.1771 li
314.144 95.956 li
314.209 95.5623 li
313.913 95.6129 li
313.685 95.7754 li
313.506 95.6848 li
313.318 95.7174 li
313.094 95.7461 li
313.231 96.1068 li
312.829 96.0941 li
313.112 96.3397 li
cp
.909804 .0862745 .266667 rgb
f
323.945 101.837 mo
324.704 96.792 li
324.63 96.7772 li
324.249 96.711 323.894 96.6541 323.583 96.6077 cv
322.859 96.5 322.374 96.4456 322.374 96.4456 cv
318.946 96.061 li
315.518 96.4456 li
315.518 96.4456 314.547 96.5534 313.297 96.7707 cv
313.261 96.7772 li
313.249 96.7798 li
313.19 96.792 li
313.947 101.837 li
323.945 101.837 li
cp
1 1 1 rgb
f
320.249 96.4654 mo
317.318 95.9843 316.306 94.3022 316.306 94.3022 cv
320.36 92.5066 li
317.139 92.5066 li
316.477 92.5066 315.938 92.9797 315.938 93.5642 cv
315.938 96.2869 li
315.938 96.8714 316.477 97.3441 317.139 97.3441 cv
320.975 97.3441 li
321.637 97.3441 322.172 96.8714 322.172 96.2869 cv
322.172 96.2272 li
321.724 96.4782 321.106 96.6055 320.249 96.4654 cv
cp
.976471 .764706 .580392 rgb
f
320.975 92.5066 mo
320.36 92.5066 li
316.023 93.7538 li
316.023 93.7538 316.688 96.0146 320.249 96.4654 cv
321.109 96.5752 321.724 96.75 322.172 96.5 cv
322.172 93.5642 li
322.172 92.9797 321.637 92.5066 320.975 92.5066 cv
cp
.819608 .643137 .486275 rgb
f
324.685 87.4911 mo
324.536 87.4447 324.365 87.5513 324.201 87.766 cv
324.206 87.6594 324.207 87.5561 324.207 87.4511 cv
324.207 86.6108 324.065 85.8755 323.812 85.2292 cv
322.829 85.3859 321.811 85.2574 320.921 84.7582 cv
320.887 84.7518 li
320.786 84.7358 320.705 84.7236 320.635 84.7118 cv
320.186 84.666 319.737 84.6207 319.285 84.6031 cv
319.154 84.5984 318.961 84.6218 318.791 84.6473 cv
318.601 84.7523 li
317.318 85.631 315.697 85.6426 314.302 85.0785 cv
314.047 85.8084 313.905 86.6098 313.905 87.4511 cv
313.905 87.5561 313.906 87.6594 313.913 87.766 cv
313.747 87.5513 313.575 87.4447 313.426 87.4911 cv
313.064 87.6035 313.545 88.5376 313.773 89.5989 cv
314.001 90.6592 314.6 91.4388 314.961 91.3263 cv
314.963 91.3248 li
315.874 93.61 317.313 95.7861 319.056 95.7861 cv
320.813 95.7861 322.634 94.016 323.165 91.1771 cv
323.499 91.0812 323.887 90.3827 324.086 89.4625 cv
324.312 88.4017 325.048 87.6035 324.685 87.4911 cv
cp
1 .847059 .705882 rgb
f
313.504 88.1235 mo
313.541 88.5807 313.708 88.8178 314.399 88.9329 cv
319.676 89.811 319.548 82.6375 319.548 82.6375 cv
314.766 82.4148 313.48 85.1924 313.504 88.1235 cv
cp
.2 .2 .2 rgb
f
324.619 88.1235 mo
324.581 88.5807 324.414 88.8178 323.724 88.9329 cv
318.448 89.811 318.574 82.6375 318.574 82.6375 cv
323.357 82.4148 324.643 85.1924 324.619 88.1235 cv
cp
f
318.971 82.2039 mo
316.43 82.2039 313.701 84.4129 313.701 86.2592 cv
313.701 87.1974 314.407 87.5342 315.434 87.6386 cv
315.975 86.0311 317.165 84.787 319.011 84.787 cv
320.851 84.787 322.039 86.0215 322.584 87.6205 cv
323.658 87.5065 324.412 87.1617 324.412 86.2213 cv
324.412 84.374 321.511 82.2039 318.971 82.2039 cv
cp
f
324.918 92.4815 mo
324.918 92.9195 324.629 93.2732 324.272 93.2732 cv
323.789 93.2732 li
323.434 93.2732 323.147 92.9195 323.147 92.4815 cv
323.147 92.0441 323.434 91.6897 323.789 91.6897 cv
324.272 91.6897 li
324.629 91.6897 324.918 92.0441 324.918 92.4815 cv
cp
f
324.918 94.3293 mo
324.918 94.7663 324.629 95.1211 324.272 95.1211 cv
323.789 95.1211 li
323.434 95.1211 323.147 94.7663 323.147 94.3293 cv
323.147 93.8919 323.434 93.537 323.789 93.537 cv
324.272 93.537 li
324.629 93.537 324.918 93.8919 324.918 94.3293 cv
cp
f
312.229 97.0275 mo
312.448 96.9604 li
312.229 97.0275 li
cp
.917647 .905882 .921569 rgb
f
311.624 97.254 mo
311.804 97.1799 li
311.624 97.254 li
cp
f
312.564 96.9306 mo
312.707 96.8933 312.86 96.8581 313.025 96.8251 cv
312.86 96.8581 312.707 96.8933 312.564 96.9306 cv
cp
f
311.34 97.3824 mo
311.51 97.3051 li
311.34 97.3824 li
cp
f
311.916 97.1357 mo
312.113 97.0648 li
311.916 97.1357 li
cp
f
310.814 97.6446 mo
310.996 97.5518 311.169 97.4644 311.34 97.3824 cv
311.042 97.5252 310.22 98.4752 310.154 98.5562 cv
308.205 101.007 307.028 113.313 307.028 113.313 cv
310.979 114.086 li
311.223 111.373 312.361 107.675 312.232 104.454 cv
312.115 101.526 311.113 99.1253 310.814 97.6446 cv
cp
f
311.51 97.3051 mo
311.624 97.254 li
311.51 97.3051 li
cp
.0666667 .0745098 .054902 rgb
f
327.075 97.6669 mo
327.079 97.6446 li
326.348 97.2727 325.785 96.9892 324.704 96.7915 cv
324.704 96.792 li
325.784 96.9929 326.141 97.2807 327.064 97.6621 cv
327.075 97.6669 li
cp
f
311.34 97.3824 mo
311.34 97.3824 li
cp
f
312.113 97.0648 mo
312.229 97.0275 li
312.113 97.0648 li
cp
f
312.448 96.9604 mo
312.564 96.9306 li
312.448 96.9604 li
cp
f
313.19 96.7915 mo
313.025 96.8251 li
313.19 96.792 li
313.19 96.7915 li
cp
f
311.804 97.1799 mo
311.916 97.1357 li
311.804 97.1799 li
cp
f
327.075 97.6669 mo
327.064 97.6621 li
326.141 97.2807 325.784 96.9929 324.704 96.792 cv
323.945 101.837 li
313.947 101.837 li
313.19 96.792 li
313.025 96.8251 li
312.86 96.8581 312.707 96.8933 312.564 96.9306 cv
312.448 96.9604 li
312.229 97.0275 li
312.113 97.0648 li
311.916 97.1357 li
311.804 97.1799 li
311.624 97.254 li
311.51 97.3051 li
311.34 97.3824 li
311.169 97.4644 310.996 97.5518 310.814 97.6446 cv
311.443 100.755 313.839 107.916 313.47 113.095 cv
324.424 113.095 li
324.055 107.927 326.446 100.784 327.075 97.6669 cv
cp
f
315.604 102.967 mo
315.604 103.169 315.442 103.331 315.241 103.331 cv
315.04 103.331 314.878 103.169 314.878 102.967 cv
314.878 102.767 315.04 102.605 315.241 102.605 cv
315.442 102.605 315.604 102.767 315.604 102.967 cv
cp
.788235 .0745098 .231373 rgb
f
316.839 102.967 mo
316.839 103.169 316.677 103.331 316.477 103.331 cv
316.275 103.331 316.113 103.169 316.113 102.967 cv
316.113 102.767 316.275 102.605 316.477 102.605 cv
316.677 102.605 316.839 102.767 316.839 102.967 cv
cp
f
318.074 102.967 mo
318.074 103.169 317.912 103.331 317.711 103.331 cv
317.51 103.331 317.349 103.169 317.349 102.967 cv
317.349 102.767 317.51 102.605 317.711 102.605 cv
317.912 102.605 318.074 102.767 318.074 102.967 cv
cp
f
319.31 102.967 mo
319.31 103.169 319.148 103.331 318.946 103.331 cv
318.745 103.331 318.584 103.169 318.584 102.967 cv
318.584 102.767 318.745 102.605 318.946 102.605 cv
319.148 102.605 319.31 102.767 319.31 102.967 cv
cp
f
320.545 102.967 mo
320.545 103.169 320.383 103.331 320.182 103.331 cv
319.981 103.331 319.819 103.169 319.819 102.967 cv
319.819 102.767 319.981 102.605 320.182 102.605 cv
320.383 102.605 320.545 102.767 320.545 102.967 cv
cp
f
321.779 102.967 mo
321.779 103.169 321.619 103.331 321.417 103.331 cv
321.216 103.331 321.054 103.169 321.054 102.967 cv
321.054 102.767 321.216 102.605 321.417 102.605 cv
321.619 102.605 321.779 102.767 321.779 102.967 cv
cp
f
323.016 102.967 mo
323.016 103.169 322.853 103.331 322.651 103.331 cv
322.451 103.331 322.289 103.169 322.289 102.967 cv
322.289 102.767 322.451 102.605 322.651 102.605 cv
322.853 102.605 323.016 102.767 323.016 102.967 cv
cp
f
316.828 104.366 mo
319.012 104.661 li
321.196 104.366 li
316.828 104.366 li
cp
315.838 105.356 mo
319.012 105.803 li
322.187 105.356 li
319.012 104.926 li
315.838 105.356 li
cp
315.659 106.539 mo
319.012 107.211 li
322.366 106.539 li
319.012 106.067 li
315.659 106.539 li
cp
316.02 108.078 mo
319.012 108.717 li
322.003 108.078 li
319.012 107.479 li
316.02 108.078 li
cp
315.57 109.72 mo
319.012 110.318 li
322.455 109.72 li
319.012 108.985 li
315.57 109.72 li
cp
322.651 111.214 mo
322.629 111.212 li
319.012 110.585 li
315.394 111.212 li
315.243 111.105 li
315.349 110.953 li
318.244 110.451 li
314.856 109.863 li
314.747 109.736 li
314.851 109.605 li
318.383 108.851 li
315.344 108.202 li
315.241 108.073 li
315.346 107.945 li
318.343 107.345 li
314.853 106.646 li
314.747 106.513 li
314.86 106.387 li
318.071 105.935 li
314.86 105.483 li
314.747 105.352 li
314.86 105.223 li
318.033 104.793 li
314.86 104.365 li
314.747 104.225 li
314.878 104.103 li
323.147 104.103 li
323.278 104.225 li
323.165 104.365 li
319.992 104.793 li
323.165 105.223 li
323.278 105.352 li
323.165 105.483 li
319.954 105.935 li
323.165 106.387 li
323.278 106.513 li
323.172 106.646 li
319.68 107.345 li
322.677 107.945 li
322.782 108.073 li
322.679 108.202 li
319.641 108.851 li
323.174 109.605 li
323.278 109.736 li
323.169 109.863 li
319.78 110.451 li
322.674 110.953 li
322.78 111.105 li
322.651 111.214 li
cp
.917647 .905882 .921569 rgb
f
308.754 121.469 mo
308.12 122.806 306.844 123.528 305.907 123.082 cv
304.968 122.636 304.723 121.192 305.358 119.855 cv
305.994 118.517 307.269 117.795 308.207 118.241 cv
309.145 118.687 309.39 120.132 308.754 121.469 cv
cp
.976471 .764706 .580392 rgb
f
329.964 112.543 mo
331.438 119.306 li
328.859 119.535 li
327.055 112.304 li
329.964 112.543 li
cp
f
327.748 98.5562 mo
327.683 98.4752 327.183 97.693 327.032 97.6163 cv
327.032 97.6169 li
327.09 97.6446 li
326.79 99.1253 325.788 101.526 325.67 104.454 cv
325.541 107.675 326.68 111.373 326.923 114.086 cv
330.876 113.313 li
330.876 113.313 329.698 101.007 327.748 98.5562 cv
cp
.917647 .905882 .921569 rgb
f
329.147 121.469 mo
329.784 122.806 331.058 123.528 331.997 123.082 cv
332.935 122.636 333.18 121.192 332.546 119.855 cv
331.909 118.517 330.634 117.795 329.696 118.241 cv
328.758 118.687 328.513 120.132 329.147 121.469 cv
cp
.976471 .764706 .580392 rgb
f
316.72 113.095 mo
313.47 113.095 li
313.47 113.095 305.659 129.577 307.854 148.383 cv
309.594 148.383 311.317 148.383 312.883 148.383 cv
310.815 133.803 314.072 119.313 316.72 113.095 cv
cp
.290196 .294118 .309804 rgb
f
321.305 113.095 mo
319.269 113.095 li
318.946 113.095 li
318.624 113.095 li
316.72 113.095 li
314.072 119.313 310.815 133.803 312.883 148.383 cv
315.342 148.383 317.407 148.383 318.512 148.383 cv
319.065 148.383 319.381 148.383 319.381 148.383 cv
320.505 148.383 322.624 148.383 325.143 148.383 cv
327.21 133.803 323.952 119.313 321.305 113.095 cv
cp
.0666667 .0745098 .054902 rgb
f
324.424 113.095 mo
321.305 113.095 li
323.952 119.313 327.21 133.803 325.143 148.383 cv
326.671 148.383 328.348 148.383 330.038 148.383 cv
332.235 129.577 324.424 113.095 324.424 113.095 cv
cp
.290196 .294118 .309804 rgb
f
341.052 145.884 mo
337.07 145.884 li
335.943 139.797 li
341.119 139.797 li
341.052 145.884 li
cp
.917647 .905882 .921569 rgb
f
338.263 149.467 mo
341.002 149.467 li
341.002 145.884 li
336.589 145.884 li
338.263 149.467 li
cp
.2 .2 .2 rgb
f
336.638 149.467 mo
336.638 149.467 332.386 150.178 332.246 149.715 cv
331.521 148.329 332.968 148.059 334.916 146.427 cv
336.878 144.78 336.198 143.394 337.155 144.827 cv
338.113 146.26 340.317 145.705 341.052 145.884 cv
341.382 145.965 340.284 147.473 339.239 148.254 cv
337.958 149.211 336.637 149.467 336.638 149.467 cv
cp
f
342.516 145.884 mo
346.496 145.884 li
347.624 139.797 li
342.448 139.797 li
342.516 145.884 li
cp
.917647 .905882 .921569 rgb
f
345.255 149.467 mo
342.516 149.467 li
342.516 145.884 li
346.93 145.884 li
345.255 149.467 li
cp
.2 .2 .2 rgb
f
346.93 149.467 mo
346.93 149.467 351.182 150.178 351.32 149.715 cv
352.047 148.329 350.6 148.059 348.651 146.427 cv
346.69 144.78 347.37 143.394 346.412 144.827 cv
345.454 146.26 343.25 145.705 342.516 145.884 cv
342.186 145.965 343.283 147.473 344.327 148.254 cv
345.608 149.211 346.93 149.467 346.93 149.467 cv
cp
f
334.77 114.75 mo
334.77 114.75 334.245 121.704 334.303 124.025 cv
334.402 127.987 335.893 141.388 335.893 141.388 cv
341.257 141.388 li
341.787 124.025 li
342.318 141.388 li
347.681 141.388 li
347.681 141.388 348.941 127.981 349.008 124.025 cv
349.046 121.704 348.54 114.75 348.54 114.75 cv
334.77 114.75 li
cp
f
348.616 116.244 mo
334.77 116.244 li
334.77 114.75 li
348.616 114.75 li
348.616 116.244 li
cp
.368627 .368627 .368627 rgb
f
343.289 103.602 mo
343.385 100.116 344.866 96.6236 345.59 95.1088 cv
344.975 95.0167 344.564 94.9709 344.564 94.9709 cv
341.656 94.6443 li
338.747 94.9709 li
338.747 94.9709 336.301 95.2405 334.403 95.7999 cv
336.66 99.8019 335.02 110.32 335.388 114.837 cv
347.736 114.839 li
347.253 113.431 343.227 105.861 343.289 103.602 cv
cp
.917647 .905882 .921569 rgb
f
350.892 96.7628 mo
350.629 96.4724 350.132 96.2198 349.53 96.0035 cv
349.008 109.22 li
352.917 109.22 li
352.917 109.22 352.782 98.8423 350.892 96.7628 cv
cp
1 1 1 rgb
f
342.826 94.9389 mo
340.179 94.5046 339.265 92.9851 339.265 92.9851 cv
342.928 91.3636 li
340.017 91.3636 li
339.419 91.3636 338.933 91.7909 338.933 92.3184 cv
338.933 94.7779 li
338.933 95.306 339.419 95.7327 340.017 95.7327 cv
343.481 95.7327 li
344.079 95.7327 344.564 95.306 344.564 94.7779 cv
344.564 94.7247 li
344.159 94.9506 343.601 95.0668 342.826 94.9389 cv
cp
.976471 .764706 .580392 rgb
f
343.481 91.3636 mo
342.928 91.3636 li
339.01 92.49 li
339.01 92.49 339.611 94.5328 342.826 94.9389 cv
343.603 95.0385 344.159 95.1973 344.564 94.9709 cv
344.564 92.3184 li
344.564 91.7909 344.079 91.3636 343.481 91.3636 cv
cp
.819608 .643137 .486275 rgb
f
346.835 86.8331 mo
346.7 86.7909 346.545 86.8874 346.396 87.0819 cv
346.4 86.9854 346.402 86.8911 346.402 86.7968 cv
346.402 84.5115 345.253 83.0643 343.61 82.2039 cv
343.394 83.01 342.746 83.1693 341.662 83.1693 cv
341.245 83.1693 340.892 83.0681 340.603 82.8997 cv
340.306 83.0862 339.938 83.1986 339.497 83.1986 cv
339.069 83.1986 338.708 83.092 338.415 82.9142 cv
337.6 83.9185 337.096 85.2863 337.096 86.7968 cv
337.096 86.8911 337.099 86.9854 337.102 87.0819 cv
336.953 86.8874 336.799 86.7909 336.663 86.8331 cv
336.336 86.9348 336.237 87.7931 336.444 88.7518 cv
336.651 89.7092 337.083 90.4034 337.41 90.3023 cv
337.525 90.2661 337.724 89.7635 337.78 89.5659 cv
338.571 91.8698 339.989 94.3262 341.749 94.3262 cv
343.508 94.3262 345.348 92.3632 345.577 89.2915 cv
345.633 89.4891 345.973 90.2661 346.087 90.3023 cv
346.415 90.4034 346.848 89.7092 347.053 88.7518 cv
347.26 87.7931 347.162 86.9348 346.835 86.8331 cv
cp
1 .847059 .705882 rgb
f
346.622 84.4795 mo
346.493 84.5013 346.361 84.5157 346.219 84.5157 cv
344.86 84.5157 344.185 83.9729 344.19 82.9188 cv
343.215 82.9151 342.242 82.8645 341.302 82.6211 cv
341.002 83.2445 340.402 83.1986 339.497 83.1986 cv
339.048 83.1986 338.675 83.0809 338.375 82.8869 cv
338.333 83.0643 338.306 83.2498 338.303 83.448 cv
338.232 85.9598 341.399 86.371 341.736 85.6975 cv
341.983 86.564 342.676 86.1601 342.724 85.3827 cv
343.108 86.3849 344.108 86.4259 344.302 85.737 cv
345.308 87.0878 345.519 88.1448 345.735 89.5733 cv
346.396 87.0819 li
346.728 86.2165 346.814 85.3475 346.622 84.4795 cv
cp
.678431 .52549 .380392 rgb
f
338.747 83.0713 mo
338.561 83.0031 338.395 83.4267 338.25 83.3158 cv
337.235 83.6846 336.726 84.3841 337.102 87.0819 cv
337.78 89.5659 li
337.556 86.0844 339.268 85.6123 338.747 83.0713 cv
cp
f
341.655 93.6963 mo
341.239 93.6569 340.672 93.5141 340.26 93.1742 cv
340.339 92.701 340.458 92.2406 340.692 91.8138 cv
340.949 91.6418 341.458 91.7185 341.782 91.7185 cv
342.108 91.7185 342.554 91.6418 342.813 91.8138 cv
343.048 92.2406 343.165 92.701 343.244 93.1742 cv
342.832 93.5141 342.096 93.6569 341.655 93.6963 cv
cp
345.501 88.2967 mo
345.196 89.0581 345.05 89.8216 345.036 90.5857 cv
344.965 91.3967 344.674 92.1304 344.249 92.8171 cv
343.976 92.9488 343.72 93.0361 343.478 93.0745 cv
343.422 92.571 343.325 92.0531 343.179 91.5155 cv
342.83 91.2059 342.205 91.0082 341.716 91.0082 cv
341.225 91.0082 340.674 91.2059 340.326 91.5155 cv
340.18 92.0531 340.083 92.571 340.028 93.0745 cv
339.785 93.0361 339.528 92.9488 339.256 92.8171 cv
338.831 92.1304 338.54 91.3967 338.469 90.5857 cv
338.456 89.8216 338.309 89.0581 338.004 88.2967 cv
337.518 88.4485 li
338.034 90.7546 li
338.207 91.5416 338.563 92.2779 339.066 92.9754 cv
339.346 93.1278 339.579 93.3372 339.762 93.6052 cv
340.196 94.1737 340.911 94.4636 341.552 94.6208 cv
341.656 94.6443 li
341.753 94.6229 li
342.426 94.4668 343.308 94.1748 343.744 93.6052 cv
343.925 93.3372 344.159 93.1278 344.439 92.9754 cv
344.941 92.2779 345.297 91.5416 345.472 90.7546 cv
345.987 88.4485 li
345.501 88.2967 li
cp
f
337.406 87.7495 mo
337.433 87.9722 337.469 88.2023 337.518 88.4485 cv
338.153 88.7448 li
338.153 88.7448 338.005 88.293 337.969 87.8986 cv
337.762 87.8731 337.574 87.8219 337.406 87.7495 cv
cp
f
349.632 86.0567 mo
349.632 87.3685 346.103 88.432 341.749 88.432 cv
337.395 88.432 333.867 87.3685 333.867 86.0567 cv
333.867 84.7449 337.395 83.6814 341.749 83.6814 cv
346.103 83.6814 349.632 84.7449 349.632 86.0567 cv
cp
.14902 .14902 .14902 rgb
f
341.97 84.8882 mo
340.292 84.8882 338.729 84.317 337.464 83.3611 cv
337.447 84.9905 li
337.447 85.5537 339.418 86.0567 341.749 86.0567 cv
344.079 86.0567 345.97 85.6012 345.97 85.0384 cv
345.97 83.7112 li
344.805 84.4534 343.43 84.8882 341.97 84.8882 cv
cp
.639216 .639216 .639216 rgb
f
337.909 85.4557 mo
338.236 85.6145 338.721 85.7541 339.307 85.8574 cv
339.795 84.6085 li
338.446 84.0821 li
337.909 85.4557 li
cp
.741176 .741176 .741176 rgb
f
341.718 80.9134 mo
341.018 80.9134 338.441 80.485 338.026 80.9618 cv
337.676 81.3631 337.464 81.8868 337.464 82.4617 cv
337.464 84.291 li
337.464 84.8536 339.418 85.3321 341.749 85.3321 cv
344.079 85.3321 345.97 84.8754 345.97 84.3139 cv
345.97 82.4617 li
345.97 81.8868 345.759 81.3631 345.408 80.9618 cv
344.992 80.485 342.417 80.9134 341.718 80.9134 cv
cp
.235294 .235294 .235294 rgb
f
338.901 81.6785 mo
338.901 81.6785 338.35 81.5256 338.298 82.9386 cv
338.245 84.3516 338.298 84.244 338.298 84.244 cv
338.298 84.244 339.209 84.6713 339.574 84.7044 cv
339.938 84.7375 339.579 82.4734 339.574 82.2214 cv
339.568 81.9694 339.611 81.4403 338.901 81.6785 cv
cp
.458824 .45098 .454902 rgb
f
345.576 81.1829 mo
345.08 81.5682 344.674 82.4937 344.67 82.678 cv
344.664 82.9306 344.888 82.7585 344.67 82.8811 cv
344.48 82.9876 344.345 84.6676 344.554 85.0741 cv
344.557 85.0731 li
345.379 84.8957 345.913 84.6431 345.965 84.3592 cv
345.974 84.0847 345.975 83.6222 345.946 82.8811 cv
345.931 82.4692 345.942 82.6125 345.962 82.2913 cv
345.932 81.8821 345.794 81.5037 345.576 81.1829 cv
cp
.14902 .14902 .14902 rgb
f
337.777 85.9629 mo
335.756 87.3248 li
335.756 87.3248 336.68 87.814 338.405 88.0404 cv
339.137 86.2965 li
339.137 86.2965 338.481 86.3108 337.777 85.9629 cv
cp
.458824 .45098 .454902 rgb
f
345.59 97.9429 mo
346.722 97.2999 li
346.479 95.2522 li
346.156 95.1957 345.855 95.1483 345.59 95.1088 cv
344.866 96.6236 343.385 100.116 343.289 103.602 cv
343.277 104.021 343.289 104.426 343.31 104.822 cv
346.156 100.13 li
345.59 97.9429 li
cp
.811765 .207843 .145098 rgb
f
332.419 96.7628 mo
332.681 96.4724 333.179 96.2198 333.782 96.0035 cv
334.303 109.22 li
330.395 109.222 li
330.395 109.222 330.527 98.8423 332.419 96.7628 cv
cp
1 1 1 rgb
f
337.719 97.9429 mo
336.589 97.2999 li
336.832 95.2522 li
337.155 95.1957 337.456 95.1483 337.719 95.1088 cv
338.446 96.6236 339.925 100.116 340.022 103.602 cv
340.034 104.021 340.022 104.426 340.001 104.822 cv
337.154 100.13 li
337.719 97.9429 li
cp
.811765 .207843 .145098 rgb
f
336.832 95.2522 mo
336.589 97.2999 li
337.719 97.9429 li
337.154 100.13 li
340.001 104.822 li
339.91 106.562 339.54 115.098 339.145 116.244 cv
334.545 117.93 li
333.782 96.0035 li
334.698 95.6721 335.862 95.4237 336.832 95.2522 cv
cp
.898039 .298039 .235294 rgb
f
346.48 95.2522 mo
346.724 97.2999 li
345.591 97.9429 li
346.158 100.13 li
343.31 104.822 li
343.403 106.562 343.772 115.098 344.166 116.244 cv
348.767 117.93 li
349.53 96.0035 li
348.615 95.6721 347.451 95.4237 346.48 95.2522 cv
cp
f
349.642 120.455 mo
351.967 120.455 li
352.917 109.22 li
349.238 109.22 li
349.642 120.455 li
cp
1 .847059 .705882 rgb
f
351.252 122.9 mo
350.577 123.06 349.84 122.381 349.604 121.385 cv
349.367 120.388 349.722 119.45 350.396 119.291 cv
351.071 119.13 351.808 119.809 352.045 120.806 cv
352.281 121.803 351.927 122.74 351.252 122.9 cv
cp
f
333.464 120.455 mo
331.141 120.455 li
330.395 109.222 li
334.053 109.22 li
333.464 120.455 li
cp
f
331.854 122.9 mo
332.529 123.06 333.267 122.381 333.504 121.385 cv
333.74 120.388 333.384 119.45 332.71 119.291 cv
332.036 119.13 331.298 119.809 331.062 120.806 cv
330.826 121.803 331.181 122.74 331.854 122.9 cv
cp
f
343.067 116.53 mo
340.32 116.53 li
340.32 114.839 li
343.067 114.839 li
343.067 116.53 li
cp
.807843 .8 .811765 rgb
f
424.288 127.923 mo
424.263 128.033 li
424.224 128.222 424.174 128.411 424.103 128.6 cv
424.082 148.645 li
424.12 148.543 424.154 148.441 424.184 148.339 cv
424.243 148.077 li
424.266 147.97 li
424.295 147.808 424.316 147.646 424.322 147.482 cv
424.325 147.355 li
424.348 127.311 li
424.348 127.515 424.325 127.72 424.288 127.923 cv
cp
.941176 .568627 .113725 rgb
f
373.952 148.645 mo
373.975 128.599 li
424.103 128.599 li
424.082 148.645 li
373.952 148.645 li
1 .913725 .537255 rgb
f
424.103 128.599 mo
373.975 128.599 li
405.642 117.028 li
412.835 118.56 418.518 120.62 421.693 123.086 cv
424.052 124.921 424.785 126.793 424.103 128.599 cv
.941176 .568627 .113725 rgb
f
383.606 132.522 mo
383.606 133.961 382.44 135.128 381.001 135.128 cv
379.561 135.128 378.395 133.961 378.395 132.522 cv
378.395 131.083 379.561 129.916 381.001 129.916 cv
382.44 129.916 383.606 131.083 383.606 132.522 cv
cp
.94902 .729412 .262745 rgb
f
420.294 144.717 mo
420.294 146.156 419.129 147.322 417.689 147.322 cv
416.25 147.322 415.083 146.156 415.083 144.717 cv
415.083 143.277 416.25 142.111 417.689 142.111 cv
419.129 142.111 420.294 143.277 420.294 144.717 cv
cp
f
389.964 141.173 mo
389.964 143.13 388.378 144.717 386.419 144.717 cv
384.463 144.717 382.877 143.13 382.877 141.173 cv
382.877 139.217 384.463 137.63 386.419 137.63 cv
388.378 137.63 389.964 139.217 389.964 141.173 cv
cp
.972549 .631373 .235294 rgb
f
424.101 130.973 mo
423.597 130.696 423.027 130.526 422.411 130.526 cv
420.454 130.526 418.867 132.112 418.867 134.068 cv
418.867 136.027 420.454 137.613 422.411 137.613 cv
423.024 137.613 423.591 137.443 424.094 137.169 cv
424.101 130.973 li
f
403.618 138.787 mo
403.618 140.284 402.404 141.498 400.908 141.498 cv
399.412 141.498 398.198 140.284 398.198 138.787 cv
398.198 137.289 399.412 136.077 400.908 136.077 cv
402.404 136.077 403.618 137.289 403.618 138.787 cv
cp
.968627 .737255 .203922 rgb
f
394.081 134.068 mo
394.081 134.789 393.498 135.373 392.778 135.373 cv
392.058 135.373 391.475 134.789 391.475 134.068 cv
391.475 133.35 392.058 132.767 392.778 132.767 cv
393.498 132.767 394.081 133.35 394.081 134.068 cv
cp
.94902 .729412 .262745 rgb
f
411.226 145.655 mo
411.226 146.374 410.644 146.958 409.923 146.958 cv
409.203 146.958 408.62 146.374 408.62 145.655 cv
408.62 144.934 409.203 144.352 409.923 144.352 cv
410.644 144.352 411.226 144.934 411.226 145.655 cv
cp
f
413.519 132.522 mo
413.519 133.516 412.714 134.32 411.721 134.32 cv
410.728 134.32 409.923 133.516 409.923 132.522 cv
409.923 131.529 410.728 130.724 411.721 130.724 cv
412.714 130.724 413.519 131.529 413.519 132.522 cv
f
374.864 142.111 mo
374.531 142.111 374.224 142.207 373.958 142.364 cv
373.954 145.452 li
374.222 145.61 374.529 145.707 374.864 145.707 cv
375.857 145.707 376.661 144.902 376.661 143.909 cv
376.661 142.916 375.857 142.111 374.864 142.111 cv
cp
f
405.12 122.311 mo
405.12 122.588 404.387 122.815 403.484 122.815 cv
402.581 122.815 401.849 122.588 401.849 122.311 cv
401.849 122.032 402.581 121.807 403.484 121.807 cv
404.387 121.807 405.12 122.032 405.12 122.311 cv
cp
.858824 .517647 .101961 rgb
f
398.485 126.562 mo
398.485 126.84 397.752 127.065 396.848 127.065 cv
395.944 127.065 395.213 126.84 395.213 126.562 cv
395.213 126.284 395.944 126.058 396.848 126.058 cv
397.752 126.058 398.485 126.284 398.485 126.562 cv
cp
f
413.357 120.066 mo
413.357 120.343 412.624 120.568 411.721 120.568 cv
410.819 120.568 410.086 120.343 410.086 120.066 cv
410.086 119.787 410.819 119.562 411.721 119.562 cv
412.624 119.562 413.357 119.787 413.357 120.066 cv
cp
f
406.552 119.568 mo
406.552 119.708 406.185 119.821 405.734 119.821 cv
405.284 119.821 404.917 119.708 404.917 119.568 cv
404.917 119.43 405.284 119.317 405.734 119.317 cv
406.185 119.317 406.552 119.43 406.552 119.568 cv
cp
f
399.015 121.554 mo
399.015 121.694 398.649 121.807 398.197 121.807 cv
397.746 121.807 397.38 121.694 397.38 121.554 cv
397.38 121.416 397.746 121.304 398.197 121.304 cv
398.649 121.304 399.015 121.416 399.015 121.554 cv
cp
f
411.157 125.925 mo
411.157 126.356 410.022 126.706 408.62 126.706 cv
407.221 126.706 406.085 126.356 406.085 125.925 cv
406.085 125.493 407.221 125.144 408.62 125.144 cv
410.022 125.144 411.157 125.493 411.157 125.925 cv
cp
f
389.248 126.058 mo
389.248 126.449 388.216 126.767 386.946 126.767 cv
385.674 126.767 384.643 126.449 384.643 126.058 cv
384.643 125.667 385.674 125.349 386.946 125.349 cv
388.216 125.349 389.248 125.667 389.248 126.058 cv
cp
f
421.17 125.144 mo
421.17 125.536 420.139 125.853 418.867 125.853 cv
417.596 125.853 416.565 125.536 416.565 125.144 cv
416.565 124.753 417.596 124.434 418.867 124.434 cv
420.139 124.434 421.17 124.753 421.17 125.144 cv
f
439.167 132.52 mo
436.024 132.52 li
436.024 129.536 li
439.167 129.536 li
439.167 132.52 li
cp
.2 .2 .2 rgb
f
438.133 135.115 mo
434.99 135.115 li
434.99 134.107 li
438.133 134.107 li
438.133 135.115 li
cp
f
431.772 117.901 mo
417.616 117.901 li
417.616 110.193 li
431.772 110.193 li
431.772 117.901 li
cp
f
431.772 144.155 mo
417.616 144.155 li
417.616 151.864 li
431.772 151.864 li
431.772 144.155 li
cp
f
430.158 114.632 mo
430.158 116.448 li
419.17 116.448 li
419.17 114.632 li
417.556 114.632 li
417.556 121.17 li
431.772 121.17 li
431.772 114.632 li
430.158 114.632 li
.839216 .215686 .14902 rgb
f
419.232 147.389 mo
419.232 145.572 li
430.218 145.572 li
430.218 147.389 li
431.834 147.389 li
431.834 140.85 li
417.616 140.85 li
417.616 147.389 li
419.232 147.389 li
cp
f
437.648 131.028 mo
437.648 138.199 431.834 144.013 424.665 144.013 cv
417.493 144.013 411.68 138.199 411.68 131.028 cv
411.68 123.857 417.493 118.044 424.665 118.044 cv
431.834 118.044 437.648 123.857 437.648 131.028 cv
.898039 .298039 .235294 rgb
f
424.665 142.298 mo
418.45 142.298 413.394 137.242 413.394 131.028 cv
413.394 124.814 418.45 119.758 424.665 119.758 cv
430.878 119.758 435.934 124.814 435.934 131.028 cv
435.934 137.242 430.878 142.298 424.665 142.298 cv
1 1 1 rgb
f
425.641 131.028 mo
425.641 131.551 425.218 131.974 424.694 131.974 cv
424.171 131.974 423.748 131.551 423.748 131.028 cv
423.748 130.505 424.171 130.082 424.694 130.082 cv
425.218 130.082 425.641 130.505 425.641 131.028 cv
cp
0 0 0 rgb
f
425.011 124.243 mo
424.44 124.243 li
424.44 121.17 li
425.011 121.17 li
425.011 124.243 li
f
425.011 122.241 mo
424.44 122.241 li
424.44 121.17 li
425.011 121.17 li
425.011 122.241 li
f
420.076 123.531 mo
419.541 122.604 li
420.035 122.319 li
420.57 123.245 li
420.076 123.531 li
f
416.941 126.829 mo
416.015 126.293 li
416.3 125.799 li
417.226 126.334 li
416.941 126.829 li
f
415.876 131.253 mo
414.806 131.253 li
414.806 130.682 li
415.876 130.682 li
415.876 131.253 li
f
416.24 136.152 mo
415.954 135.658 li
416.88 135.122 li
417.166 135.617 li
416.24 136.152 li
f
419.93 139.678 mo
419.435 139.392 li
419.969 138.466 li
420.464 138.751 li
419.93 139.678 li
cp
f
424.888 140.886 mo
424.317 140.886 li
424.317 139.817 li
424.888 139.817 li
424.888 140.886 li
cp
f
429.293 139.739 mo
428.758 138.813 li
429.252 138.527 li
429.787 139.453 li
429.293 139.739 li
cp
f
433.028 136.258 mo
432.101 135.724 li
432.386 135.228 li
433.313 135.762 li
433.028 136.258 li
cp
f
433.452 131.375 mo
433.452 130.804 li
434.522 130.804 li
434.522 131.375 li
433.452 131.375 li
cp
f
432.449 126.935 mo
432.164 126.44 li
433.088 125.906 li
433.374 126.4 li
432.449 126.935 li
cp
f
429.359 123.591 mo
428.864 123.306 li
429.398 122.379 li
429.893 122.665 li
429.359 123.591 li
f
417.909 131.283 mo
414.837 131.283 li
414.837 130.712 li
417.909 130.712 li
417.909 131.283 li
f
424.95 140.886 mo
424.379 140.886 li
424.379 137.814 li
424.95 137.814 li
424.95 140.886 li
cp
f
434.552 131.344 mo
431.48 131.344 li
431.48 130.773 li
434.552 130.773 li
434.552 131.344 li
cp
f
425.236 131.09 mo
424.093 131.09 li
424.093 127.613 li
425.236 127.613 li
425.236 131.09 li
f
424.953 131.583 mo
424.376 130.596 li
431.545 126.397 li
432.123 127.384 li
424.953 131.583 li
cp
f
413.396 131.235 mo
413.396 131.235 413.396 131.235 413.396 131.234 cv
413.396 131.235 413.396 131.235 413.396 131.235 cv
413.395 131.168 mo
413.395 131.166 413.395 131.165 413.395 131.163 cv
413.395 131.165 413.395 131.166 413.395 131.168 cv
413.395 131.146 mo
413.395 131.144 413.395 131.143 413.395 131.141 cv
413.395 131.143 413.395 131.144 413.395 131.146 cv
413.394 131.098 mo
413.394 131.097 413.394 131.095 413.394 131.094 cv
413.394 131.095 413.394 131.097 413.394 131.098 cv
413.394 131.077 mo
413.394 131.075 413.394 131.073 413.394 131.071 cv
413.394 131.073 413.394 131.075 413.394 131.077 cv
413.394 131.055 mo
413.394 131.053 413.394 131.051 413.394 131.049 cv
413.394 131.051 413.394 131.053 413.394 131.055 cv
424.805 119.759 mo
424.804 119.759 424.803 119.759 424.802 119.759 cv
424.803 119.759 424.804 119.759 424.805 119.759 cv
424.783 119.758 mo
424.782 119.758 424.78 119.758 424.779 119.758 cv
424.78 119.758 424.781 119.758 424.783 119.758 cv
424.758 119.758 mo
424.757 119.758 li
424.757 119.758 424.758 119.758 424.758 119.758 cv
424.736 119.758 mo
424.734 119.758 424.732 119.758 424.73 119.758 cv
424.732 119.758 424.734 119.758 424.736 119.758 cv
424.714 119.758 mo
424.712 119.758 424.709 119.758 424.707 119.758 cv
424.71 119.758 424.712 119.758 424.714 119.758 cv
424.692 119.758 mo
424.69 119.758 424.688 119.758 424.686 119.758 cv
424.688 119.758 424.69 119.758 424.692 119.758 cv
.843137 .301961 .247059 rgb
f
418.467 140.431 mo
415.468 138.448 413.466 135.075 413.396 131.235 cv
413.396 131.235 413.396 131.235 413.396 131.234 cv
413.396 131.212 413.395 131.19 413.395 131.168 cv
413.395 131.166 413.395 131.165 413.395 131.163 cv
413.395 131.157 413.395 131.152 413.395 131.146 cv
413.395 131.144 413.395 131.143 413.395 131.141 cv
413.395 131.127 413.395 131.113 413.394 131.098 cv
413.394 131.097 413.394 131.095 413.394 131.094 cv
413.394 131.088 413.394 131.082 413.394 131.077 cv
413.394 131.075 413.394 131.073 413.394 131.071 cv
413.394 131.065 413.394 131.06 413.394 131.055 cv
413.394 131.053 413.394 131.051 413.394 131.049 cv
413.394 131.042 413.394 131.035 413.394 131.028 cv
413.394 131.028 li
413.394 124.814 418.45 119.758 424.665 119.758 cv
424.672 119.758 424.679 119.758 424.686 119.758 cv
424.688 119.758 424.69 119.758 424.692 119.758 cv
424.697 119.758 424.702 119.758 424.707 119.758 cv
424.709 119.758 424.712 119.758 424.714 119.758 cv
424.719 119.758 424.725 119.758 424.73 119.758 cv
424.732 119.758 424.734 119.758 424.736 119.758 cv
424.743 119.758 424.75 119.758 424.757 119.758 cv
424.758 119.758 li
424.765 119.758 424.772 119.758 424.779 119.758 cv
424.78 119.758 424.782 119.758 424.783 119.758 cv
424.789 119.758 424.796 119.758 424.802 119.759 cv
424.803 119.759 424.804 119.759 424.805 119.759 cv
428.709 119.807 432.135 121.856 434.122 124.92 cv
432.967 124.562 431.747 124.367 430.488 124.367 cv
423.651 124.367 417.945 130.072 417.945 136.909 cv
417.945 138.128 418.13 139.31 418.467 140.431 cv
416.88 135.122 mo
415.954 135.658 li
416.24 136.152 li
417.166 135.617 li
416.88 135.122 li
414.837 131.253 mo
414.837 131.283 li
417.909 131.283 li
417.909 130.712 li
415.876 130.712 li
415.876 130.682 li
414.806 130.682 li
414.806 131.253 li
414.837 131.253 li
416.3 125.799 mo
416.015 126.293 li
416.941 126.829 li
417.226 126.334 li
416.3 125.799 li
424.44 121.17 mo
424.44 124.243 li
425.011 124.243 li
425.011 122.241 li
425.011 121.17 li
424.44 121.17 li
429.398 122.379 mo
428.864 123.306 li
429.359 123.591 li
429.893 122.665 li
429.398 122.379 li
420.035 122.319 mo
419.541 122.604 li
420.076 123.531 li
420.57 123.245 li
420.035 122.319 li
.933333 .933333 .933333 rgb
f
425.011 124.243 mo
424.44 124.243 li
424.44 121.17 li
425.011 121.17 li
424.44 121.17 li
424.44 122.241 li
425.011 122.241 li
425.011 124.243 li
.0352941 .0352941 .0352941 rgb
f
425.011 122.241 mo
425.011 122.241 li
424.44 122.241 li
424.44 121.17 li
425.011 121.17 li
425.011 122.241 li
f
420.076 123.531 mo
419.541 122.604 li
420.035 122.319 li
420.57 123.245 li
420.076 123.531 li
f
416.941 126.829 mo
416.015 126.293 li
416.3 125.799 li
417.226 126.334 li
416.941 126.829 li
f
414.837 131.253 mo
414.806 131.253 li
414.806 130.682 li
415.876 130.682 li
415.876 130.712 li
414.837 130.712 li
414.837 131.253 li
f
416.24 136.152 mo
415.954 135.658 li
416.88 135.122 li
417.166 135.617 li
416.24 136.152 li
f
429.359 123.591 mo
428.864 123.306 li
429.398 122.379 li
429.893 122.665 li
429.359 123.591 li
f
417.909 131.283 mo
414.837 131.283 li
414.837 131.253 li
414.837 130.712 li
415.876 130.712 li
417.909 130.712 li
417.909 131.283 li
f
379.254 105.66 mo
379.339 104.625 378.264 103.911 377.28 103.913 cv
376.206 103.918 375.287 104.448 374.448 103.492 cv
373.793 102.747 373.481 101.769 373.133 100.902 cv
372.683 99.7694 371.662 98.9084 370.472 98.5258 cv
369.404 98.1848 368.351 98.2264 367.218 98.2397 cv
366.124 98.2514 365.054 98.9404 364.211 99.5798 cv
363.451 100.158 363.05 101.279 362.131 101.557 cv
361.716 101.681 361.289 101.861 360.858 101.909 cv
360.363 101.964 359.95 102.169 359.455 102.217 cv
358.982 102.261 358.519 102.098 358.022 102.137 cv
357.519 102.178 357.316 102.349 356.954 102.639 cv
356.655 102.88 356.279 103.076 356.008 103.375 cv
355.704 103.712 355.716 104.2 355.632 104.644 cv
355.453 105.564 355.481 106.111 356.001 106.925 cv
356.611 107.888 357.67 108.437 358.823 108.554 cv
360.889 108.763 363.089 108.585 365.169 108.585 cv
366.051 108.585 366.906 108.493 367.785 108.458 cv
368.902 108.415 370.024 108.405 371.143 108.354 cv
372.19 108.308 373.177 108.014 374.233 107.976 cv
374.856 107.953 375.477 107.885 376.102 107.884 cv
376.627 107.882 377.256 108.112 377.761 108.04 cv
378.775 107.898 379.189 106.443 379.254 105.66 cv
cp
.921569 .858824 .670588 rgb
f
368.911 100.994 mo
368.911 101.329 369.293 101.598 369.767 101.598 cv
370.237 101.598 370.619 101.329 370.619 100.994 cv
370.619 100.663 370.237 100.393 369.767 100.393 cv
369.293 100.393 368.911 100.663 368.911 100.994 cv
cp
.631373 .364706 .207843 rgb
f
372.542 106.039 mo
372.542 106.274 372.813 106.464 373.145 106.464 cv
373.476 106.464 373.747 106.274 373.747 106.039 cv
373.747 105.805 373.476 105.613 373.145 105.613 cv
372.813 105.613 372.542 105.805 372.542 106.039 cv
cp
f
358.055 103.867 mo
358.055 104.127 358.354 104.339 358.722 104.339 cv
359.092 104.339 359.391 104.127 359.391 103.867 cv
359.391 103.608 359.092 103.396 358.722 103.396 cv
358.354 103.396 358.055 103.608 358.055 103.867 cv
cp
f
365.165 102.488 mo
365.165 102.709 365.418 102.887 365.73 102.887 cv
366.041 102.887 366.296 102.709 366.296 102.488 cv
366.296 102.268 366.041 102.089 365.73 102.089 cv
365.418 102.089 365.165 102.268 365.165 102.488 cv
cp
f
362.022 103.867 mo
362.022 104.075 362.261 104.244 362.556 104.244 cv
362.851 104.244 363.091 104.075 363.091 103.867 cv
363.091 103.66 362.851 103.49 362.556 103.49 cv
362.261 103.49 362.022 103.66 362.022 103.867 cv
cp
f
360.207 106.211 mo
360.207 106.453 360.486 106.651 360.83 106.651 cv
361.174 106.651 361.45 106.453 361.45 106.211 cv
361.45 105.969 361.174 105.773 360.83 105.773 cv
360.486 105.773 360.207 105.969 360.207 106.211 cv
cp
f
366.44 105.334 mo
366.44 105.752 366.92 106.09 367.514 106.09 cv
368.103 106.09 368.584 105.752 368.584 105.334 cv
368.584 104.918 368.103 104.579 367.514 104.579 cv
366.92 104.579 366.44 104.918 366.44 105.334 cv
cp
f
376.746 105.773 mo
376.746 105.92 376.912 106.039 377.121 106.039 cv
377.328 106.039 377.497 105.92 377.497 105.773 cv
377.497 105.626 377.328 105.508 377.121 105.508 cv
376.912 105.508 376.746 105.626 376.746 105.773 cv
cp
f
378.977 107.36 mo
369.75 107.36 li
365.316 107.36 li
356.089 107.36 li
356.089 107.36 356.754 118.767 359.267 123.817 cv
361.78 128.868 363.383 134.807 362.92 138.554 cv
362.719 140.167 360.933 143.824 360.456 144.678 cv
359.975 145.533 359.267 148.666 359.267 148.666 cv
365.316 148.666 li
369.75 148.666 li
375.8 148.666 li
375.8 148.666 375.091 145.533 374.613 144.678 cv
374.133 143.824 372.347 140.167 372.147 138.554 cv
371.683 134.807 373.286 128.868 375.8 123.817 cv
378.313 118.767 378.977 107.36 378.977 107.36 cv
.839216 .215686 .14902 rgb
f
377.479 109.396 mo
369.46 109.396 li
365.607 109.396 li
357.587 109.396 li
357.587 109.396 358.164 119.678 360.347 124.231 cv
362.533 128.784 364.137 134.137 363.756 137.515 cv
363.593 138.968 362.465 142.265 362.061 143.035 cv
361.658 143.806 360.347 146.63 360.347 146.63 cv
360.347 146.63 363.665 144.785 367.534 144.785 cv
371.904 144.785 374.719 146.63 374.719 146.63 cv
374.719 146.63 373.408 143.806 373.006 143.035 cv
372.602 142.265 371.475 138.968 371.311 137.515 cv
370.93 134.137 372.534 128.784 374.719 124.231 cv
376.903 119.678 377.479 109.396 377.479 109.396 cv
.980392 .552941 .0392157 rgb
f
363.555 111.731 mo
363.555 112.282 363.107 112.73 362.556 112.73 cv
362.004 112.73 361.558 112.282 361.558 111.731 cv
361.558 111.179 362.004 110.732 362.556 110.732 cv
363.107 110.732 363.555 111.179 363.555 111.731 cv
1 .87451 .65098 rgb
f
365.115 115.609 mo
365.115 116.053 364.756 116.413 364.312 116.413 cv
363.869 116.413 363.509 116.053 363.509 115.609 cv
363.509 115.166 363.869 114.807 364.312 114.807 cv
364.756 114.807 365.115 115.166 365.115 115.609 cv
cp
f
372.331 112.873 mo
372.331 113.346 371.947 113.728 371.475 113.728 cv
371.002 113.728 370.619 113.346 370.619 112.873 cv
370.619 112.401 371.002 112.018 371.475 112.018 cv
371.947 112.018 372.331 112.401 372.331 112.873 cv
cp
f
374.584 116.342 mo
374.584 116.767 374.239 117.11 373.816 117.11 cv
373.393 117.11 373.049 116.767 373.049 116.342 cv
373.049 115.918 373.393 115.575 373.816 115.575 cv
374.239 115.575 374.584 115.918 374.584 116.342 cv
cp
f
370.568 117.895 mo
370.568 118.338 370.209 118.697 369.766 118.697 cv
369.322 118.697 368.963 118.338 368.963 117.895 cv
368.963 117.451 369.322 117.092 369.766 117.092 cv
370.209 117.092 370.568 117.451 370.568 117.895 cv
cp
f
365.165 119.663 mo
365.165 120.048 364.853 120.36 364.467 120.36 cv
364.081 120.36 363.769 120.048 363.769 119.663 cv
363.769 119.278 364.081 118.965 364.467 118.965 cv
364.853 118.965 365.165 119.278 365.165 119.663 cv
cp
f
362.939 117.895 mo
362.939 118.107 362.767 118.278 362.556 118.278 cv
362.344 118.278 362.173 118.107 362.173 117.895 cv
362.173 117.683 362.344 117.511 362.556 117.511 cv
362.767 117.511 362.939 117.683 362.939 117.895 cv
f
366.319 125.479 mo
366.319 125.802 366.055 126.066 365.73 126.066 cv
365.406 126.066 365.141 125.802 365.141 125.479 cv
365.141 125.152 365.406 124.889 365.73 124.889 cv
366.055 124.889 366.319 125.152 366.319 125.479 cv
cp
f
371.317 128.698 mo
371.317 129.082 371.005 129.394 370.619 129.394 cv
370.233 129.394 369.921 129.082 369.921 128.698 cv
369.921 128.311 370.233 127.999 370.619 127.999 cv
371.005 127.999 371.317 128.311 371.317 128.698 cv
cp
f
370.168 133.572 mo
370.168 133.795 369.987 133.975 369.766 133.975 cv
369.543 133.975 369.363 133.795 369.363 133.572 cv
369.363 133.349 369.543 133.17 369.766 133.17 cv
369.987 133.17 370.168 133.349 370.168 133.572 cv
cp
f
368 138.638 mo
368 138.907 367.781 139.125 367.513 139.125 cv
367.242 139.125 367.024 138.907 367.024 138.638 cv
367.024 138.368 367.242 138.149 367.513 138.149 cv
367.781 138.149 368 138.368 368 138.638 cv
cp
f
371.574 143.638 mo
371.574 143.779 371.459 143.894 371.317 143.894 cv
371.175 143.894 371.061 143.779 371.061 143.638 cv
371.061 143.496 371.175 143.382 371.317 143.382 cv
371.459 143.382 371.574 143.496 371.574 143.638 cv
cp
f
365.811 143.083 mo
365.811 143.274 365.655 143.43 365.465 143.43 cv
365.274 143.43 365.118 143.274 365.118 143.083 cv
365.118 142.891 365.274 142.737 365.465 142.737 cv
365.655 142.737 365.811 142.891 365.811 143.083 cv
f
360.347 146.63 mo
360.347 146.63 361.456 143.806 361.873 143.035 cv
362.289 142.265 363.349 138.968 363.523 137.515 cv
363.927 134.137 362.533 128.784 360.347 124.231 cv
358.164 119.678 357.587 109.396 357.587 109.396 cv
357.587 109.396 li
357.587 109.396 358.164 119.678 360.347 124.231 cv
362.533 128.784 364.137 134.137 363.756 137.515 cv
363.593 138.968 362.465 142.265 362.061 143.035 cv
361.658 143.806 360.347 146.63 360.347 146.63 cv
360.348 146.63 mo
360.37 146.617 362.063 145.681 364.431 145.147 cv
364.431 145.148 364.43 145.15 364.43 145.151 cv
362.064 145.685 360.371 146.617 360.348 146.63 cv
.870588 .372549 .317647 rgb
f
360.347 146.63 mo
360.347 146.63 li
360.347 146.63 361.658 143.806 362.061 143.035 cv
362.465 142.265 363.593 138.968 363.756 137.515 cv
364.137 134.137 362.533 128.784 360.347 124.231 cv
358.164 119.678 357.587 109.396 357.587 109.396 cv
361.871 109.396 li
361.805 109.961 361.745 110.573 361.696 111.224 cv
361.608 111.373 361.558 111.546 361.558 111.731 cv
361.558 111.869 361.586 112.001 361.637 112.121 cv
361.38 116.727 361.74 122.994 364.467 128.696 cv
367.094 134.19 366.058 140.402 364.431 145.147 cv
362.063 145.681 360.37 146.617 360.348 146.63 cv
360.347 146.63 360.347 146.63 360.347 146.63 cv
.984314 .643137 .231373 rgb
f
361.637 112.121 mo
361.586 112.001 361.558 111.869 361.558 111.731 cv
361.558 111.546 361.608 111.373 361.696 111.224 cv
361.673 111.516 361.654 111.814 361.637 112.121 cv
1 .898039 .721569 rgb
f
42.0304 21.6772 mo
41.9865 21.6772 li
41.1339 29.833 li
37.8322 29.833 li
36.1266 14.5268 li
38.466 14.5268 li
39.7345 26.5966 li
39.778 26.5966 li
40.9152 14.5268 li
43.2331 14.5268 li
44.4137 26.6845 li
44.4572 26.6845 li
45.6818 14.5268 li
47.7809 14.5268 li
46.0753 29.833 li
42.883 29.833 li
42.0304 21.6772 li
cp
.898039 .298039 .235294 rgb
f
48.9831 14.5268 mo
51.3883 14.5268 li
51.3883 29.833 li
48.9831 29.833 li
48.9831 14.5268 li
cp
f
52.4372 14.5268 mo
59.8717 14.5268 li
59.8717 16.7133 li
57.3571 16.7133 li
57.3571 29.833 li
54.9518 29.833 li
54.9518 16.7133 li
52.4372 16.7133 li
52.4372 14.5268 li
cp
f
67.5905 14.5268 mo
67.5905 16.6699 li
63.0202 27.6464 li
67.5905 27.6464 li
67.5905 29.833 li
60.5495 29.833 li
60.5495 27.6899 li
65.1193 16.7133 li
60.7682 16.7133 li
60.7682 14.5268 li
67.5905 14.5268 li
cp
f
71.4162 20.9775 mo
74.7179 20.9775 li
74.7179 23.164 li
71.4162 23.164 li
71.4162 27.6464 li
75.5709 27.6464 li
75.5709 29.833 li
69.0109 29.833 li
69.0109 14.5268 li
75.5709 14.5268 li
75.5709 16.7133 li
71.4162 16.7133 li
71.4162 20.9775 li
cp
f
79.4625 16.7133 mo
79.4625 21.4145 li
80.403 21.4145 li
81.2995 21.4145 81.8458 21.021 81.8458 19.7963 cv
81.8458 18.288 li
81.8458 17.1943 81.4743 16.7133 80.6217 16.7133 cv
79.4625 16.7133 li
cp
82.0866 29.833 mo
81.9552 29.4394 81.8678 29.1987 81.8678 27.9526 cv
81.8678 25.5473 li
81.8678 24.1259 81.3869 23.601 80.2936 23.601 cv
79.4625 23.601 li
79.4625 29.833 li
77.0573 29.833 li
77.0573 14.5268 li
80.6872 14.5268 li
83.1798 14.5268 84.2511 15.686 84.2511 18.0473 cv
84.2511 19.25 li
84.2511 20.8242 83.7482 21.83 82.6769 22.333 cv
82.6769 22.3769 li
83.8795 22.8798 84.2731 24.0166 84.2731 25.6128 cv
84.2731 27.9746 li
84.2731 28.7177 84.2951 29.2646 84.5353 29.833 cv
82.0866 29.833 li
cp
f
85.8473 14.5268 mo
88.2526 14.5268 li
88.2526 27.6464 li
92.2106 27.6464 li
92.2106 29.833 li
85.8473 29.833 li
85.8473 14.5268 li
cp
f
95.5553 24.979 mo
97.8732 24.979 li
96.736 17.2382 li
96.6925 17.2382 li
95.5553 24.979 li
cp
101.044 29.833 mo
98.6168 29.833 li
98.2013 27.0561 li
95.2492 27.0561 li
94.8336 29.833 li
92.6256 29.833 li
95.0744 14.5268 li
98.5949 14.5268 li
101.044 29.833 li
cp
f
104.345 18.747 mo
104.301 18.747 li
104.301 29.833 li
102.136 29.833 li
102.136 14.5268 li
105.154 14.5268 li
107.581 23.6884 li
107.625 23.6884 li
107.625 14.5268 li
109.768 14.5268 li
109.768 29.833 li
107.297 29.833 li
104.345 18.747 li
cp
f
113.9 16.7133 mo
113.9 27.6464 li
115.256 27.6464 li
116.021 27.6464 116.48 27.2529 116.48 26.1596 cv
116.48 18.2002 li
116.48 17.1069 116.021 16.7133 115.256 16.7133 cv
113.9 16.7133 li
cp
111.495 14.5268 mo
115.3 14.5268 li
117.705 14.5268 118.885 15.8608 118.885 18.3095 cv
118.885 26.0503 li
118.885 28.499 117.705 29.833 115.3 29.833 cv
111.495 29.833 li
111.495 14.5268 li
cp
f
39.9142 42.1157 mo
43.216 42.1157 li
43.216 44.3022 li
39.9142 44.3022 li
39.9142 48.7846 li
44.069 48.7846 li
44.069 50.9712 li
37.5089 50.9712 li
37.5089 35.665 li
44.069 35.665 li
44.069 37.8515 li
39.9142 37.8515 li
39.9142 42.1157 li
cp
f
44.8556 35.665 mo
52.2902 35.665 li
52.2902 37.8515 li
49.7755 37.8515 li
49.7755 50.9712 li
47.3703 50.9712 li
47.3703 37.8515 li
44.8556 37.8515 li
44.8556 35.665 li
cp
f
26.4238 12.0747 mo
32.416 12.0747 35.496 15.6587 35.496 21.9306 cv
35.496 23.1626 li
29.6718 23.1626 li
29.6718 21.5385 li
29.6718 18.7387 28.5517 17.6748 26.5917 17.6748 cv
24.6318 17.6748 23.5121 18.7387 23.5121 21.5385 cv
23.5121 24.3945 24.7441 26.5229 28.7758 30.0507 cv
33.9277 34.5869 35.5517 37.8349 35.5517 42.3144 cv
35.5517 48.5869 32.416 52.1709 26.3681 52.1709 cv
20.3198 52.1709 17.184 48.5869 17.184 42.3144 cv
17.184 39.9067 li
23.0077 39.9067 li
23.0077 42.7065 li
23.0077 45.5068 24.2397 46.5146 26.1996 46.5146 cv
28.1601 46.5146 29.392 45.5068 29.392 42.7065 cv
29.392 39.8505 28.1601 37.7226 24.1279 34.1948 cv
18.976 29.6587 17.352 26.4106 17.352 21.9306 cv
17.352 15.6587 20.4321 12.0747 26.4238 12.0747 cv
cp
f
%ADOBeginClientInjection: EndPageContent "AI11EPS"
userdict /annotatepage 2 copy known {get exec}{pop pop} ifelse
%ADOEndClientInjection: EndPageContent "AI11EPS"
grestore
grestore
pgrs
%%PageTrailer
%ADOBeginClientInjection: PageTrailer Start "AI11EPS"
[/EMC AI11_PDFMark5[/NamespacePop AI11_PDFMark5
%ADOEndClientInjection: PageTrailer Start "AI11EPS"
[
[/CSA [/0 ]]
] del_res
Adobe_AGM_Image/pt gx
Adobe_CoolType_Core/pt get exec
Adobe_AGM_Core/pt gx
currentdict Adobe_AGM_Utils eq {end} if
%%Trailer
Adobe_AGM_Image/dt get exec
Adobe_CoolType_Core/dt get exec
Adobe_AGM_Core/dt get exec
%%EOF
%AI9_PrintingDataEnd

userdict /AI9_read_buffer 256 string put
userdict begin
/ai9_skip_data
{
	mark
	{
		currentfile AI9_read_buffer { readline } stopped
		{
		}
		{
			not
			{
				exit
			} if
			(%AI9_PrivateDataEnd) eq
			{
				exit
			} if
		} ifelse
	} loop
	cleartomark
} def
end
userdict /ai9_skip_data get exec
%AI9_PrivateDataBegin
%!PS-Adobe-3.0 EPSF-3.0
%%Creator: Adobe Illustrator(R) 10.0
%%AI8_CreatorVersion: 19.1.1
%%For: (ivan) ()
%%Title: (1512.i042.017.P.m004.c26.switzerland set.eps)
%%CreationDate: 12/20/2015 12:24 AM
%%Canvassize: 16383
%AI9_DataStream
%Gb"-6Bj2NLc7o0F^9;>OK<pY)!7UfH,f/-#O>qdkfb\,a"rt:p9?tY,G^fOjV5h/]DWBk!'&/A;H"Lq<=0!U38gUI:<!s)gXa[T[
%CS#IRra*pPlBtYq[PF/NAQDOs5QA3sn>pdMFQ8@fXCc.Sk$_IMCWk:3)qu04Q$srkp's-c9$ltf>P2$p]:R.E.Q9.:bNJ@f3V+Dm
%f3<`9[d3%t-%(p2ZVQIdH;JF#)Wb;Fa_Cr8:[$gt?2+a<i84Z]:\G\,3XU0r+:3!so7b*<D7*#edXN#s*<t]7DQd",eQU3N9@u)1
%k:l1rTO$\%!82ZfL]8pBO-r=R<pnRdgh.sK"b66315KC"Zen5CQbIL5,G"h/M?!([F>!d<s.G%qB#B,WhaYW0=PV6=5lpj:\:LE+
%[,GXbI%V!mJ<32D&g_cB1tqVC0;*kP$l_ZOeZ^Ud:Y?<?c_G:1=i\Ub3jt/.N/XlI6f##RQ6Vhf,96W_"b3XeSd"4jck-AJlh$3P
%s+LJ@Xfr4.J.MPMT_#$`l[ctkOj@P,Z;hA!^gZk\Z!O;)<>_P3'ePHhSb&KZ9%g6=E<t,OSgJr6eSg\p^B.@o?$*C0%[tG?[m]G[
%l!%<2ESQNAA9?nU1]32M=E:2g!:-p`[8Y"q3$`Y`#Nl)oE5,=5Y;Op54W%8@d"R)>G&#Pu5@#Monc'0CXJc!JQi@f]!qX*3d$41g
%`_$0+U?PkTjUl[Le#_\9%31'Src9$#]F!k1Dk2enUOUX/J>1p:]Fa#^<=;!h2%fA.rpLU%k+*LAqs`W`Vq#_S2:#J+q7jmR[<3Bu
%h?K6OWrqBcc0V'OLOUjd(24OrN]Z>0i.-<4D6i8,HYEmTi3O)-pfI6Vr[IkcRdX[BK!gCG0Qa5g1T7e:$=[n>#3/"_gamY)oL"G=
%<;R!:PX/%V8o,@:hP\3sb0gL!&/K":JH(K2b"l`_.b0tT-jWlAo_rTJ/oe\,5rl6WBojBA#//0u+BegE2i&!e]aM(E6*o8SA\nD*
%jG^BW=;m.oEkPd@n!)QC[7Y&Ce*gURNa&W3Lcs_kYUB*&q?ao1a[RrI2#!K`cZ$(^_-i%+jnP;omOe>dW@.I\Q?n[Ffr<Q<7#dRk
%=11-cWsh$rWh$"b`hQn#doO05D1pPAa8sMT>,<8[rTa*.<4;%i6Gt1l./m-n-NUrIP^[g03,E68-MRq9UOK<]7!#]bBVU?N3P$WJ
%"-Sa^GncsZ:LII,f<*TRYq)9GnW-1YGJQQ;cq@LLs3@^`^YZ^V]`K"'r[u\MkY[R+^W-2YO]hUo;/a=4WuupfmBkaY^lYZ`_d'*<
%*c+ccW7@r>TLg_obh=*h-fL-]5J:FF2Z1(`CYHX'B'fkc2UCECI[9;JdH[o=[<F@"=gQoA<^;1K[kcLX>QhJ+Md?a.AA_!DPD5K4
%.JWZq3>QX^-b4R#U3r\rB;JX'_$`/ik4/4."V6)YNeJ6/dn4jJSte*I>nfo-i%<N+,onMbAeTOic7+F-bt9Zr3rIN1Z%U1G`mAs2
%3^L5^:Lb2P_hlXUXCdN+kHs"RMOiZq*sOK[PoOI%.HZTZS2L2'rCX9k1Is;Fe]*g4WS'>te\I^rcWZ[h@<*b*Dm@kBNQij]oW'qg
%D^9tqECN;=r9A9h@M;USN`+3U)NCjGV/&T'I]!hFEc@S(UJqXrNh;F:.SR5'6)P,WA-uA3VA#OS'SCNW.SDL%IM3IWXGeN7XUq"6
%2Wg^ge1i`ijX(P]=n>I-*m2_u.!O5kKC`;seZ*cT_-A0?P7QeRUkWJ<Q:kX8kHWf)QCGp8o2olObKXNW2>j^s;_48mR@/on<fPiG
%c#!\MKDNta\_?oG<c$*Y)jg1oh(6Q-]OFd/ILF`Mds?M.7A%Oq-Ug#Am8XP1cPiAR:$"44bpVi]m$@P)DQV^L*^+8em5Lp[T5#:N
%?CgMGZ^Sl:<[X9f8iQ.8hKlTTcFQ=1MV7JPD:g,sqEFF-PI%o^hBSWSX3eP>^Fi!r/MY0@X.CXs.,)qDcG*fj&#/Oe8*SVVY5KdZ
%XE=?1ZZ7?OWg(tH>-.P<@_3>%_-m!&j\EP?m.STH1nur+ai*u'dPJE)GIuB6Y/Of@ac$EDX1AN8Ds"rGL`KF!n_Y$sr-*a/fVuBj
%fbjL.q%s@=>-h:&QP<X!I:O=SWEKp`_b<*Sf?=UrrQ[ZC#@[&cr,IbZ],]:5!E(HVQ_U'2FZ?VQ'K_eNBh[.?">*[n*m?H'R$6PR
%N@p2_7)aDTB#*i[^hS,Kp;uX.*o2C^7>kWc;sR^GJmOo9q4Ct5B/'\+:8[bHPAcTdqD.9)#:R]^oQJYeOP;c:^Qj]P.A*+#"nh[?
%T2FB;r00u,G,@C(RG0gF[p&Il:([=^`?s4/+7ZU7N62"S`pDU;d'G1h6$LK%>!J!7AAa6as0lD$h6)rQ.<q5Jd'?imMMnr"XF/^d
%ZnJYh@#BY]$H%t[A]E/'.[bH9FrQClD7]^*2dTEu]N/sgH.^U#E3g_<D8'^C=t'YbIL:7I1&bNn=:/DNqPSWXHStJ;4cS&T.isS6
%`eU26!X1#J--lr5#i=\I$>s[97\+Hpa!U1&prOS,5>Au:oWL8h(=)//"`lbkc4gUC1J;@5`<KNFU>0PhoqS0TcZu>>:E0.@;Z%Q4
%fSmC*J&@mPGdT!M]'XgS'&`@70?`aN>]L`o5aPr\D'gHtkk1drd%>XNcg_FmT5"3Ffl1DdnM\l;9][p$r>Lr1,\AWn_f(05AL+/-
%^7D,,jedNNUm^4@5<Dc%`6<IFBs.40JW_>.2VZMT*iM-#ea)Hpm*mCA`o[&(j^4cFJ@O&$b+4c#b:TVoD9k8F7[g$EAeT7X;@L`_
%E1Y3!MKY1m-&#@c[F0<VXU4Q[@Q:B%MB?i=8[6YL.%D7&9=\6.iHpY8(lFbWMQ7HWONO$Yr"Uq@T"fOI8MOAO21oq,>:,VU]n.on
%VVj"?3[pqpX_&J_XAo%UrY;>"@`,$!SnMY3DUo`*87)*t'\n;WCocDE3/LP$T1#*-!%lG\bZajPIM-4\o!=V9E"XI^]pef.I_/@L
%gu<MgdhGuTT1'@)c-N->fFXlu/SF,q9'%t$77jn/:B+I]gTc"Kc_AY0U<LrXbg3"glR[qm5B%C7EZ<;uV",>!IZ9eg7@?46<k/ZP
%;,U-YWLk4&ZR@b](1e8)BkHm/9e*2`N<qPcZ(14@H)](%c:;@;W`@9g5l=Y4-:u%UWaD.J4"4#)NftDW4jN'`PpTWl/!YR$>=%M!
%Q'o0gqaYhSRG5+`,+.,m\Qt]Z[@+773urjqh6jf*2U,hc5UDt*[CK;LSlM7ACNF-*DUmlMmC$+SF[tZVL//f5U2`gLK)_eZ_"fgu
%r\SZYdjTnUk0n!-N<Z<.61+-6IS_]t3k5\9)?9I^4Hh3rTOmI(k:W1R_c0,ZQ*rJ`s#NH@26s*q]QhW<MmqK9U*k7Vh_;ErDSuKh
%)>NY)r!i[M"+J>HU@Z`XRPC:57[Xfhj37DeQUU/IYqX=Fp?#p`@V&C`_H*dA%F/_5d8*3O<ipOAmM/V;%]/P\,EV4jI$lnEkVV*/
%f$j'BhlaEqdgaID*93Zh+/[cs>^P4:l7ZYFZte'-#:ciF]@DUXF2+@,?2L%p#:&=oj*P6\3F"@S"]Alj/k>"(e`";5'8oI]n;tY7
%>u&aiV;Yk4;5P0@k2^bXUJ%BUp0p-d1ZMA.rL.uE`FPjs`nsbPD_gS5:9A`f#^U2IZ2a&WEY^SXY,Sf"RsssuIT*NOHQ/thcM)hO
%qnMb$h[qKeI/ipfk9'*l)qmd(\N&L<SaZC2!*?XZcZf@&`dH*V^?7T8o:>@G:4F0t^?7T62P=5846reiIUhZf^b+7*9g'UT@ffQX
%PjA$)BAeUgV(K.uCHf!W..%kJALl>XMRa?LRVt'q]lGog$4_J=.IMWgom5r-nLW7,k8-9pYZel#]I>f[r#k+41i:FP4@;$QOT!S+
%\8g@3K'!7ghSBE7MRE',`m7hh*qV?O6$8sQ.5scbjih9#D#TO_'W95S=oEXFCn<k\kKi;d1GIrtMHueDIqt$mDq$jf0m/[3-`(TR
%$?h"^r$u?U7VOsC1ejZ5ECU?&qaAc-'K?XRM1oOgec(j[>.X*o!lhop]?\pl[l3!(_DoX\]gcUCplhZu3C3&Xhed=VY/Of@alHoc
%;(:ROian^+R3u>??q>i_(/DMu/.CWIk)#FMian^+R3u>'M3iMIAZ@!%gQm)`?]g\BV'?iK"B%3jIMX.t,+P.e%+9");L>NFdQB6B
%0/bPEpLpJt[*dA>Rn-K=@+pN5Uu>`gCgr8sJ'Pj0GhZQpW7Q>#jk@eOq^a@Wo-+js]K"1e0ho^J33U7W*K/r8_lThE+O_tl1UB!b
%.kpo4/rm9JhgQ#gSQB0e='qD\Rca<=N\8K)emJ$HGQ(1uV-10!oBYaAlk?0CJ2Y0f5/G@)ih=G.MO-r7dA1k8%1f3bB8hV\Vg[8p
%^%H-2STTQ+cA#(j9kfdjM(P4XSDP\8rtf0qIknUE1DlLfOnju@#I?37o*B1K+uJ-((<1.R?aXXKUM-CXUt.W`9Z,(COR<rbfPjaT
%XQjs9G1-/<'6FJS'YnRa^79(3d^Zb"oPWi;N-QIS[dt?]4HD5I%^:-bnec(cR--3$2U\/Z0kP!nS`_`)eVqiG)"Tl0N8u]Ibj:Tn
%*HmkI+EJTrV%D'XVd/JOl`XL"2!<-Z]<Qqod8,Flb&,4]<,VJ%daX;qbQQ*m2FV>OdrIAqG(Lh7TNOi"R16Nq'Q7^..Q.*_I4uC#
%;\f.*)c)?jB'ZBslW$D#gg`ncCj0-bVrB;ZH:H0Y][5"b>;P5)6YVM(=f9e@1H<m#Eh&qMr1hk9j&NH5a2P]/cq&m<?T0CXU,t"I
%PebtbCs[*0CL/p_\#3M`j*p0u?\^'pb=TP);uItAe331"lb#@$Dk+)A.T*3]\*:\0.V<;T^fMFdVZ4/-[(`)i\lM!f$-b;Z1-b7c
%q\omUEGjI2D'pGn[jmB>h;18;MShpT1q)?0T;8aTZ/#@I/=4ZCc(hgp1cLKXk0_ru":d4&c)#Bok0_sHR[XZ%GRKRfh7@h`7AYeX
%%HgW.2@o!5iS6PcRtl(VE,H`B71kW0S&2^8bfia?\#S>GJF6^D<B]f8dhnp\O64lMaZQ/arHKsV:$-.kf\?+u`%A#?OWn\4f9M`T
%a8DR5O4h+E=MZQAj*?37CDl5*)R#VZO>3/6F<,aHIN3\4ZsKn?DIaU6C6pHYhQQTO\^56_=$99D>-sc`/uF!uHg4<m8j6j()AQ->
%Ao\Z0WJk6aQDiD"X*QSp.GM59J%hZ&+-XBXgG[gTje[GhF4tKc/b,i>&'2sgr"LN'])BoW\Iol^b3>G@=S#,SQ29=FZu!]b:GGp;
%7J!Wn[oXXH'OND.0_iV_\GPS9eLffBmeT2$eZ1e?Q,19I;Q`U?[Mn@AMTK'$DlqD_[20[gSCDN,YhXs7=&+X96U;alPqk_.[%4Gu
%<2bpN.&G[[?2:%EOGt`HR66\igb&&IY4ZJqg^fj&O$O9>2-bmp:F=(g$JR)1h>+\=C'N:!0`#>J'[<2C5NNU(IA48J1nKdR@A@Gg
%.Cs@$Pcs0hc$d9NZ?r20:@G/gNbY=!#<&$8Au/W%0%62lb6_@V1d$_siY1@gS8KB;SZdk>?qlZ:oUA(o^FJ*K6a$)cn"<o))+i-5
%U0-j5H5DP`eU&2*`Gle*g9`MnBbpJX?Q@Pa0OGft/23KC"Z$%.11)!`CZEpINO,!<Sj,+mX\R420oE:n*l!ttRFI$s=Ms<F]dc4S
%>fnTMs0oP_m/4E$H"!F=$rNc.kYfnfQjF_7B/K.NUq]7;G])cl1n#g3c@VUZqF,09^@#<IWb[@Xp<h^+QWMG>kr'3ab<*;3QcJ5G
%18]C2Xep&EVnP^Al><J_nb]Uc'4GO'?=[N6kP[U_Sf-02\V@^SoeQk0ml3SQ\#Y\`r.Nl_g4S]?gJ#k_'\<V'B(G/"*_`1fe.\?C
%[qu:pIhm-`[E\pH+4E-b^%,m+d@H-\Ule62j!TT=VG0:p>#3e>'`6.tiCo]&gSA@_2ksr%]:/-4eSNZKVVci4[QW$U+V`qoQ071&
%\_0,=o9-s)lMS%C*)(e3j*H1.9XpWU8AEL@S>SR5W=M9Z*I5iYlgkDFT2*2t&^0'Q`:>iaE6Un7(34c5G-]SuL6!JibXTt$X&efl
%YY_`h<<:tec>-/IQiI!@X#Bq=nS\[*55ak5]jq0Ijf5H3+LBngG:t^)bK]U'd)kWuW^,US+#Eh1^0Iknc?V\l9oiM\qAT9M^N,J+
%o@d(h.gQ2'ioL"Aeje#A*/pV2M2i)1#5s$GU]2hD\U"%"r[lad*FVD+0$M?Pc.65rqA2oL`D<-;AM@n,5]pCaRa@QfW\rN'+Ddib
%p@3Xn0dlnFq_CJJiIA.nmlCXUK3?7&%K=9;CtFD+>gp0!+9'V]f<>j])nPDJ`3:gXo0.qCjN4Cq^[PUViNM\Mq[:?+H("L#7E\[1
%"$[jd'S2jV5TlU17l=??fgc&lXH&Y#6+J'/H3#gGE/NG\[V"aAN:2!<rLk*`!Ism5mT>(h`D;9YICIh%r$obtR<\a=P\9oLs8:b?
%,tW9<n#4Biq"`ghYY=r<jiXDb\!VXRJqO)PJH*?.$q_jq37s7E'!csL%4VBs0s)=Z4?*(k$4AbKIQ[JW3,R1Xec2Q$WWD=^*X'lE
%<i+](^nsrrJW(@>eg(6\)ZL[ZGlaQhb6^Co?K@c!\BOn#1cNq-W7>S?j@X?"iFMIEZ[;8Lh!&^8FX<\8r\-5e&#ng5s#K\FC-m<=
%7S<>SjY@ZWk_U^M9in3D_:)R$+"eL^i"astc5[#$=2[f?7b-W[W>,A=-s&HG$Rb1,;8ZX<WgSu]UaN;Nf/F'&5LZ)*Cc`XEO*k")
%h-R-:"m59_Wp"c<N6WQKTeI#+C[.OZ2b2oSC&MalDV%kUT)CMMqE4qH]N_R>DN>[ECb;\*R[mSC%*J5nfM;)J0bG$]6p(Y>);83<
%d_/4G6n#5O:S,$qb;Q]e#B&neD^+/lZnRbC*QO`UB,[Y#/$M(hXk$MMS@3b%@?cAMhL;AG5!C,_`!h,P29l>-8^9WN>K>4O9u%r3
%'m)9a?F^D\edW2Ns(c*3<CO&9Q-Lh\=W!1`R=^1KSkQcWbKZ[@mSWAdo#oAgDqBW7MCSL(Tg=n6,IaT:);.BSenrs\]c[FV('U71
%\%ZZFT\Si,1?Y3/^FdR6_k(prIcb4g]uV1Z]=jk9q_'8`15>o&dLQja/tA;4m$%BsY74%CHt41^iItb11Z_C#ZrQNn1K8rf@fR#_
%[uP<pp?8qG0G"Xq(2VX@D>SLeK@e8>;6?;O7M6b85po>MN$U_4Ft?g^fWg5W)K[KG#D3kjlbK^l[kjk$o=SEo%l+BlFu5Gg@6`rY
%h4X?qa;bG7pG+h\>-E<WX4MZ<+^=m:18re#%:uKP-jlQqCCuf5(GpaS,O]3.<.q8m:?F*D=`3qJR<#uAmNsd?P_Piuoia/moRP^"
%L6A!KH_&`!BXo]`Y(BR4jE84r>\?[Fc_)o2bR6<'+R!2rX^:C-YR:eZEek4LcJQ<K!aj=lVeN7"U@)[eXIB$sbj?/Bot$CK>JL6%
%L0qn9DPRas*]l3L<e!GSTGXTgHC=1??R_=6^"*B^_AMrad%kaHW&s.*[a^Jkc_/b,e8_u0%QXWf,K8"^=0$su]BrX;E.gOH?.ENu
%T@J*:44pc7mTpB^,"r7kU(*nZPO%sHToi1t0k)aECR^r1QeT;r\(9cpbDL"kRpJtmeb4a3eo&/)j)>jBqt9BUYE)n)p"SGE-LP1[
%"ncNi*[jOX<@QO>3d%DfZ83-%#+gIm?6Rm#rV[QXE9oW[;<jNgEWdW+=/0!MjOIn4ga8;I%K*ofl;WCN!b7Y+=0:?PI[:/G(-,c<
%hcm!];SdCe/dJ_pFERKKAZ^@fF5q:74,J/peK8O^)mE^UK)s@/[d/H(l#_OnmF7.`._/-'(pk+2FB/(WRc?$Xo@E/4o;n3SL/opV
%-(#Q1dEPu@[>d+#0X\'hl`/p:`d'BrH!t4n@n%g-(i\dRg1d2feq#<S6s$u6_!94];4>g?Nf3[K[o9H\E4s-7fTd?P9XVA-&_iPX
%[qocfA!T$t,)J;-8s!9GMtQBa[XRJ@WG8jcMk$b(af:7480a4&0eRHCdC<F[;Y846Jf6T*6NU50YI*&TlsD>aan1HNeEtemm<5l<
%#-6U>q&Db#kjN[1>n6Eb,*1A4r2ep)d=<Ll)DLE^*%[,J",A/c-tLu5QdqY-Oa!&&8932N`auSUmTap$*cYBUV"S1i\llS(GJfPd
%Z^Q"o-$A][`g@lXZ#s*J%gPZn,X_H8XV\E>_-=)h*EG7qs%92X,u'H&YX?ZkI>GODSZ@e0VAaPlkKUpKIu)0E>lKgUFhEkK\%>e5
%OtbRQ>_+%E^PF=a'#I8SP7;1&.32h6]qV2A<r(AK9T/OJ`Q*F4lY)rS)2"&<MX0AIp?,GM6DWXs$3a7?2$%+rIECn:N#h#!agee?
%&Y>:M=!9_Bp9N4p]5uP<?J.=U(dVar;RrMFa!k_6H#]+2)Hl=0[sAiVB8l,Jep<<2ILs!TZ'.pS1E1b(JF%Q/*P73#9&iuVQ":=a
%DU?`DX+@a$"k'opp:CA#^?!*?LE-IAdhrc*/Wr\"c\Iu.=.@jp`4<`*mIL%J2kA+h]tu&dAuoIU[B*et6k4j$cA9%\Ohs#p(8qq3
%Vm*(,+)sGB<jT^^!&FcaDI9b3ruKRieNj^92%[c-_f70SY[c76Q>Xq5%W_`P_!S:&?>(TrKNo%94)9l+/Tl_/9@*GZ>K1hp(1FA`
%pf92K^G:L<m:Ycrm,44MkA$7%2GR7%6UW10&[nEmh:VL:N6d8P7jB1E*EJ!fm+$cI7WLN<[?8_t$?V)@Cr<:h88ct\=+4GK/_m;Q
%ls;,=B[j*5A!u7cUY3WHM;oN%C`g9tG$=8`kiQG65!"O[])C*>2`',Re<L_Sif*0>MME@reV9q=S<ksa2pT)=+1O>.;-c[FYT2)^
%X9N@n0$;_;UW.V:bm"TLS)ba1Oq^[s-<W3.QuS7j7@D7VfqWBG?#U-*@^ua+i:GsU]D[B.9:;El-nbQ:G;TdGi;k?ZRuE/nop@nT
%U0Y=_CgEmt*;K/qQ#n2GJE4^?O0*T55H[G!/<7kQD@:cFY_4="G]L*XRcM$Y?@\JU\"bSdC4?K]K:m9$%-7ZuF5&_Oo)KIV.G6aI
%6Q94Z'=r?@DihjgJ6Y2Z+%e%0k<u[Sc&RR-n$'oA-9Fs6k":dbdRL*JP5>l/Y3>5Nr%iR(X*^sS%s#S`9Pua:p7l6`&H7k5.M?o$
%.%\N9T=oQa:Jk#jK3LUVDSFogNM'H'ji("fZckXj%?fk),c+W2p;$+/XTa2[[J%c*;%ikc)'g/"*kTeqX2ua\?IYG&H8WS&Q!YSV
%C5nS<S\A%YP[oeOZ1*rDcijH9e$4A`*n]KB"Un2(g^,_I`FX]=QiR^78#VpQlQU"S]&fPT9"CA+d9344j;=RfcBPs9,N$9;qSJ6K
%D!"HY&B"Nkq7@L'?`edS%J)X0C1[NJ$6k+bSsO6;9WcFoAJE*ca[!liJgQFSVUn.&Pos##,\8u70CsD&E1=DnDV&Y=h@K&6/Kc0\
%Y?@N?9SA@O(B)'_5noZ"SOE\3\s\$=&o[&G7qe\R5*\mF4XM<p>9A'>^7^o]ahg'0U+Pijf>@KBX!S$"mrjq\8Fh)$[ch>Q@QV)$
%E<dCIlcHEs%:1VMEEhVXGhjFID0m#D#9<X$bWCh*ru&q81@#ERTMN=#0uJbZnuZM(bp4491N#=Z^j5i[`b<9069&!U*Mh$nXIk_j
%Yss+OOUsoe6ObtDp2C/+FO2Ois*BK19>rtj28K'uk4pG*3M).*M=CsU$r_ruoF]X7WZ=>bg./hsZO3aK)?g7>BeRUY?.Dn,&`(s[
%<bY6V2:d"V9qdMaIXG^o'b1XI9(;;10D^[WB":r<,JF9Ro(SRf0_U.j/2=[KRRTnb(H\`'N9O]OcK4c8`^O)&d2h!L9<3BuGfS>8
%=ScN"a]ZCkm`+bJ=+'nNeSJ5<5Z5F@B"nq$S#9N^^Dn:`6*2Xt7;=&.pFr_;4)K[+Za->c.-EE7aK?,]%2`=ESTe2$<GJU0+(;.O
%'L:GIV]G#dVfAlIG3r;GVlQB=_Mn<`LAY5XoZ2l#V:+^@5oW9k)C&D3_jZl8aN7FCXj_<o<;mVccIDN?'H,N'M&e8M6e%tN=?O7F
%lj9/^W,_B7`Du&1oToFjC,tEafgm>EK(t]fg44FV:uhqO&*$%qc>M6E.%<<@n*PCD!Q*M>?*dnBT'ei<[(Q5&n\^@Wqj$@,KDj?f
%Xj1hE@f<rbkBZUCb2U<dXdne8GMYI:EUKrI^"Ii)dX&K2qY]jE<i9;EM`\pODaCk6H^`M;HnV"nB_Sto^1JI(D6C7X>MU+8)K`<n
%;7b5=Xe,9qc_%m'D/EIm;82c!8YqNn5!0qPX&T#t*P-sa_RfVa[o`A(A_['k\rpj98mM_nHPak$S9t3D_7KYaqg8;#46WP\VEI.<
%`-1&2ceQ"55CLftkHf(spStZ+s0B%X=o>S5hT[sE$S)V`io4kK%([U-'u.T3'[FG*F1:I>p%RcbgD@R$L&4`.8`\WY6:ER+f\1`L
%n/W_TU:^6)k?hH_f7P0!^$=IFm8`WPrS5fc]d=E_^0L%m2u`QjjiU?;I_D,`YYI)7Esq,_jm?,"hj1bB&)S)m63#>r\'OMKCfDnG
%9Dkj!]Q7,bi3%3>XmC4GpV3i^^-8`<f,(#B>jX(lmcR24%t5W'93W@]021TLfm*C*/(^jbCb.f"\Zt9T5!Q3\mTTA/b]PC^qXWaZ
%*ho_MSp0(DjP5NAqp*]kla?Xo)$X5nq06n%-.oB4#7]hS6YTsZ^UJLWh9Lmr@jQfFhC%LC'0"hF]"IjIqJ"bF^%[6M5%uVL92D'J
%pMa4u3U`Ki9bc-AmE6eg<@I(cC.Zmhgj<1+.rRU"hHBj1_/:7ji@A?1-I@`qH?[]0Ik3f5DMl1ehsJ)7pA'uEDiDs9@-iFK^XndD
%4P<jl$;\ti$UjG)Df/Oh^\UQt),^n<p:"nl%CFi<*g6"=,!fR`I#+m+MdZ7LmD90d)rdipQLiN"?HF3(^+U;JemA:,.@2.5hf_cP
%]\\$:3-gZK^8U[E#PT`%F2s#l.Ze_dI(0D'<Booas7WfA8r8flVQF2Y,A^[LgNb+Nm6dpnG-k0oOTOD1ddiTK)t/$9&2SF7F.t>&
%h6u0)05bnn(N6DJQg^No.!^!<j1kpa>$9^"q-OB')/!4i]bD1l/u!r82O5HZ(Q4!Y^9'Q-fAV4&[2L99igdHc2NE-.F2uURrF'CM
%N2@eF3Vr2+G7\qV2XO#CQ5^N<s3M:6M\"N7q$ZBTj3FX4q5=jH3\+BQn9?1RKI%7gUU6LPH*3@VD6A=<ifnkR/aRn0bJFVUW-Uru
%)D?..?ajAXo4QB49n..d/`s*n%qJ6F`aO)'mQ>q7+a87/`uhd_*T)3+5Ql02F9MJph91KPqKfi3`l?NRf&*likoFSAJ\P63]C!5.
%^;%<h]c*!S`a6,sQEPFH%[kVm:C"nf]tJ%j?Q6iXK*KQa_^/9fQckG^Is`kq4oYpKc%KF?8rn.B-e1]SkhG^G>4(ihOV+*HI-0LM
%?ae7hhB)-NM`]e]pX%1IZF9?bPXp.6V=htZ5&f*1_nc$FS]^&T#I4T'..o?bkm*h%QG?NbI[E3u[i_U:?C.:8.=>g>LDQ#W\JH?J
%Ra@%'d:IroX^h+AI_PI7=H>$WNuf"\EY#q)QA!.bnRUn0"Yg&_\/E*3Z;1^SPq%:n/n6Dmo(aM4<d.b0/'!pq+NW1'@#D_6^\m/t
%A(%QkUQqrn^/fSd7HX#GPN0N<(XH-?Rlg<VrCYk85AG69j-NsXg\'`5(<>`>1f7QIC$h%jp%ELP4a?\k:d=pT->,NPF+;54])OXk
%n)d8Ipt$2+FT&H[S?>*,<u1C'6eE(9-N4T9,oHW&)_GTl^8-6>7j[1Qrq`!G%suABCn";`2HPg>]imBP:-Q+1YfS4qBP``k6J0mJ
%[X&Z3ibl!<30(,&r$UG>)q5#43?XcH#il1$jd6nGP^,a(:dE&,gE:<02hY[;8k=&%YOkU>1dlU'(FX^=J\MgB:EsRoA#,+gff\/:
%*=Cb]6lL6TWH&Z3i0,\32t^PeN!+5Y0Gs^"at#eRN0(!t&p[/u7K4W4@Fr+'&^X7"5bB;NhNc!q7+5Kd?efGh:SDKZlB+ClY]2,Q
%/(0bMbn]#mPh0F-Q"H,BaQ&(lCqQAcf7>@Yh1T6b4MYYZQM!4tVf?bJdC8c65d,3EU'[d^9l+L87*8/^;&His.C0VLGS$;U<`Qt1
%O^q%.du%?Qi_$$jWM9fn/48JoP,of](XCFo.3jh/&DCaK"&X@-Gl#iPrP_,8o'/8SZY*[k^RJ[UoQ/:4iS"#7E&_43#M+skn_4l)
%ig-`S68uLa]-e^:HdP\QQN$3(c/M=`psIZIG&V)>kO&.ZEc#$oYP8rlV_ArWWU3NU0lCBs#$0hs-$[me#\[O\3tK.T>l$94gi>>;
%QAR]oo)<]f'&kGo;tp@KGcg.t]<f(hAeeW7rF)\]CnCj@_rf@9gei!nZ*R\=>E&Sc05gRnD&IC7/k+_:pTXDVpd]3d^O8A=NUXLt
%1"egZMV_L+=2b8]2_&_UF7/5SLP=o^8)KI@jQpMdp2VhC]ga)Id.V)1EjrY&FG*FlEjfC*s-sNcMsSuf`RSr3\K!B35]!V#k"G3<
%E;$kiZrT9`">9AmO$#MaVK)@Ze^;gd:^O^1USULYOZ<oihrj]kL%"J*o!Rr3g;[9*i>c+[7llIfaZ%g7XL=5%e];S?*puo(98!We
%>%"sJJVWhF9H6/DS?FP.jW7`t:VMA^\,S.3Z2>c[<dXC^?&Vii<3]9]'!sl-N1smjC$IYt4JO'M?HmhaALOhO$QW4q)&73TGf&_e
%c%CX]FUUC,n/rbk.&?^+_2CF[<*_,*4*fg%G!EKL&@LsDR^$YA*5qaNcI1m,(e/2mNpQPqlb_>Ej^#+E`Ib?oh;P>(i@HSf4r^c1
%Rh%,AbqHR$ouj+W`LUW@S$Cm14K/CO/,.XZH#BJNI/ETQ(3&l=nOb&.qB$JnY?r<`/JaYPnqTd!>7WRbZ@@1nQ!TuhUI]\b3FR<J
%`3IEkI(lr$r+,Q_7-`Bj/.?%^`V/E:AT7PXcD&FmN`hdRgR#q?44+RI_E_>/2X23`.BcS++/?IS#)*AshfRJeJU4.ficb%go$b)0
%+0pZ3GAH6XLV"+,?JLA^hp3>1<klQ)4RO%jDsmBW%Q"HP(]-[PMK_NSTM9cZdI#CRqldiS68r8pJE+/OF4/W8[l3)*bUQ1A_lhnQ
%39qZ6cQ0bLIt/TklWWiMQ3lV7>7GHB@&a>#C%Ys$Cm<f?@FJ^HNE'dDVm.+46=)g=28dO!.%FJWdF`07:kI0k*#6&pFAUjC(@7+%
%nrjSk*Y"l<OUY.VQBZ*r>roM=OlG"UELun4fu*+?f(uH9Qf4BUm+a0No-0Y0._+43dAdr4hJ[4%OZj3)/qU:a:o%A_h/;2V0W4@\
%gUQengPu.Z\?*[)O]U--Ic(&/i]c_s/3e1#PU.m/5#`rnrk0E1f)!!#[>hM*Vrq:Mmu&YF[bi(aqkog:``7D-jb*/`O=TY-BW<XN
%38^dP(k16g"RZ.#q&%DjP'%:D7cD>VbI^XOmb<'P(fnAKpNKB>k*Ns<E<-`k4"IG"rLCQdqm99^W%SU);'MKT^2OD0e\CEnf3Z/8
%*LF3R55M=tjDQYgF]SHimbi'ObBiQVG6XiAmLbJ=iq;g;oQUi;VXt/LQHsK,-Q<k;K=r1!IPbH.cgP]KGZkEJ+)nmh3Ua>'T%0IH
%>nJb-B(XQ4n,HKA0"1\SJ`$+Kd[h'0#a\dAqUOkS]qM!JdTh6CSuhC1f\1$9qClub*K:LbFhQD/7jD58PP&\`oZ(p7O/iH/s7igc
%&"LhuEM9IPf=cO&Autp/D6<9AY1'&C`b%c.BQrKVjo$Qo4GB-4_rIj@_[:FfS$+u(g"fgb/sMp)cMQGqX8L_MU"eePou>gh<B_/k
%.Ye8`eiTWc2#:SJh1<O5HX0m(rj:`NqcrIo#?_IG(=_`*Zgm%(m]:AVmu-;1\$L@!P%p%%<9t)=[^2W\](]o[l2JO+.f&5Pl.X1$
%gb!0m]]07kO,>=Z*ZP39bFa!mId^8bD)j/qh;6HAp7k(?B)Uhsq'gN8r8:=DAY/=DGY96[-$5p#-<^?>o*?pnG-@:ZI0&5FCCdb(
%`PTd&*Ms^B?N2diF.@=M_fO`3[bUpA\$_>mE*Xl%/@Dk=>WE;M2MfhBh`ea/g3h>gD5-ED;gXUV,M9_XfR(>LICT1:g#LE0_c48U
%s"B+<1&IBM\_MN8iQ4hfSUf!d$eNG^QllQeD=\f:&0LiVa1C]pGu\,GE6ueApn1]R?6?q,<@q/hr^q"I")(mAUVD;(*a)u2afTIt
%[PDF3]am$9bHG+,$YTJ1HK"KnD8@lRlYI>Xp#]Q&TaiI[WW6oBY.r,_I4i0WZ+7k<SFQGh[CE!(/JcrZLNhjY^0?8Ei-<Ll>g,@a
%Fr&eT@BWpC(c"PQK-cW)QU<U2ftrZ\]9qe#Qq<btrIYX"/Zj3u"5c3mhKcK&6_+#X5Oo8N60:+nO&%nBYPDjOM$$TKf_m;/^U=m^
%[d\qi2N!E>NLYLgq:3/fiS`fpEM76#STu$ADjf?%X_:T>mg/oMr%?\/bdg7<ni?L6Z`VL&lr%j_f]p:*-CI(cWuZ8+ZJE.:=c;$Q
%Fr%]f?dP\6KC[I%.j&I:?j<f`(u<G6C"l`N4&3_f5C?eV_"pL&Fg:s;%BZe%ZD@G-:jD()#kRb^BEnRYb:&U9G!GFJm!eIiBeK9T
%j'J_["]Smq55?S5eO_s3Zh:Vch7qTAPkU$@dOIFa>&h>>Z5+S2fW*Dlj[S00hMQ_DkP6'^=#F(Le0o49gl:=k@80[enoj]-\G0Ob
%=%A]Yp@[Tqpd72gFP8q=JC8E)So6RUHJ]GBC?o%"7lWZ,onL&'B5X$kNS"%4\YK-C@sER04,(@;XUFIIFot::42l+k(];Ze_>a9X
%-G&b$X/10b@kJc2cYopcG"u8f<l_R/IdldK:ANZ$h<i5Q"(f^e2,3U4T"]L]_d-3d!=W@7-K#H=\A4W*^d()1oE3n=]iX/:9ucgP
%kMc<tK75o7[ee_i$:-q[K^R?cZ06a!c0j)j^OJK#.dU/BpBo4_(Q5eq]#Qm.\U(eP*n*mQ_;63colJnp:%2pk8^=I-E'*foW-p2,
%f8i[7c)`aDeMoe^pU%V0]:/oO6?30G9BCEse^r9!n_7-?JXU2*Hh/=ZKmF_T/#r]rGa?:"G52HqMYE$_ZNolE:@CX?EUfir?&No*
%qmpeX,LV#$Y('_@_B#K7_6G_]RO1!#<]OeUI+\#_G;%NfhJTfXk7GGVgFL%rl7Tcb>Bo]9bE"uoq=SV^BH.V3ZXDHMCP*r/]]Q;f
%mQX8>3I^9]o_%QRnYGnj[CGl`30*Ik3Ab)rZ&s%D!NajVWtuh!\?`aDd6%??F*a@'=#dZ2e-7I,BZ-_F$5[S<=^kKVBK5MR")_]4
%00X7P.-;#Jg?UE(rDl%MkVteKs0,>AQS/`-C24Q.e(b7Q5+_0/KIKW1EWgI`W/,4h3TmMVmpajYQRis]mGOadr9`0@Z-^hEp?$.0
%6QWBGMTspL=Ab-G[P'Qt=,#BaJFX\=h,43^)BB#jb:&Id^:S58(%Ig=:3F6hY*_u3i:rn*Zk2,aggR8Uc$Akiku%tl;9[c*2bQ4_
%?afF=[mhT7l&r\e2?$iJTfr5Ak]u.ZI;fJ@m`Dfk%k$a_A2(o81d_&t!/\qZ@kd)H`HtACos:RS&3U2LrSkjUd1iHWNRs(Oe>c7+
%bs?I]VX0e;ie"lMdIlhCQ,<,SB:?sF2f@s,gE1&g=s8b2-$Ob;H.WrkXn^i7H*_J@qQ`eOVSpE^Yl*5sAsJF$qq:\pgl%4d?DIXI
%Uu:3,V186?\,XZ7p<Alc)o\#+\*J\%KSYY4=p%EC*7;7nq*jfsm\+t^U-f'#B/eH=d9XX7,Q!0J[1E"@>MkPl=FXY+q_AdM/D,C\
%^@BD+_qg%+ZUPcj5m6lKI^\`nq4=^3?16V,WLU+jkubeaj/E#;mQSG65=%eW1R99cibiU\?1$g8oBloQVH!o?f2g)*<\>die1h_[
%0t4Eqn`A$(gY=mA$X_2o(ml+!Wc,"2Cg]:6W\>$#S%s*h9AM$\fIaM+UJBK(&,`nso=T87*3XhdB^FMWh-R^,<m179o622tp)-od
%g=Gl'4.dSR]NK\_q,,N,Y;U+:\*rB"kn#U,mQrVsk&_EgXUD`9s.9-9]JjM3;5h]&h0S<t$</gFcN:\l>4sJt9KD4L(u6:nF*h$:
%V8_g+91>g.P_4lCCB"^5.]bK\lePmUdcuV>C?.P!^#il1h_e7a5].j?<F36SGhlm2habM0M>pH0=J=3;r,.NIT%Us[Fo@8:GStg&
%-=\:-FS_X0>GTgfI48*0&rX:q0<$`"S%Sm-bcO[62=mK35k?pC'eUd("CJm:(Ok6@Kgb"U=1fiDq@Oi4__%l.2mB:V]0q.<i_O;'
%qa]<(C_Uf>j?ENl/ZW$?kMX6BSo)#%5.onnY31-#LSgJomi]RC1_ZM@0u?.Kg[HeK-U[B6pdWhY/.]hMmAsq5onI0lFj%$7?qCM?
%Y+>5[bp@&uI54bfE(4kdO-d33\lmL'?,5^j=j,3@,0Fo3^?[`cZkS.=7TQj<O.`qReP2bf)6./Mr2a[9K6Tb^WG,L61Yk$F;,I$[
%2[:`M"][70*%+*Rb0GYa354JloH]W\KC9YgXeRr0T'>J66hF_"Z!k6&n9I,m-ra9og:$/m:gs]de9rFXB4YB#Z8..<UT7T[dUHc^
%Y\9F1UT$7Vg[t/45-Z1Vq@1.AW2^mJ2lmrnAoT9krZ/E9jkp#5j(W+;2$9)6f[FZ_AjfhR[rgFpNOKph?`MQ=4fSX]Jd!Id)]jkR
%.s'Ajn]t#C/44j/bn*Ft$jPsn/O5bB$'8qLR0nH0iKI=G2*H^6HCA_,aS&mD\bK,?JNOC_c1AE)n"Rs,5d\R0U:-BM1/r<7Ma)DK
%`+]!Mh_oTE6oPtBR@YK5A,6s.!Juq9kQ?oV)%M:,4;h[6G4_nL])nu5PX%El/V%4g4WssW'-P1!L#AH++\W`McZ^5!3L25s%e8IC
%:IauQj*:]@MI(_O2]1WPqB3]X[Y=@$T-gK(A5*:IQ3O%VnDSGT6([&><!Muf_R:m$!s`S$L=FdKZEYN8NE.9OHd-3R![p9YL-"IB
%pb\JB$tFp@Y2q/Y?5I)jf7SCD*n6CXQ6_==T*>TBO/1/''<dU91`V"/Tr%iHg(O#4dD24:0GkT'NZa_MRULeQ_9eXPqK`p8.u/H=
%T\4jfZE?[^CW!WYcYJ1!)^D6$=h$B-RcjH0)EG$X[\hO5B4sOn1CsHEMf`?of^=:r/EYanFZ,%K"*j<O>29mc8cANmehBdndBLFk
%J;X6>Vs_&%"E_S;5BY4MRitFrX^I"dU-JQ.!hsfAqBJ\FO$&h&LD#1\L3/-o,17d;+V%YEFjM,OALi=0[XC&X&_,'/1i>!?Fb^D2
%k_'.M"hFf)A1A.\Y(4N))\Fu\Z*c/>L+EC_?KooE$4>qkW'DLa""XLKeYlCITe@YMA35JKM/8R2E(XoWDr>u!(2=$K7Li6FVN"5%
%("*_0]&m"1P)buLBK-d)T(OYZ,B520$g+;qp)5<=`TBtC!c&+d!S\Y,$7th87r+!8_K`]^]n/t0LgF49";!(tg+GPB.<-4ZJS6?e
%3gCiQ1o)a=)"J63)e-7M\8O30FgB,^KpE`3UcOPY!-QK(@0,!2+>]nTdcHUNn4YV><*1FeMhY?B_WAT+L`7A3[:dNF-5^2tW+6$R
%?q(Lj&D3(1#It.&Pn<3qBLA8g[R1N]T0\Jff5=k1+B4JN')SN8Yl]McFO4,-T#M.nm:sL?8H\A&B/:!9cjb0GFC<_,4eIKr7g^.h
%W!V_shEOD"\,amWLM6c+?o%#WL0=oe\O:@iX`)]!r,J:J<aptPZ<R/`K#5a]@(B@cJ\6+EKGnt`+o#b>?J&"]9k#((2Oq2TeD:_G
%I'=05=)9?idtgA2,Z3TD>WQSQ"4M.N2PACaOA1i[RQhjmW7oN!J)/XTC^N^1eef+J>8[U6OgW8.7%H)d"sP6d1lLnCW.nFilMumL
%$1c++"qM!s7qfi7T^*A,U5lS;Q_'N%F"iVLTE:h'ojFd;?E>07IuC0qKIm7^DWt@?WaWi=U'$O0M-%;(&Ge4-:UZ1d`n6$VQ"#8o
%<:c*Z-_Ne#hutqG6(6(d!;=2e/4'[nk:%N>OR$,:g+Xd7`"kY5eQDq<=j?X3N/A"%VsCt":'IT5"AA$sL(Oq/h(Z18rUs(0>[:K2
%)[&!GFZfqZAm5I,I,EL2jH]9C%9eN&/MC@/6]<G'0Et]JqNbAP!4q)8&p@R^*KHp0+p8$M2ON]GX;Ssii:fcrd@_]fJhF(B/li)X
%B?PoM6pVPB1r+9'`hd+n.;_%H0],;<DHic%(:jG`bVPGV&O\>F)lt+s3SWJ&34^g&Yca?/3HAN%4J,?.!eiB"ab1U@/NhuES$qaH
%5m41@$:l"4nsbo!YY]WeB3-?>"XNpje"K)[(KXK<*LKU>M>&Mce8I`_fMH-STGull9K7j;5gb:P%o!J@]dhO<9TN3rP;HI`2&rB.
%h;T,>"<q/k:>()t+kT.@N_G"#Vt?ee"G[nl(#aaXd+.0I$BS?m"`[s4PllSSLt0T1\28oUcl8PfJI8b=MU92],)]/<ca%#d?\3sQ
%nTYt+%08k<?9oA0;7GOh$,m=;_;@k,0$pE7q\:6Z3Y?pO_iP7_D2;=<"B[*qdgT*"CjBMedSUE:_']k;6[[r-a=p0a&ldiC"@HV;
%)O`@+SeFJhJuE&HD$77PbK-XGE-_#5=MFo:iTOAV(cG@H&EnlDNFmj"Eab@@_e$t.+_+lb,cjcg-_'286iGSLa\ZUu.];DGZ%cp*
%>s!cm"NbQG>89buQ3\EpS9V4=;IOm>\?M7@(1S7l2"F)N.2LCX1JC14+qfbY8?IWsLI$r=S#Sh!5o!EFL]I?T6O5SY9Om91OQ]aS
%B*:(Hb#-Q;(M2o%XBu!kZUk]V)oe7TFMn"`6"nW+TpppFBuH]'`7(Yl&?e*s-?CIM3p7L70$NrW+S%/$R0KQGedt.kcZ!@W,*69p
%@Skgt[$$$diXD(*Y5jE0;A'g)<1+E`LA7$:$CrPB,f`@oC'e7ndb*.s&BlptN<pneCmBoBZ5m]d.]`BVMG=1$UDed=]&dI%FPufD
%I_9"g&n.je:c=7ea689R*HjaRdbnT\,\u-O:h%)446YXRV=o=2&VFk.>+GG%7g+P[ri\e./PL",,W&3L!QNKR)&UL52G"qoM\FbD
%`Omu0n"te93Ms^1,/W=>4qN<fb3'TQrn4GG8QjMoBZBWH'G2OBZ3LA\<Pj8_#=0>,,7$C\?[f#KYDGN30\@nogDF-N#SZ-n"V.DD
%#]-/$jP*$HN4;T5&6Ch)@XA@1)'K4<-s2X@Kgqu\TJS>u7"Sl+PG,R+;F=7\:P(-e6/^`p&."^Q#+s!l>m6*.bI1q/-:;m5.<.$V
%Dt0a`.#C]I#HS$haXt]&"=*f.rcSDM!XpCmPS)qb!a7:;1'fTkAdfk:a$>`=T"N;j8uC%7(5J><2O]9"i\mS5,VdBW0+CU`M,)0N
%7WQ>p=hMR_OJ]k(6<);$4fSY[7mJaZU5i`H3h`+KH!KTP<[Puj.tR3rV$g,a*)$tgKY.HgiQqj*Fkh)SGf2j[*BbF3]06PM`0XIh
%%^`lf/!.,NYk(EoPNrep'A)1#+NSY]1B:RRLmfuP'gN8K89sWi[]EL=a6$>[KJTK\BgZ,DA'j0P,d[-/iHmU4)`>YkI?RPo\7;;]
%4rrc&0n4brH:g5-8r3'TVM9GrBPn6;G8uE))U&er2$PNg%M8?:UO,a_R2/n-NHZ0n?g#"Tcn;P%Pak@])X\u?0'-(eh2#rGoS8TD
%M>uJl4:>l;iufq\&]j9!k*K=SQ^Y(`cjWm"C.^4da]*o8;FG?Z\6CRQJQkdb`#WTI!O7rD\sak>mb,=)l4P[.?-oo1T`]C.^;9Bm
%[R1oZ*JI8iSnHu#@ST]QCc`ORH8N0C:MGW$S&8[_C.c\U_^UOtcRqVBc'm[T2??dpZnk#hoVQ?J_XG(>1C"D-S!m)5bo7imo&Wt-
%IO:2[K?E-pY\qgV@-SI#_&kFP2Y[Mo'DiQTe>+T1DAk9W#^'C8,d)S5C=+XufGoMZ$^`if'*H)(ctVWW][9d>D.[Qs?9ud<:+.H)
%@o,GKo=3NlbZb/9&7$I*f@pR$q[:tUPpm1cfHJ;52%>imcSenRi'f`?7"?oKg.0TuG:I8mRcrZh4KP2bA2=O,d#+Z.TM"OBM+K_7
%3ZoD+/HHCjk<E,j%@8GH!&9irI%PJ:AH1kUB`iR39^3@h%7)]8[O2SOnn9=@E.kS37j^NBs4ZHAH6jWU*iLeQ\rKK;)t81%4;cMW
%J,uDnYf*T-VV=(iD"'r#h3S>c2hr`H$`fe-%75hA#akh-6COe11rIOu%n_j'fEa)1A?sMF2#aub_5]eP=!M=D,ugD*Z!E>Y`+PVT
%,@ZboW5I\bEpt&B%;WuIa[S9'"7ol>kR_0c>9Mgth/ETUOZ#$Yf<K2j"-\53Tl-BgYaB3::XNVYVU:*Ns%sUFb6"WI@+t2)-rZ9@
%h-h43T[7-4^^W&4g_B#fZ)O7$go]$.*e8PTq2ldC>HA4MKLJ6:4q"Y%bCV'a*WY2`+U((D=Z#6k%5&!0n4M;[:U>^sEQ.1)fLVc/
%0K"3mjsMsU/>,D"8$J=.#oiKBmbgtu9Q'&4GS'Z>Ph&R"(.cJ88!$sX)/0NYOl.5sSm7an64lEkp/G]uS"QW-<m2-g6%V6MY5Ba`
%%l(VTZr+2Sa4&WVIShjWGuS`M:cF(/E*_Ft%!/,4`VP@-'\F(h?+u9"4G+I)U_VCg3CElrE,3>E:*:%td$Fu/I,G1E,I(,n*6\[T
%I*FQp@DYA95Im2CAdX'e/YKee^sJr7JKQZ:&KdT7ZRL6Y#Yd;]6.nBTB9]Q-\.\(qT'46];d!QN"V`m?*&5gXSH!rL9B`B1ROe_9
%9F`FDNn`V=c68M5.H?!jIsQ]P4>S[SZ%6#+fIq'"p/[A?gI*,=ak]&u8fc"?$rDG5(1j]bGYEXX>aU*'*EemV5][.$'E4\b8fCfd
%/l2D],U!qb*D\X4&[\?#l!Poceg2%u1/u48-^X)F1^E;?LR)9hr#q8O>8VXk`0!WWHSQN-#n+/V!tu_-W'HQ!di>?A)*hLH5k.O?
%_1SaQnN`Hq.M2m:j5[]W8Ag,pU3]GG\.nN9h4A8`,74iUKONoG>_:$!\iN3G?9ImG6QW#SA8c"/h?^.0)e+We*C:Z+Opg6"U\cZ8
%fq_ni>1IJ5V(J-Id:ianrE=k.]eR\!6r%6J13Q@r`&eAAhj4t\`m7e<(Mf5Xl!ajS9ED'mSak*EMiR19*P#5V%IbVg\h9WtM9D-E
%M&&f/9e`:4lr3.COD]Z%%-!KI!E7\sH=9+fV&S[b8=cScapfRlNR'i14J'jjZa_6uEH+WD<?W]KHEurci(Z$Xs*d9E(_o.:_,5o\
%mM9ZE\-(2YKgt@1@$&f45^HAXe&'m"B.IH`_Wp?#c60e4<2DOl&CERmoVSMK!+eK("t4!S*"_Qm0[bj^XM8n(&f!SjWmUGa+tRYo
%M$3&i.**OF)k*?JiW4$,8l[#]NI%nu-K+hYdh=hPS`9oSh(d`egW"cT.o8[j,7L:<LQUHGo[NEJLH@IYE<jMW#H+I$<TsrI7.^s4
%]s6f>VbHAKS2-ekEUaM@(!RZ:qKo+f;IOnSe!%5R#,c*sF;#@!&Dp2V:Bg9=\FlQ[R5jKR\sn6EO%dl5/]UDAEWL1Cf(ZL9OZq]:
%q%0fuHn.hZ#(2DS`(Pr3Dr/6gP8sFG0p3c[8oj.H`(1rdq\rdF+O7pd?XnmOh&^ZN7mI64;Bjs^jlB%fikAo]iaa2[CWd:GS+h(2
%,VLTIV4"+ZadS`MGBgho`IZ_+3[AI\Tqn>klTV-l>Rto`,AUTI,6n1@9pH;f1gWok="][=j5_=d$+M]GJS-`p,9,hkOk>%@%p]Cg
%TgYP$G0l!@cHAI79G[OQmp;ROMGL3FFqkoiG/YJ"1bJgtbrb]?P!b!`7WJW38Ik^1(s,-iItNfcb`W"d`2jr?EWS(d%gdL\PaAT+
%-cL@k;4K2uA8N4$Hh6\)T]?9qW\fnR+BamAnGZj?5Gn@@PGp%H!`bILnrM94(rgpo*e0^@ci];j*'mSf6Ure!nds[8i:O'R'.6Q?
%H!JJu:dr9VnbsuH?_+B_2]\YQ=ie_=15,DarVo1*lU18$;#uh;3<AT@pA]\I4C\qDs7(\kV.j@i:I$cF1dPr'...\=i-#;[h@f3o
%nGZF>V&p[)3/#9WNk@K>i'F_/n,!c8\hcT*P(omILF#%k'aRE'=T=KC+&WkqUZ:tn$TM9bL@F'0j$+Z06*Mi]KV;1@i*i.*35_ks
%I,o7G.^))PPuh7E8G9r7ItJ!-&hJII35Hap7W@GQW!!X*]m9WZ;3h72KPh8jGSh?5`\>t.jSZ$!1iao&oHjr*=\jeAhRN/=.!?q>
%'kP8/-S"U>c9L^j.OlN$=YZ2&TW6-bDLj#/+gf##lW"7Wra22R&/lcQnnqEY#LVD@c`8NgS2@5$E=!.C'u_*.qM-'IfGk@Va#LcS
%!`%=1+hTc%n.(=]+.T)t6_C<m_`7\'YDX,tYh2Y)fu;.5\f'Z)UsnF99mN0snHu4$d\*cdnbr`22b%iOr5D3e>XF_:aLb;@*l@dn
%r*:QXcfd<BLpJ:\8s/Zu<+77%ir)e.YG?$NK2a9p(36^h%,nmFQZk^cK&W.SP8#-BP8!HbBtm_HI`9i8P[ARK,3;lhKP1K$nGWX<
%2b%iO#f]Dqgd@@faO=!X*l@dnHs]<X#)KT"k:2Yc0N?G\"MB6,rDi!\l:n8m-OVq;>DDY(]_ac=H)<PJbp3H`f&QtHJ(b-.Ps9<$
%<972O0h(mQDa>7l@D'@k$]^>h3e];O,?I_g3V%JqP)&Q+#!Z5?RQ,;Qib1bY*ep[52N7B+\\dWZ<BNp>iaa2[CWd:GRs0Pk-*Ij(
%f0fd5f&QtH_t/"amU#M=)Q`[\r<l\J3fT/"HZ32U8n^h).0_X(IV^J,Gp4s=r/Bq83-["VNL#J=W3Ij'lWADd+p=3@5ggA75Q!PK
%(4?T3\UG<)N.Q+&]!Dhdg#,!H<"W'E8h(8<3OtYbO$6;A7UN2:=]dcj7pG@0"KGa1L)4/=M`so>.\A4<6J!d"YO<EjMmZX6%"P=M
%=Turccs0!+U^JFD^u\a6P[,(6[SO!b7;ORk&HQ1M4C]$f[Z>PX8&43+bTRfVB+tp0+r<!ebTrkPq(S'b$g?KCS,IHu!,#%o"`g::
%?XV7N3^t;eIa$W#33?%C?/n$8Z&q]_.\@5M)7Q.9]&kmkfH:FSa/e3S.8$g"d%YiEY+Hjq/><tS637qCj79VjUd@1WG]bBeiJgjK
%nfM<J+^p/q>m0fh.O`M-M$YPfLNV(_r^'.E8D!DH@)S,E1sDXsEbr8F\&+NSQXirJYaU75.6nj@hdY[j=J)fIQQAHBNZt-/@m*dA
%';E?JSi0XF<EKnGA.>EB6PiNDd)15%</FVLMBGNP+YY/m6kp>!b[\;eX_[N^Crc2hc_Nc^KA6Y"(AM&^)M+TI(T*QJn"sc^!d+3n
%O+TA\FTJ1>(-iF:/.2KoLkBiMWGYYeaoR];Gq,Zs&kP=h>$3DsTO9Ok^k#%NrWJl\F@rQDX,(eIBSaDqGT2H,#C([Q(5hGqFMcYG
%;G^>r:;BIO9X.sPa,.UqCL4f3Wg$"2ajZ<CJf[Pt\D@5)!r,P_N]t3LRWVc_h?0[1:\6\]hP^ViQIY.\Z@c-^Br1nO[`;,_eMsf/
%>Kt_E/<943l*VPE_1i,<YU1NBKbai1bu43]%r_,f1pAm^=HD_s"&O(7A-cM&V$`/&QE&>[!?4:L_^&Gg(.]i7h:P5\%<50*"I<L^
%XNSMh0U0lsJ^NX>8Mg.TSjP+Pf&tuOp!B[jGMN:5E9UbrT&u5dKMJ-bcb\qC(:TNpG)((oYUXEn\7h/eD+A9F:(@Alc-ndU:or"/
%;DYC.j8))X>moZmNlle':rRY=`knRXhrM7+Hu0p`.tg*X!\C<9%4gZ5:#Y=-7%j,H%FXV&fi))PYca#2+Tm#uBY?uZ[a,1iYbbsa
%%+I]\$J3C'QK,58*=PA08N:XSAi*StmBY<rU=Kh22S`B:83^C40;*Z:#9)nKTdKXP9+NTs5*`o84g"iAN:Vd<`f_&._uX3DFu;$q
%Sfnd5^(nY2*gVPRMQX[<B0cN?9n"_O9c1lq__bk+)QGcS:85WP;*DR1X9m@UM,hI2LBBAAXm%DD-;W7SkB'#'P_AYJp":X4MbB>]
%-$!:=?@js#!$o=8Q..TaYmNiD-e6ntl$PB%&$DaB)+StiG1i-\a^GnJjVkCi\;gV@WA'7rD3\QP-N^'HDq<3Z]'g*]3FDOI+Zh'%
%=A]=(iKVj<'7mp=cJ\o34V:b@\>RcJpdj!g<rnUr5`6`5.E+JH"@f$@Un$uF#Yj6dYZ$iDq2>oiU]N\10uTR.dH??OjmsGB%DrgP
%MXJ*=DFciZn(Fq8Yoobt%pZRMXc#Ka(d6)DY_P/rF#;-n@)iCC6qKDn18u+N%9CTE`/X6<<$L%\O08uk_1<P%U1A=a::]`UJ=hQ(
%9g\qZ8>LllK@l&SVdVPO.RE$mDCQ2-bc1M>"JekE@oj9Cka(2U4"VN)7l@4H+\G8&X:U[6_kP2=/*#e_Y)J[%KBe-*qo\[R(Jl&d
%2,PM5gYpiO4/Pdc4.8U,\n#.=e>).c5!&sJ_G?::\<8%m0d+s(R[TI\eNJib%r?5ua#'bb>)(Hm*`r*Us5NMo4XbjBB;hOU8P[ic
%1Mfod&]A.!DQLcQb9_!/bHG'=O2J7]</;$W=O!<U"GCM5'MF!cM([3ZJ7tHNVFD?_F^<e@nYp[K6?Sb)niE/W!dPp01h;?d!BF`$
%>>cQ`B3uu=8E=DN*1L;*&qi=n^!-TlNb[hd&fm$TbJ>*/7`^U-;[m$Qk":_'3F>O%+=_A=X:aOj<"R[oLKaoC)S^(GQs<"IMZ-G7
%,6Ul8(dXHVDoVh`oRtDZ@0JcnhI;'i/f%Ojo#jdg_%6/\1b:s#49:Y;/tqod"$s2X.7+FmW/-_%#S2N'r\kR<bk$#g-\DCkXAB-[
%V+rc)_&C\AYi_)H5nFfg,,-*,3t.c_=NZ>r->D4X<n'#PPV0Y_@I%/X<RU5Rh`AO%U(XT7Fs+ls8;9+f=Jnp@9gp6DMKM,iAC@EL
%N'0gakVY=$@>ms'l`tWB"YRFLKf\Pip+YVD71C/51l%^+1:V_,KQ7BB/BNa6iXk1Vh8X1h=LjHl]:$#;,08lgg"<os`J@R4Z8i1G
%I$tAI?7UV$Ib4ii#,]o7>OZbT;L8dA=U<fE\mo0:;]#^Ra*""+Y(]KET1hk:U56)6Fe1f4R8=k2SJN6:"JhbK/tu`X1_9)"&Vm%i
%E.Lm9!Sn$RgTtuo8D%&*']oOM\AAlYKn^h-+B,2IgMAsQ*JdO_M`9BKQQ)hdjJO&/F6#D@W,4M>o1YiF24j?K5El%-,24Ei)V%h(
%bTP&I[eYACFZ9WjOY9!X6?HOXLhMcl+ET)9,\T)X;FUY<mr)&b/sStK(G#88)t_hm9kR:MTo<7*P:VaH`$LDY@#_7@*DS2Y2k[+O
%lhIoAMEMQ@CYp"i\GQj[R-H;m/DLkWBM/kp+?_iL(S?$7_ul6`172!9(D%P/.jE%kHi\8l#-4EOA/-?,DqgFmPFd1JZYW81`&PYT
%6KV*0]b!dn,`-?d(40=*DZ*H`9c'dTRYW-?R`P(^pg+A[Cm!n)+<Y<Q6.oEA\bK2:I4FLd;g9PT\g,S\E_RD.?l<;SBa3bH$ng=i
%Ml#f;SS\(e7^Bm(W33HOUU(V('@Ne0"qZ$8Fs^Xk%I^8[U:&d^%"gHa*Vi_I?H&`eglfY/^`t[0H=Me=#`>/m_#(;rDq]eK&Y#9p
%VCN*Zb-?+GY&*k7-9\V$+EB=O`"cMh,SSodoctJY;&F65d^<;=P2-m)Hn[jZNCc2cQCTnOCDdDRVd'LBUQ7`)=L9gcLanE.M"R?G
%icOuhI!1MZTn>3^6#f%4[&`sY,,g9Jin'SPS)tiAWlrjSQHda5+@rh1kk+'aNe=6d8nA:&SMBtA$dGNt7JbSSR<]bY!a2r\jFKW4
%h$V]+pB%UYSYsY$8uRWR@q:>7L.=K(J_\4E!t,/+SuFi8]Y0l:<;MTl<j.IAj3RbjR0&NQ6UE*3BeZb$@"Y.XitS1d1n5gE1r/*n
%M4R/D$o,!IFbtY``X\[.$/jGsFHjg$3BWuV$s/7B4=N:T\s*8V0+("T)O<@@5`aUhWaK7L6JIYYV2ZGZ6T6lpAErr3U'i&(6g#.L
%Y0Gk`St4h0h`??JnoCZB>0W-db@O:>h\4]Ll\JAA6d\bWp&pe&>Z3%"'k:%$o$*3VUGk,e/)_p"e<GFp3J>^0j-*"t9?(TtOHe#M
%1`,rn#$#FAP9D!k,d3.rcB_e)-/NXdZa($*91"'+-ok;]pXt"P4tKr^Fe94;@UP2I\1Tq1%5;&_KUc[qqV/efg!I]BJ1`lLGem7d
%4RiEFKq:'VKERbrhPd3\Sp@IZ.DN:#Xs2]@F`$[6ToY\hD\JsG\ksa[:MkZukd1di*[QPL]SX6eRX4[An.2[[/Y37o_@:sV)UHs>
%Me>)`WhHq=ND_1%b=gJl(*Za.73FaoMo)>R2nbsJi'T(%db#WtIBEpFkGlcb'f>&#JZ08=KM,bhd<M;q7):,f9XN8oXsEB)Yo*r,
%F[3ipf4dU!6r>kV/^8i*K#h5pDfpM,NQ_Ac22W2l.88[!N#?72EQq<`>/Ufq1n)!P0<-X_MJej#Y(]'%7^YYsl8t7!Kn^Z"9>tg0
%?NKpAoKGioGYZ6lAjsT=]l[E0[tU*!a_28.L9ScHDaXprKZf)X'DdV8!tkF(@>/9ISh&t+YTQ+J2>Yf:Bn)@']l/n*_(Rjr/'Fm4
%#]_ekEVPOrc:Bs`*#^^P?TQ-F'jRRNOEF%+&Et'[2;@1>ePN@V?'C>@l*qK;C>Xf9SK9_O)?DQ0/-bbF;;r%Yq!:m<)F$JYeq9;9
%a'bLDP,_rPo)LDRmIP\"-LJ3[6\bbf]J2dW2ZUp/*AcrN;t@m]-Y`1N@u4m(Vr;#3%bci;geAR!KB[Yh;lHA4?"9*GG+R&mMX2.6
%:oFmNDJNCNF#G@%0Q9G!Tu,fRYQ/"dZJGl%gbImF2Pi(fLaPn1"BHBrW%d>+D0hZf>C]tJO&^3!`mSP0$_d2n%7a?A?Hp9&%\DdB
%btknp:Ul`]jbGRE6SJ3WLa"EGo[)4l#_kk1IS?i;SekDL*=hhZo0D1Q6&m:55Nq>T`*f"$]H8E5'U^f`X1d9?.u*=)6dTiuJBH^k
%!!ZSJ.5mMqaj;>BO=de+'P4e5K#:E!p^j([#UhiX9^Q*1T'?"qTYs=#07YH$,JFoa)6:j=gK@X;h:FX6KYG2i&<XB>j:3+!4;Vkd
%fe<'_E.m1boV==u4FH;s+gs"OC^ZlhTb$\+Yp$1d"eK]F74^&[9U7AX\hI$b7MN,fmHXTqLdr:K=80Y2[L@>rO:l9t3EFM+0Kmg!
%G[a\DD3M6PX#I(aJ(sT@V\IDIlfL5;5)."9Ga9E.1E[i$VL2Dc6[S@&CPP^*j$"4"QhN%)OlF5TcocdO*hT1eGALr/3!WoMHn>kq
%-d46+r.,fU*;X/4gL-kQP1tp-Ma"o;L+Yu?p`-jgP`.Ac]WD"?;P@Rk;nYBjeO$Gc5+c2i6'->Mch,n]VqE>^+&d66#\;b+>*SMi
%NBnpt?.%#o,V2\l;iE8=,/pIom>-lMK1d?='e)'To0*9iDS==eA,368MX\R#nob-KX1']/-_`Cc(/DbKIe2"[KUr=hh52u/S8G$k
%M(;pi_)W)S>?rUMdc,=jBLi0bRW=-[QJ93]VgNqtT$*dFnH]@q:WbF+J7Xc7QFn":YnH(BQ4qZ2ffYekjD5s[F$s?X@;CI_:fl?\
%l)_F_-F6,VM];m'H)<4"=I)P&3c%k'7)?J0QCe@I$YWB/m5j2=Ja%,/\i(p/ad23i-Z!3@*/b=J+N/H"D5MY-#SQ_GmCHoanl+8<
%i<=aEeBgg-[C:\tB>Pc0l(`0=`ppkHTe#biXNqK@UWJ-`\?V)Q!>AD#7["lD/!Acm@kUR_@OQk-<,?1U5fImNQh/8A'U`FsK[(ue
%_?m+F;F@;>.H*[a'mX-Ul+K&;GXmt'`9sQUnnpXP+$"@:L_7n@O1NM[/sF2L4FcWN6K!Q<\E&3CQ8jjn3T%<&dMWi5R6&Q*pUUsa
%^HUA1*kT[D*LKC'I$$sPaA<Zo48J:j#3ntI`r"b('+gD/9*ZJ9;Nu)2+B'+X0AIGN*4B,s+"t9CXCeB";*J=Qrn?`'dI%`rM0K\b
%5pgN8@XoTLUmQaB#[+qU_`X!=S<*-SBjj&m+4r<iMrPMWKUBDBJ3t`nnE;T97k0&TO]m9,KB5unfOODb!&f>&()Wj'X;G[ZCAkB4
%LPkj)"$`B$*t3E7;Wip.a<JTr!-S&GC"g=r+i&aJVQDjI:XLF/C9`'MeZd#NI5EF\#Kf&Hg6/9(0]oZ[&o+$5QD/m,(9FLFqF5+_
%Hk\0pZ5g-)D;e&5Z4a;cNY]G<gCDI``UP*t.Zeg5H!S8XT6S7%J_b<ppHQhY>k<Eji(c)r=4)^/3als<Ei3'!JB:qO'We!"Gu8;d
%62ZHEJgb7bKHm!%b/i6u!q`i@$'o(#LL)O>=g6kXd#0\B<"=CES&CiN!>%EkLa7m1'*)1HbkJ_s4J"U-NEFUIQY3G>Y:(a%Ha?kl
%=B3[sOTl`Jl?So^AI7Y]49/!le^Q)PS/HLgaUBs!DagtWQ01"e)?;f:D%#)%k11kp86KCC'=!X,Eo#(G:a\c^e)\ut\F&4B\<LL)
%bu;Y+=.be+0<9fEKE4!C/UZskVA&*5aNlOsJY0AjKGWiLV?jMm\2cl^X(+eYbFtKHf+8O)gSXVu@;-E]3$*?PRLBrDK_o:%6plu"
%O?D6O7uUnqaWYHsQ<e0b1L?Zs^!V+(=/_RD;8k7[QE]C>DOR_b@AA@)KOV1Fg\f,:#qrjr&gk(E&Z6fa7uDIf*!p)3EQEfmZ.Y*!
%3Q4ciRM$0e#KNIC@L1q`O"^luJ,-s&7u\-[g?'2<'3&mT:?[!6!iAfHYb4q:&*\VbBsU`Tn_%!f^A+dai1Z=6]bQV*E,s59n&]#g
%=S$qQ0;AO;\KR)@6bDa,,d\eWMP/j]CQ,?,9A@sl-C?jQr$SYb:7/+=prJ\:ZdjsT;F;=Oi&2>U0t;jreTpDY4?gQ4$QbW$Hct)(
%Z,).V$]>X,#0u5LcLs6UomOJF/^cp#Aq<@qS$Jm'.rL_",E^cY1kUW-;osT!TU'6\MGjs,9?Mu!N5<acrUbTJ:)WSE$E\q?=(6jg
%oh^Q0QAjJHU('i*M<Ig)2K*8,&q`BEcj.V=1$+fKg,0XAg,[$>i']EeRTNK^EH23b,[3N]"]l[7W:1706S(*2ru@M60`pl-U]U^8
%9MJ:5ML"FVm)7@;\i9hHLQu_%i.@+p(oYe[`Q4M.d_>(0T^ms!]@i1)&T:6Vnc5PI$#@1ENOS<F5!.S%'j&/`Duk&<1m1EF5('?9
%R'?*K\R&WH5;_mY,s:M^HbMIh7fFK8<V6'jLsK!9Y:*l>eo;]:"bGU24pZbZh,9jQ>@YC=c\^V-dX3VZU&:]>*k\.N'HT1I]4lMq
%"76)?$k[pJY^8E\X,4mX.+AH*DrOMlGitH1"Po779USo!bnJ<";\IuLf`AI,FGcOS#G$1_?r4WL&/2hkO"t4<@9UMr]!u3ZW$!^f
%45rP(N*%W*Sq,iQ?OR:\N\%1d-E,&&'dm$uhX]S.fFSpB8nu_^Nd179Tp-1f[>[%k*;$0!a_Xc.)W5_J_.Oa$IdgAo6IG29q;FC*
%n-nE(fbJ(U?+,mfXWcjh68?j+.IO_J)^QU=@d'uYQBi<_Pb1/V:m^Cp`4OE='F1tj'Vi!ujbQGG^NEBm2:7NC06csO*,"=%dO)\V
%N=Sg@N='Y0NkY2'j,LcTn`ZDh&$:o%'eBF6ob>u$bRW(1/g&33WBhsb!ca[X`N1ntDU^>CJs68E6CK?McGt0+JB4q;404[=Yu#aT
%q@[j2kgPZqE6[=QiANo:9ip%.]YoPL\cMKJEA\IV'GC%"hU%@u+f1'8(Buh7%#GIA*V$7ZNfg!%Z,QO5nVp?J@Ib-@'\TW4BVt)[
%oW9c&PB^+DOO,P$jCom.#B[AtG3.8'Hn2bEeQ0V.7lnS)ZG@*-LIc_,U9d4M&S-R7L6BUd`C(tS,s/aPNB^;UrNI$M:1)u&/]+gO
%\*sXU6Cn$rgd8e>fO=AR)%>0tr@=osGMO)/bQ:S-Maj[BHI%mP]c1FPU)/dh?609C,"b;G4Z@9>L8HLiUk5O8nYLnBS-2oT=^81!
%ku'd"!>U9Abp)F?>XN>5/CAKB*3$H\S(eb_K([+U7LKaC)>sCe.2hS)92L<mogh4R)rd_$)<qKu$5.DU"mYG'W7Z3k@o9]:,ZZ$Z
%?e@'l,"+B2/PCZ]-I3K52f\T%0aK*&7]5[A*]u)N#2J-n(d`n\`lem-Zg_X5KM)JGVt=[+om#(l`TD.M9C5`0.SR(B/o2Bp&>C+Q
%<_1')-T]o0;r#b;!7E*rVECA?VrH(eM:8pH,YasUf,)gg4?F-`;F/eWIB,[l4Pd-6F8-T(g91Kr^Tf[(m/kZXMc'SmK-rAW:na1f
%>N?KC@].bS/Shq6a%+GYKLWffGA*a`&=N>K>Uh."J-ZJiXXR9nM9Y(UaD.m[,b,N>?.^jj+[e9-XH\;_[q/gL)r)9`dchG9rH[E2
%2jA:eN]\B>=d'u5S=5u>L`4\j8jA&*"]<%o>7&8)m[B88d>?m_C;0fq4=s-tdSR4]U)W)nc3/b1Fn1M)>8(q2W_hETVtJkeKNY+*
%kcBZr7hS4IBlU"MD.q+@Ym?m-MS>(C\8U^q)&8^P6_a9)5[lK?!lKa))^2d9Ic^-NBf+XDjOb<&dKL"`q8HKB@9F0Tkt#LI*I`98
%D<8CXk(flZO;uY-PYOt%aE0V<V=l?'i_rEQfMLZp?lNR_1@e#3Ip/@uDS-?o(%jX,]S)3fIgI^3jn0Ur+/D/-:[Z3?TQgI.6?%%l
%*EjTL![h8!UYFfn7I]=,<D\<D&lL967kOMqQmk]DD])r>*)/m(\E.>feBm:lR%._K?t(!u`YK"7-0;(mNa_LuLKN($?p016=T$EA
%#fNH6Ge`Qsb-D/9<9YeroMSt@HoqTiGpbQ;"X1HE=6Chh5M=GW4DdJF<SJ^Q1u]#$C9.FV(BZgU@N13;cm,g*Ul^gU6s_9jiUr*"
%>[j'5o\kENr.DVW%T[6&r?kt'n[!6(O;*`JN7BE%E4QPJ\dPo$H&"^Q9>!+QGle^O2o>C%SI.g*-kkj'Z`(80iDUjfj_`q>T<&tm
%?#N(:E(K3O4!&d9hrh#mZmUhn6E980L?kBXmcpI4C#=cUQ71pO($"LY!9_aT]_-7$M,O277&5CPdhWOHQ=9A2\.@AOj,rna*`.lS
%lm68",LB4-?93?P6)c%SSP*$=dT&u][?Rg+Us[ScON*pZRF3Eh`!`G+2;_=mpA)4<>VZ:9HprSH^/A\o'QZZI3$,rrl+UaY".,Z)
%*sSJh:")cc"/m.Cme#N[&DtJMMCb8fKeG;51>jJF]$X(>d4A@8'/sAsgg\)o6um;B<[&S$0ZdXTrepu:nKh7.D(':5WTZ[1lrU\-
%''f!>["?RLd42gb5l+h]S88nE'd=RU1if:,:=R`5#PejQ"N;nl-C9*SmR>hl.HmqB.JI0T,\DgM)g\S/?B)@&fG'G2<dYiP.=n=i
%1HDkCp+&BC-99j3j`WB0(u$aR;,jN!jA1"]lX+-5lJedhS-k:TC1P]27Pm+N7*Ge=SKB`tj5gQ5$DL;UJ[L9rqFL<'2V/b:@+;4[
%$!T']P>IMLJM)LV.0WDPMk,&nQdoqq\NNG/!%9M\LeU/b'1$\DPC%?R&ok<r3I\''/l.?pfHLn".DCaKFI#BbVW<MCY6#t9E^=!`
%:16a;MmFjFJr@YpBV)eC23%*:<=/?n&-esk9O$"%TdYun*""s.3?1tY27$j(4@0g77'AAV(..8;KSn(6Xo52"!K[U.6!W&9AP=3c
%icQrLp?>"=-QZ.6P?f*IW>r>)[/kp."hqVm,saA]I<gc!C?Wd'`?DZ,LjBfU5X9>+e)Ba$*?Hf,Lcjs(JqPii]=,"Na?tc"LfG<k
%](0=+WWrm\UN<!e?A`NW*cKK,COuPC28L*`^0sB!gdqs;K`FOL<$3JM<E*E@9'oQ-V!mWm;eBIULbF<sLt*oDe9s\`MKNK=q?R@S
%?nlt"F')ZLd,WAP--[T!@R,<)Tc,f<A<J?-(P0)#nS&-%1Nk6+Q]I3+h$T7fl3R7'L+6s?h&s1)$D%Y-0[XP/i^Ek_8m;O:T06%?
%MY91X.is<'m,SeA;+!k7_A./BM#%k[6pc%Q^/<;BPZ(SoAOs<J0mU'-`']>rLtVg#]Q[N+,Zh9@k<JT#jRCNXL$L?57h7gDZOJc%
%fV?St([SUq>0G,8PIj?@1,A[am&$b\<M)o2a^d/pm'>[rNW./D_#rcQ'l?R%-:p;<+DC=[!]gYp=PJ9ODa:?PO0D9(GaiA7C)Po4
%P:,8<W<,-J9%s3.-XYW>NRK4^g^lgbjk$*:2iqrXnk;pbTlZ8330*!kGH($RS@\YqZI>qq*5Xo49*I2$[Vnh+/&'IpIH;Ggo656U
%Za&gUD>^<3$b.L)1U:l]Gue>sH1f,cK1E'(.YEs/)=4d2:qWC.jqcIkaL7f78b:11M<FX3.\tr?Jb+YG(u!b^]J^@:W0cf_'#/h+
%UAA=7o[soi6Y1QBe_hU9D=mbq5K(`eg7.[Fq_bp_kTPfWHuk)<2uA%=;RpHD\f]W[AokHOIV`Eg0"2J)X,/L!2[B8B48oh=]%li;
%UqGRS-&gO5n`qj!Snd"#56Y9@FiQ/p_>WP@r5p8r[/Lb-.+)8pP\erC=RTU?MD7\2B]=opi]8OsOZoLa%86nLn'dj[IWOP6e%6_2
%4C,Y!Go(jqs0nnr9)neeH-YT9k9@WoaJR61Dlbo2&[9CeG@MZ"5(=@@^r4B-`-,\!S$C=#ZQIP643-k-Hk[l1[`G!15(WN;4Jc4S
%`+pQVR>r`=mpPp8V!^/R!Pr5:2mQ:Y!0ak4?GH)R#J:1cWe5VR3NC+4MkBW22HjO0PXTf?l4WCH^=2hG),1s*b9o9k_'LB2J<GE'
%2DfA.(0BA!-jlY%+F7.[88no+#t.)+'=U-Tqg\nn7".eQg1eR[0u(8!Fff,#$eHOnoHpc<oI4@uGWdl6g#0"fN=6`ORVIaE%I?!!
%rrtYka&BXp(52LD7CTAq@@?"bnI!7jdO__K1?LSiW99h.R1q@8,`=M.koZ"!g-N(PP\R@%<\]50&F4?"QLt<J.c(=ANnGu:3Sg20
%$W<L9*tHP:[8n]C*Fg]J5<Uh1L^@q_^&j,).[&g-a#kKt4GWcKfXGt5RA_rTq-4`c,miW)>O-soFPfZV(sj:t?iR`eS#eRL;_W3k
%kVeW7'2KPuY@JE9&:*Kha0kS-Uj*6\0`ufq%MR9p1V.:[1&sQcV9;D\2X\+9-%K[>gn;1brl`uK/-MX"r+b&3kbB!oKJ8ujV7laI
%rV$8D4^-s,P/.m["TbT.$oMLu7feJ%KATnVijtVBH&ij>;D]C4!f"?iSCZ.O;Q7#c91,4#G7".@=T"8V8pgenFZ2T\VgT+#[RCe5
%(OFq[KKJQSRBnBG;34NAD8CsB3N3j.6F2_aP;n]PqA=I+Xn9`S,`Wici*i3Gr3Ap'U*OnM<=19kSeoBJLN'`I%FQJjf-L)X`&T1W
%M:NY%^@cm<(('?uR6>sl?;mR;`8fPEn&P&Sh\YC,A1<i,$<Jd(S5'[\fZrL'hdg(6)Btq)Q;7AdHC!K4&*Y"Ib8M>"\[Hm,o&f/J
%($'e@:r(tAZ%MiGgUH*,ESI*+364tV:a=Z$AcoZkbB09On)_Q:.k6,o6o$C<2`7RnJ]'G*1H!S3N[D<o]_3,4d3a.I?F$1K<oG:Q
%[h.'jjs/AQk$!!rl%XR*;YrQkM2D!=7;a6M,W\HcN:Mof9!T3Xle+e,5/UW/;"V6;[1Lr5,]*=U0\5u))qV()`#OpC4!!I,9-:d0
%3_pM!UKlutIK'q"``.H3hG0if6]8^/E!"VqG@^V+cJZq0m=luZgl/?,h?cFC\:!Wbb!#9J(ihOOj1%[doDq:[Iq=l/&4_^O'uu>C
%!%cWgL=A"e%]8a^&rqtt]mSaLk"l=N>ilk[`5JA0/Gtd4SB!f=L@ig9PT2PbXSiR1$0.$R(B;OaOiS&kFAgTm5R$ahi3AYUlNE]Q
%E^<_5&qNa$2-9)W4Ydb`'Mr`[*s!(M:C'82blWufmFP]?crstVJWjK+Gh!Uo\4\kcP(Q(X%HSM]$PStf@GKJm>mo$XKCE($eStVZ
%Zh-s!YL.BG"HZ<dM*stK-S^l4/FRhWAI9*J8kkK:(WLe_'I+*I*'2(B$R`T8eeAK_0A3`EG=m<CTk[[),N&R?>KN;47HQ<^-k$BI
%PsU"r>Ot06/"7`qce>A"#01<;l\7WeYY='Z)aZ%djY231G1p=!BoS4*0qFW*Q"bd,_r*8^g#AAQ$mG0uqT#ZR'8Kts&fKgsUjJ(u
%3SZm%/[:a7?=J/N/g:^Lj&S8mFN4[pV[[4?44%h$D;QL/`Z#9h/C6/m[b3=rEle/3OpIih6N-mIhpW4IWu/=ik'rnp*JK5@VlP)n
%^`#fjlkm6$KZlZl'il=K:;!2A-eMg.@J2Q?\jkR@=C4$FFUfgW&<R-nf=\<qY#+jirluN(l(QGF!/kb/`e%k_3Od>B1<4/4Q&!po
%._3#C4^Z#J%H(j6m;j>i:nUQ2A%*-XN@)MLbBVBJlYDI#rhcM^O;SE"7"Ec]44E0pck'9qg_>>_m[O.!KG0Suj&^=V";5rAi4C`?
%%4G'^fFCTb,\C"06e0_<KG.MB',ciF6,CqSa/2.FpsHTMEKqBG"JA'W5T2FadR;r[ID=.s]RJGmo"a+:#_\*lP+<1md,c4IN5ZI]
%./msdEU!F_lN@3To+1nUeXXE:q+FrokDqIoMDWcd\M]c$6uQ4OG>Zf.S-2E+O0%tQP@I!Sf4`;MCGIg[;[u&f<Eg1\9R#pU%\][l
%n1n&^61g#_A5!!nI;fCL=5I(LWJ.&sb3\0-*(OL",ZPAmm(%GP[jQI961tCAToQb"Up:&-6"FhrUhNBNE:Dp[BL6%-RHV/Q!n%UJ
%@Cp&4W10_^NhT,ne4q,`;[?HGbJ4m'Zp+\/8j!oiR('+B.%\LA2u8(njU5m1;rh<oe,0Nc#>6asbdKMD[nTL)W*iqEpqAG*GLFbb
%DGIMW,'H?i:hN,cX_'LrN'WG7T2\3@0F@BAHh`=N1ZVf5qj,"3S_,Ze##@cigVH2]AF-he<rR*gfHou@e.'u!AhY&ah<&F1.R]+t
%&n^,OFi=nKOb.$Z0n]i`"Ao/lAf,S@F2eZ7V\U.Q0P5o5X;Iaa>sc#=+Dl"nHC1?ro[f0F2Dh[nCr3+<?,#u4AB?#)!?!*#N.ZY=
%Q;tknaLI#(7+tH:ACD%mg&EHmJoKE8Ac*nYBVqjq3@'/Z[<-4/onEIHHj`n/O\$Pn'3:)S__:;KLbNu^-!$<8PLp#`03g)`Q34"M
%;k#,9.OY4h*j,2T]P<q54(gq18K^etqi31('/ST]lO7LF3@0kG&/;]E`eM]A!mG48Z//U?1,2W5Kar>6*e6uY0k-"E.jI=M3-664
%4&rF2btAPFPH,7aj;R9+@7$UALj.Es>DgO0;am!1o"FpNpR'V"M!7f+B's@Q@!HJg=*0kQ6Xjel%ZFDYJ:p`n=SFF0(e8J=YT?D@
%Qbc_`8UhBDGH(A333Cg\>^"sq-14mgKbh!Vq1!<80;@RCs&V!`J(!\8P7j]\!lmpm-cEkWR4RDD,B[FObsbDJ3cG*+3K'E0;WsrK
%I0M0(I!')Y[&1E^Ju^nPGm'"2UsdPO,*E6`Gn:IIC&<.5bBh:'-T!Y>3Xu7#e>mC6aj(#(1rGBO,noZ:O*:lHN7F`h`$=',>]i:A
%6&'Y.boq_O,Ei%Kd=A5L\K\$SM4uhV`WtbdR]>N>mX)l8l:fS;L'V_;VGH2e0eM.>YnlK;RhJY-.6b)-/EW4UEM$0?V+[r&WQ1T=
%I@@]/9P&59D%2'8mT5j?ZrY3VQ$:pDQq#T._C@bMb>GA[A*9R0$_s/O.aKg!`VGD6h0^]S6em-alGlVO4!krMhfq!);')*@[Od:/
%#D->l-m_Q6WX+SdU4"(SVPd#t0U,TbXhc<;=_T@nV'&;mZoIKQg%>Y<,@FgDA3WF^]rU,RNLqqs9Relo.LEg>ekkV*.lD*G_igI6
%]9+X%@`X9Jj]2#n):LdbVH*!74Rb++URS=(r!)=JUTJ5_BUa491cZkk1]nW\SmOcD=',uG>O&gGH"d]/s/6Z'\A'TD65Od'+A94b
%0-*bVdbkgsS-O01!8T"TMR&tU2;RsW$%bPLXF-%j<!6n[Tg7[IMmT<J&unjHdanU>k=suuh&Z=RJ5BBG3"1)qM(^6.@0k.f\]3;8
%6qTWr*?pas?*kqaN@B%^UE(gb5;,C"J1AO_"@reUqUrGSlJ"/@,,Np@]CCuAeP``EB-l(4k%[?5)l@6P_K$LfD(J">')td:<_WWn
%+H,1,*71p+de<pIZ!,GfjQ%k4QtTcKeo&U,C#bcC:@7*?I+I(BrLt\p+@QdRZ"FH&d@D^@h2/Y?>lT)YeM8&AW"-n*rjIB1)[;/3
%C\4KVAaLCP@4#lZLg7/.Q"n3oAUKjs3CGrVB5KL.PGmrVV2.,m?$?XgEuul/ME/8URJZL1I7\WN+@'ds6UOC$dLY$HH7M?19[k--
%qrde\eHc"Ybn#c:r[,+&&K(dR-4NfeMml/&>AC1-7<qT4GEU!UQ?2][Yp%M6$`&K;!mnsI->&66$pYlPos%OtaE`8S#X*B,]ltBn
%-*^gAPEJWUoQRqL0MJX?DN)&m0QZgs6BPm4ETeVL.`=ck*5L:XXPDb,&$:(]JkT^;4=T0t'e/-B_lR;_BgJ(&RAQ'kMB3H3@PRQ9
%W1j^lb%nu/qa$>Z2$*=7WE5AF6f$^LqI"aWHAg=YrQ$PM+"99iK_lip`0*((TaN)#noPVrWrle\&SVf>Uje&s3I+F)"Emg%Ak:e$
%(pM_uf1`=S<V!mb7.\"rUD`YlaW^Q8^a+d%*NMK.Lt`tMA7mb'*=lR)"qN^>9&[4<eVprg#3lb=ZR]LcdpXHoQDG]%Cp_3`;JspO
%'aInUH^fLp;O"#RfZ`AraO6I9Y$?3c(tuP\UL_OnPo4k&InlC=;u@e?Gso$(U9%OeJ45&0Th=HG010^fiHJ_o(j'ZZ[CUg@LH@VD
%rJ0*6c*lZP\@=`_51KhYW0mKEq)hH"#dk%TM:#F51q(,N6*uL';.YHA+9Q#36!CS+Z5;D)mXqn2qn<.=p9.;8U!>"4H:Tj18dFRo
%6b)_C-'jXQb[a9V)?p9&02@N1?mocQ%H@l:6Y"5!!Ni3IIs4NK[!]pLiGtcTY\I,sf^"i2i^[,)92Jqj\2pQ_Sk`l2glZW7aWK5C
%d+632Liu!/K0cYqlkA@NW-+;GT/[C8h2l"*B51'GneVn`CLeJC3<Y@V]<[!o=C+u3JMILa#r-/@$F0uW-PAO?Z^Pr1#,CHiKe\SW
%n&k*%/XuX[^4"FagE25bSHu5o:hbQjLQmrr<=cgBr'o.Ta[J'=-DtI,"=hPCLr8eu\D*<XMVc^pa`/JjAq7,@h>=lMX>>oYAV*s9
%c8P2E*k*_u7FF]WR10K"iY'm*?e+?2GZc>S@Er<d0d_1S@d$2,PkXM!`I@KSZ8C30hr!oEN0r;T'qeLY7h>+@GP^VurmOe%$iEl.
%7\Nn>&,qLm*Ju5[s,5Jj1(4SIYukFAqF.Z3,j]qB%Gf=jn+IX3cdbOlqFJOL[C9QN36hSE'X"1W,G\urkMqe#d.bT[O'^#un*0m]
%G:EAp9.q\Q&gZn[I#8<QICO4qgb%IP4RnD=5J:,`[^oSi.tEmach(f?$Gasu52j"kddNoXfpi*b]JH.L3<&k^>7^0hF?]>d%<Xq0
%phahu\tdIRi&;T19:n^\S#p?Rq75*X#B$_B+m"%'?:.!\Wj94f?m5tpf^6(]Sl0X5nRq47p);eg.-95b"-ri?RJ/o7:YTXYRJLSl
%+,P6<p,X\>P3<4\dpOqAc(hhu+Q#tDk]YZ)#Ms_@+A<Tfmkc:aD=[J"47,5c5If/ul__UQ,#`//V_=9$ge]u,*G1D'.#ZU>&#2+*
%HRQt=i4:mF(2k_g$gH$^/(Ehd$&JDh7EgGA4lI&CK6YDq`G0i2F`Qrf+iUjUk<st\A;An6XG\qBpGq$tqVUJuatdqs5NLRM%@f^>
%6eZ+?M[b@riGiVdb_]g&&hA42<#o)k6g$!r^JMH<_.'iVK?)l#pZpAsK\j[hYY,apq*R8b8Z'fFjMa#GX%ind6C<D_`'q+*G(QKG
%F";Z3V;g%!ooJ)3SpKZ3H5B@\Yu\IYAgpjDS'.*XC?r?3f[ckE.V-.gbdlVcMmC(-DY&I\PE]:[ad^@0aUY`/R'!JJ].a!75=c0(
%M+V_s$"Aqm-B@Y#HIbo;a_RVhj<>Z+Ufh[UWO.atN&+S<52oEboAiP@Q3SYW.(GU'/o-aH",T<r\F+.gV#_;Vo(&i_d(?e+#:]7,
%IlKFPPWl0+3fYmP^q-AgITLml7Nrn)$]D%=E*hNISttS-NZ-78P*'k3N8oA@hB`Y+P=3V:*nBO?iigL!B@+BW(5aK8pgpjf4P7<j
%pq<iWgFa9V`@t,UKdG1!kG;qqXkAIs*%_h07*jH8d-b]q]_NuodBTB%RECW#bj4go`*/@hQ&rj:nT2[$3Rof]=%n>t<irRJC,,2b
%H9J_6a/Qq<::,u/oIhTiO.*eC;b@]LV=^b_m"r/o)QSu'/dR)??coHjH/HtQ]:VbV'FC(HJjc=VigY``aTr0:KlfUSNoE7m<=Xqe
%OZJp85Ys%Os3U0U':tktSEF7^d)`.#`dk<2,TNI6k-`9?/'r[B<9dKl%6:eWgra.BPDX5@^"q!\r.D*A+ji#dBVU:5TMd8&2t7e3
%)<AWZp`Ibpdi7j]qPJ"@/$')Z'Ze.!?*f=([[c;j'D]_lI1gO>C.sTl4^KTma\1/\#E[0%dHZ+KUjE1.f15s+]O*IsnN4;l=q2'\
%@6@F0W;-te'$iCt`c*.Y#-C%raM]k<6aJ^,"%$RE)jt6VChBhA-CU7`D,2LMguWB_P'Ntf5C3&p812[6R02eNn'j]+'Fqh%eY7f;
%Wn&A$pp``B.7dg49N[h"QLp<=1mA-Cgpg34<X<pHQW@<]l;?,7r3&Y?ID,qA+VSI?!=JB!XQA.WqYea4LlG@F?27QiQug;g-JQ<i
%I6%+C_1PNXSnhS.1S;:1_<E,OgW4tPYij*q*ImLuAhgNp41O8nN1$JVFnVMSaGr*dj;F]L5;8\6TN')!n\Po6h_l1X4$;k=BnJ)_
%.P\69#&;5;0<%8+1A.Y7c6#NCeDf'7Jui=,]?mM<UKqr'oi\bQ%=4@UDG&jbi>T^PmQTJFs7&YnY%]cOLoMOOlBYU%r!9e;K'j@Y
%_blW=9rB*`%O>K!r#&hkAXp(U#AKh!,/b27%V1:<eJ]DmE6,Xt%8pU``6I2A&^8ho6aaK&]35uM"#=R&<tWhqhf]^^'*Y>mOA[Jd
%:^IE1"E_<g`sdS[GUthVZ1E_jr#'m'%aoghS-p5\[aI*YLm+(l=.sgM#tEkNi>RG.G9=$4*#s9.j<:p*`'WWTTH_I>[u!)P<6[<5
%ANF2B++fGX[u#'cRg=cfjfZ-S^=BEZLdg8"i>T_+Ltd/k,&hlC&!SVgdVh3NL?';u"-V0DJ69"E%X0+L%8r4J\ioJ::%E&2jrBUe
%OZ\CG0e`CcU5\"()eX=P:S@[5%E"XHO4P_QlU>ofLkX-2^k8jNe_0`?+l4RC7'I)2b1dH%QEXT<3QOpJ6]H-<S;kkflR--R3%&/E
%@nssZ]\ZhG3KAm+N3qB:-m)+aeR!IaX,Hd9_P(n-)/lZqM@hD#\56',5K]uu>n>;ki&5_8s0m`I4$J?gFq_&#d!F3?!?I+rQe=@j
%LF4HZ:0F[X3N8oVYMt(bpPtsQ68C.f5]@tr;@gMs>UbC3b;nAaq4:`#?a5XiT,s++47V+PdR,NOMm!B.jkZfdSjIHmo'hHSR*Mq6
%**^C-M"_$5H=T)e;aomermUX4eoIRbV(E9/FLVh:Q7pC7'30JnAd,L(DTP8+QF_Rf<iY0Pa3p>DpC1mb'?YtZh\@:b&Y>md(=#9=
%%hlVg!+LdSQ<=aP00T1,D3@fJ6s2R+kG$,p;sG**cEk%O'%/Q0=G^c;ToTHR.uJ`W&8Pfhod.t'UQbs&kW-$Td1IpR'+o%B#1,n3
%%%nf*aUl3r09UloP7L4LE6jEDHt+VV/aI"!LWP:jgtU4#W?2E)!M9#_R!#e.!dp1pY-Ckn.\[#B(Ug&LQM<ENjY6'7]^mHTPna4b
%[@Wp/0m<@mI[J%W!\FVB(d6)<`Gm`^j3`"/c'GI<2,(t]LcL%J-)rK;oYoBAOSg0H@d1>DE'mbdX/*m*:>@Q/6n<l7]nY7j6S&/q
%.?<MPq+;;[pJpi]JXVn4bLM",=htjI7'K<C;RflOC+S:3.-TGVF$=*9F;-Xo"f:JPa;[7%jI*UC)pOjg61oH`<+4bRHhH!?W8/2.
%2d=G#C;f*5!KUf:3hr03*cJB2aocBm`qL8);VWHr*JDNj:9B9`#l_okRf8=*]+C@Q5BEjl&;/HgjAt')=;;[T=JScra:rmtZV]u9
%M(ti^pjtfXC<=2,aPRLVM1,SQ-)80!PH"U3R$kfj.8%j\KkS!\-s1FIeSr/JFpUF5<qUKGbi-0]/#FW:?kpZDYiS=dDA;7Ij2I]n
%"/a7k(MZnu7'(7$/p-:Z$QqX6ng;C,Qk\8!o6?JrSN7=T7C^%j>P%PhMt"W/+.ihTLeZ0^EDqed8*ZochUKif/+AW2Yt3Sn/U\HQ
%mK1ZB$n)\I;3l$Uhgf<!r'H^V"9Hhbnl0NlHTcgo:Vu.0hKTs!76_Z1NOk.WbER".LrIA#mN^RVkkVXSPitsh$=WkKQ$<q-1p70U
%J7nX+-V9Qt2P;X8ii3ITHsb)6o\Ru;lhoV]9gs.YEH5.Drc*1M>C/Koq#b.Q<"2O?rV#p:Je/aD6ZXjLk#oY\/g)fQ5;+T51I@F`
%o]8=8d!uQE%d/5>)G4KiNM?r8C04S1bOgalk?(/b8MCs^1d/&e;V`,YBPEXgrnE/O<>CBS]RZ_KF6t'DecO60JHX<_f#!BaGt)'I
%iNt^X+/#cjTrK4OA,?hn>(GI(=7p2?q2D"^JMLcL46:J@&`#p(RpT_6\EQSD\XRi!HBKKV9DoFp,f9m)W0]`D>74HZ\:0*K/`7d.
%hqFX"D]qPDK)#H4>JN_R[o"^+9lUFRf(8SYl<CdEmq[8R)r_L5P>L;tXi1Xh3,3.n1S;WuJg.C66!t"+GstU\^56f-T0uK06;(Ie
%Gd[%"\e][X_tV@=,cU"AU<#;G^m*<'7IV67O:=I!'E.P>&EW.p*,uY`j(1s@E*]/kg@lE5\uF5MjsMU%RRPO.n3[iuVfp1S_du(E
%%Y&A0@"(JjKXF4;KA%LAL+ja*k&kF(GpW:eeJ<=MG#aX':ipCrkYAYuBoUXR$,3ODqO_9>K"=f^57@$LEi:3("oF[6rZfo%Bq_T.
%JuHo#&TjdQLBR(J<7>DLaR:8_;6pEcF[_%<b^L>gLZD9%4:>\W^Xt@-L:#=X'iMSY9Cb@Dq^+Q>[7YWT3,[)9Y+O2j@<uU@8SbW.
%W*)]I=1YMabqFi8U-bo\*,lfYW>6HLg/-RCZFnMq(7nCT!r4?]V;f0UQtVM)m;Sf6l.*X,HL2:#IdPQj74s.5l#))W]Cu%FGj,S:
%V!$=s2pj8$Ofu+%:uChYi>LH5r&h63f8D*"OKY(gRG/l^@1LF]oMJhAe@-G'KCqeN4AR^ca#sU;mgk+O69lI[_bltb>-^aA@fqnM
%Z_H2t$MG__4a-Y9:akgr>KShm#l^bYE2q_BB&9@n^];BVSp!Oi"(Da5;hl4P!8=.'`JESP2rlbdET[j0D;g4A=!qIg4I(-%he1%c
%31!8h3rBPrfIT$O!Z_[Y/1M?5nBm3U+N48q#g4qS1c!kM,m,03X,fRFIRdI0?0`FjEc-!"KUlWGj$?Gm_ULKEJQ#3s]5At&NG"rC
%oM\].5%AIe':cb+E)c8]drM5:`_t$7C)[QodTmbVW*J5lR?/ML6QP.-iq8p05FdS5NY$6g\%03$rVg6J&!n[*]D(JtMH7]IAS5UB
%4c`Vm']U?IZ7b=*RC1c!KlN_^D;g)lXsQ4`Jo6f[g"DF"Z1D^<ETuh%6%230FgNgYI0AAN(23XtL7ZoMW4k"Y2Oqn9X+A6fZ^V-/
%iAf=c^6nX4o`JC]ltWiu,3VMlcXpl,C6c[*Nhm2-S;Ia1nF,5-VU%UN/X#7/B@@AfD;g4a=-KHs5rZri/F>s7=F)hY3H]K)Tf&Qu
%3nbsV5(d`8*gD*h92B;?<8Uf()pW!Ye\L7qeW#@HE#e-lT5=?)l3HBIm:rs!,3VMlcXCObNBPca/tBr0aHMAm!uJ%BY%jOuDr4?+
%oQOZCY#M?+)Yt%!asPtQq<Is\Q9'=67eT+dp?tnZ@4kFoB;\]RpO)4,UWPnDorEX6n4+qX0U#R-(43/%8ImmiA>U+M0*rCb?)m;s
%9s*-CDTiERd[PO(Th_ZF;!k8SqAN/VNUioI,Q.r7h/')1!fYm=WGY:pe8&"knuA0HQ^3AZ<)E_s*^Q^8/Tc-"OB/f+jP8s"3O]4)
%%1#NZ0*=OsaUtt1-F=4qToSgNJ$JblkQ`rlePT8#N^_3PC`O%Vg1%+LnViC45$hFq9XEK_i@N%\a.\OaY,0<*!<$j`\qU<qC>6Gb
%:A3!Gg5@Vsk-k&1.S>^q9q?<de(br.F>V%Mc`#=J*'1^#*5)Wh;1@QhD+Kkc<ssp`B0Qdp6X$E9IW=g4lA)anfp2+"U?>#@NMl`2
%-;Vql*336r%WVYlW$d#`mka56[*Uh+ajl<B)rX#8X*5(oa!k>[><G),Vo?5G^Y5?[auRs#D2W<s5b0C6U"\&XnO:fanf*X.6^g-O
%>*uD'qXMoNdR$+ePA`ZNrK'.A>oA\VH>\DnGhe?no([$/Z0psiKB@\(l:IUqqZ5sejA?rEjRG[cNGuquJ!fU%;s!dr9(9t^oKc&V
%lkNU"&3BI?_WRoUG</9#2uds&QtFGJn<"(D."3/l/P4-0`Co2&9>+ams-fUGB&NR*PQei#Q[^N=f+4m(rV"m\D]bk-ro?C[!M4kd
%`gQ%o/mG>jBNHZW1]@PVc3dL<Ngo(d,=6Ce6JfO"\;W3jgO>Hq<;1,U+\*7Tqabq`L2__-r!j5gE'!$2c7V5:N4)gS3eZn2ilg3c
%f+&%+ehaBFWQj?\ph`O-38Sp/i@fjVGq_iRV834rb@sfn:h#B-PR5%H^]O'L//4V*rX*i(qAb?$Qi^iAiZKD!%5(J4np2:KD;fu+
%!s\`JKlMr#8=Lpu=[83SMB71kFJEKWn;R2Zr[jXC[@WiQ&;^N$PeM?$dB2Zd_D?N*&.*1kfW]K(B@_<4I_O12l.Np0HKjqr/-5W^
%JrLA:e4tc@DJA7'G-J!p6si%@L?)N_7TTtF9L\6qQnKJsSN9<P44g/n?.5s1B6<SR5m6$/9?n#7qW3Ot6D$bRe#nC;FR.:"[jt"T
%_p%+-Ot\jMKnd2)3:+u8F6!*%2iW\K<#(>A*4SZF:@trfaCnEs`Qe>[$$0JR'//Jo1f+dE_4[:qS*4WX'2.E#p')SSp&/CRmE<nG
%;<<V]i<:#*]@CGmi`VASU#LGL=p#.&!;#^bjsE"%bX;>qfFdq`IMP[9\L,g>OJ9Yf?&1&.#mYTP\U>U^Z&[NK3i8$;iB.b!efs58
%^I_:8QFm-RR![E$IN`\reZ<0cGmE<Wqg*);[?i/oP!IgWpa2r<00o-=mBK80b</G(-QVDRV34inYB3>fm*q?il8,ht;J,C0b'%9g
%<SoLq=IZupbd5TURnI'@'!mZ+6U.rN1p75i\'g;"VE;jXbinRk:e2CG9!2X$7;KPE8f3biW-G>c7#=S=.V3i<e!1GE"#L^i/.bH,
%4q-IG"t*POJL6&+"/8U(L_Xr5WlMj8/F']BJ.-+);Oe5\.$XopM2)eSHPj=sP5j]4<i_[9OY)\R[ZAS?bU2At^WJl-A7n6BY:3_d
%#pisrK(6\&6lL?q=n^4ZT5rC<5?2<dKT3>52q+m*8u-QAXkkB88\&VW8''L_k%#]/59N:u]E;ms/Gh,sG8[>]-%N9:/K':#N4AbI
%+,#fAEBo1tQ5[gMRUN:a-a@iOUtGrN/JFlAX4q1_3Nk14W.k[]4`fOG(0<``6pLoq8WAHS5)A3F8Ko!@"('>`>Bp(rH:WO1:<4UK
%B8kIhfeGQtb',qENh.m[M-iqZ0i>q20h%M<n9SpF)?!:5IfCXFB"B)^=!>K[r7728bU']J0"#TM"*:jujUr?R%3*W$'3A[%d8su>
%>o!bGMPNtJ`U__1`1p<f52X_7k$SF1S1?Y'"^lc>/?5.(CE)gXn:=E3OSQTm2/eHG:%J@N$d1h3D9!BfS]u?3AAihqJ&I.VqN,1J
%T(SZcN9@<K[9gr"AG:8>;9sQuL,1O<=O7$Fes?A6*G6B88boU+XTb1-?MR0;0bk%aX5%e[j1%B9e4n#EShVb<gh._$k/_.md(+R#
%CdWXQrfHe:rD5+IA_qJRl>8:'GN1mJ]!)&>,-sX-(RD]mq_r'GS\75<F.O]?ZP7e!gH4[<'IhpB1X6j0`fE&eM*(c`""_PCHD"oc
%T"ZdGjj5+fEL@DtjmW2#'RXNIWhiU3BK/^SY[E#7.&2QNYS`h&CWK;e"+r(IN_<"SbX5>sj8F8e,"P&H1)@Pneq(@16)jM(Xiduc
%6>`uWHW2hNPOh2:X=t0d5ks*oU&!GQDnfE^b<J#+EEdtn()r".[ND,EXGg,61o5mSAfAAHIu89>B=F'u!b7F)gTAI7+iq@?r>+A9
%.GWW_^Ki,?WP)LP>QLDaXW#6m>*?K1-$Q1@M$Gn\WmlJ3@\]/Z@TA#$KAIl;>!UKpKt`(P\Ldc+Q/it"P6D7ID"%eG2@t%X'L-\F
%5gO.8?aFE#L^d+j%=JP_".Z!eBpbIHVX*V`%b7.pSe=Q<;ieJW^[3EdSUTt(UrWCjm'Y%Q!>hgO2M`u.9d@7s$B*Co:/!!&EM"IO
%$uHraP6LWI.Ja'nm3o";MBB9M!hC5UAfNZ4Z,K;FTe@:k%WQp2-=V.=S$BHCH+ZjjMNY,bT3t(=f=oK_?JG2<($%-^!a[5*^7CHD
%gL#cbYtqKqqp_JclF?:,85][gMF.3i)S/`3qKu#Rm,U'+DiZ]!TA#1^iq5@?C9R<DGKJk(a].IZ]8BplGCI8<BQg[(V<0PLMI%X>
%Ll$"V6f-Sl[C2#@4'N909^qt-9uQDZ2IgZdo6?b_-$VSO1=:5^P1*:m"Krc,'>/5Hlgm,&X-3]]Z$$@*Z`>j$?U@B1IB?65mX/Gp
%G@r&sHqi>]j>pRb:NIq*lNFL,]H1(@k_6`C:4G;U_<Xm[-$]BN1I%K:e*:I09;k"Hqmg;od</o]do#-.YG9kZ?8ogu\XNljj?@'l
%O7R&/Mt6#CYTra9d3.`G[)C[Q^,?Z9Tg^15<t!?QCZ4/+dh4%q465&dU:5U>:tN'ii>LH5'Uq2okCH5ZUZ^h3]$l]NIC"k]i7;:.
%'qHVk^W[Cea_3PWGgc.g00pn,%8fh@%TMfQ8?8#p.g-/R,XWJ.0!coSWcj[Ne^X8=ES*hA(8U/fac@PQOs[\Na[,du5S(!-'gk?P
%\K,@_alYM%TP?7nQC$qJ]3c$WqHS)g9!3*.N[^.H)/)9KZMZW#@P(,G@*i*g6^q&J+NeYCh'4)3[T+,gMCekOG+8Ammp.,-@\-lI
%9dsf)?U^:m.n;d?\02#=n'2h!WYY`t%oetB7H`,3lDqpj-Fe-6l]74PU*=r$[Jn_3Z8>I7-M:aNn&.iCrtn/Arbrok5F>XlRGCsg
%VN1\aaeb!iPVJ<%V6*Wn1:AM*U,?F.AR-i_0[A,u=NY1;S-Q0$JAg(8QtV^n%B,R"="g&bPk65r+,M^TNf#U$TeRFK&d,O7PcU?t
%`lb&0PL`lT)m#[*W730U\_$-+Oa.BB`r.:q`^87D)j[;I(2>N"M+@tGcpNU_XCr(h/8:D3*SI-Q(1op8Cu"^N.Waa_d?pG-mX^.6
%*bOq9FusMK10LYP77`+af@HYKn]cH%\ro`4-YQLpn#Z"+CjP`Y)uajbjSN`U5Er6G5AINADNY`JC.Ho&.hgN*<=L<YJT<e1dE8[;
%ali([/)lVSB:!:#B<h0AMcQL])pasd-"6?kksR$s3>S4D6n?Wje?Fj3BMq:VMO%peJ5/"bD5*<#4AC"J'!9ZpNaR5.M"=S0P*fRG
%BKZj1E]_C#?fl/KXBYU=f?B(HZEbjWGi9nu7\Ia3-X!DlAs'r'Z;QtS[ZJ=>oNF5lM:Mo4pqK;*P.'-uU6VYqpnh_I]^%s9LTE&4
%6n=O@.AYrk.jjYFatlf"1AWWdZAVa==Y^H%6n=[!C90DB.LS2=%Ot\faMtkc[K8U<#eOmV>,33kPH@*pW4HLidoWN8KtD3;_oAL;
%a]>'I2(9C*`>Zlc4a6.J!I*,=o[9"NVYIncl,nkLGo*VgZsZ5TKI]mQ+?/9%Zs*&L0]DlD$pRFqrqEMo&G.EG2Q:>8N.XdG$k-E(
%MXtM3LGa@FIarZnRkDpOV"8i>a[I:Ipq0%$ThTYm9<o+>bY=1`KNR;j\T'&_+RO,!,:DGH_N3Q<\QI"&eqb&iK3BCaQYI-M&Ou5h
%PppJR)IRO<VUH*uNua["$Pe\$Y?n/ad=`Qc&-Y7MC>)LP8,#PVH6<m*Ep2"&OGlp0<e%.)>h.]Q69DgjCTSYR(-aUGX,$uW=u-ZH
%aa0O39`>0n`cE4U;:T^:ek@J.q_h+MT+/cF7,\O^ij6g\WCWH^HRdXKP*5_fWt,bW>i=?H,t+UFR@T83Rii(h1^"JcVEYuP'`4,,
%Ic1ASM$0WXq#dAW4eSR.Ld>?gqsn+q3b$0Q98HU?#_DjYl1pTUZguj'o164l\.bXQA1uX?b;]PYDCP.>WS_Hq.!dPgc^I%d*C:"2
%^-mV=;=)1sm9u,^`A$l#>VK]a9s\<R%E)&)1?o5fb$!I=61(U"re8YDbcPXH(r^3gM6cofTh3d3Z7ZMdn[DE!Lo>Vs?%0C^CDX.M
%E*jJr'ea45Ahr"kDWCDOLH4Ds-&4."M+13]3X>@$5^o>d<<'QnSd*CYoT7HQMs$+S6cMa>-OU6s57aW4FAEc_i.p]_R>E"C^7qU8
%!C"Tp5Zt=m2E@!5q,L?08sfT0TkDh;5Kc0+W0Vg7BKUl,0.&*,AVZ/UDS`3Ud#?\;[[%:AV^bU+\k]J&nODlD0o0up8B[/:WiK7`
%l8h-?@o(V(Hm]D%C=o7NC[RB>Ul[Is\++P#<&1.:Ac#mNrb?])*s]oA+Us@*.;&Y+O9]/qWaqNIF:63i))m:'biB2g9XnTXP-*EH
%O&m>7>1P8q^&+L:j;IU.B<q>gU&HYb0giGj#]P=KB<EE<\XVQ^dWdFp39IWD``d.t-Ni5GG>H'@IINn[MJIZ'%q^`rVE515Zk[D2
%lf#\PfI4s7f1WNc;0X8QY.VQ@)GpZOY[.8Q(Z$DCZPoj;;UqSA<Ghu?p*iY1C_/aohX+N5[@.>YTbkioQj@YCnu=@g\Zh[bS5b]Q
%,`2TEbg;_]nP^;2mj=FB+<_Jn9(`;B@u"_#5g^\t\Z69nO9;;d%gS=U(OZRXjdR[2d/[lh8CVD;nce%l5a['\@8G/Z;5R/X10$>)
%=LoR"PXd[1Dd(/V&BN6f/JSgeMFdV&5=OGkUM5;h[NF"\N(TH(csb;X!%>+@P#*.Z>NTeS_0.8^"`YKWU*7`4O^`9cF@B<l%6@E9
%9rC/,gImar%t@Z]][98bIp)*'2eXqbNcO[niq'hQQs:3FcAT=HZ&mZ"=l,[CB5A\g9P!_/C1TiZaal4$3:F'1qo'Hh=WU.qSFhr.
%;)7T`j!ngBBA,4LMo9Ot$+@1QrCEgQq7c>N(NMAm,n7JQ+.a.gnf6b@Q(+=.Ou"'j-4E%C(+eZ,R]b&rS^?b`Vs/0B`b4unP\6tF
%J_$btnc;+ZFOB44a6os1T;,OG"ME+'H&.>g&Wa/dFLWi;^W.\ePN<g9<bte:S+HV%T\cSiTmF]PH:g<4=F=&*Kg(W,,"j3qW%O(!
%O$HW`7&;["pOAOBaQa0?+&![SJ8A.uWJb,m-PVAnUC*2sH/sL<g_03`#^k+APM:_GMXR.CVjrKC,tKJ/f(+f@%'cUfo'lr`R![!3
%qhe6GC4o9Ur..,0r.#h_^.+Wd>rtoi;rtN`]]M#4<!#k49?KVH7$KZBLSCFKr3a'pb)0'i'<ZXsCK$'JeP5a+YaQJ?pC'$=&EH#!
%c)eQ4+l,:b1jK"=S3:UB7!#F`&W2qmKXJFlN1lXk(u1\$od6`h$=^Sd&.H^cpZV<*'NPKEZU</soJq7/e*PPrH9[eYB&V.5\+''Z
%.]sE`0m1'1pp\c;B&T@[mG$a^A*kp[\M-.=Y8pUR#iC@48U+.!Rt[bd\QS^Tg#m5[XHWNd]fj[!lhXNHgakRf*Y>r1')a)!5:1HX
%fR9@8c!kmWda-MRbt]%]>SnO/b64jN`4guuPM"K5(67)#_V?\cp6!\W6s(i2)1-_#a4HX6WPoj%D5]-`1=c3I<-cmX6^fmH5_oGb
%4Zj]qeHguM3U>(+q+[qmN1a3%(+P8.L30c2n/1+_lB0:EPM1,C.gHfA&k*A1'iSC*2\^tKJo<rI-d30&]0a@n28L4ta@N5SYXUYG
%T#fra2g!ngpfo#h[;_b?oQ!N43KlOSf?,ni+_@Qb+(2e!f,[kp])N^#(Eo9IN0G?DBUk.J=\94ZM"T/3S2]+q%I8srC9'7D%kR90
%dqI!Zqu>$<!4.%!&BaY1P4$2^7@!8X'J5!dM7#^O+Y?6Ma;29?%0a\Ob1;p^nkA\\JUBZQ9u-fHlIMk"mm=/hkC0q\,uool6[`$I
%+IT+<c+u_`%[,N*ef7@fMOO_%J`POhIMan7o4i+cMjtef\lWZgFK8V1%?%sr6U*DEmP\7<#2JBdIW*]>:a<VdoclE,U.)TdBgB0r
%CYKAr['"1\!e(b%W'mhdk0R/$IL[-5o7qd"g>$PDmo(lU1"GS0/C_aqC)?_)1c+N;;p_nmp\$\VpWUVmi[;R;9(m":%W;"*-Xfk2
%J*.'6Xkh!sP7W?!e,:OO<9XnA^Ln#dG(lC-AJW-+,n^),S6Ck\c,)gF/9k.XG-0H]>dnSh*.@F6IV@HjD6u21ab!I#Biq<._q7du
%girisrF.e?VEn3=s21eS%9I<QERV.c9)!(;Nc'"*Vd\!9I^k-0c.tj)dnnR,At+J\)VJ*uA\,-T/*;5MKGgELIs;sHqplPB-c)QM
%okJ?(D0>.l@F7#`kQ[od?&/938_2I^W*5AanXHK*9`61+]jE+sT]C?A.%s<@5U\-.(,S?Dm4l+%8m7QK*,AQ@b#Q=+os]f*dC=b!
%E`D<q1(ZWZ'$<eXiQYY(h@M5X&)Zj>l62jB"-P-[#?,!oY@um?PEQ/AYCsh$Z^lDrUrX>;\713W-llFg$R!]ToJ8M,$)#R7%nRpJ
%s6;$;=k,%pg0@K"ZHBYM9B$9qaU[i!V[8IsKSECW.!o]m/o7suOs&:1Q8M>f2+F1l'a6peksmjH:t#U<S>s:O6qtrR;3[NLiJMG(
%7I>bHMDC#&l@9FdXsC#K*<Pl''@++io=%S3kh7S.'`];k-BYK`2+e<T5D`54QYCDTRNO"chrtin'X3+$Lh4'd<)=g3k*<f&8Eu9Z
%W=+\PrMfXGc?5F%6].^LM^nXDaNLY0&S9;7e#fsMXTgL[8mX;=FBXfUjZJ+-],HNhbrVOP90CoP;18jR^?)bu8NR.!7hbSI/dDKI
%E?Pt#?^d4OR$61pe's&d.$>J1XOOmtXN5if2H2?PVefs4ED[KA'CC=#]TtWG`)S^\753IW:H'],\)u[>YO;[hb4TYsPlIjZWf_K0
%5P[W?p.Mb[[[)gI7@3/"B+6^)3u1^$#NqACh:te[0o`ttH3T[aO6"sK&a8q@TKTfE6g2VED(kV:6?V&P9iRQ*pCOfF+i\lqeST4n
%cdI];"/s;\6G6#q&E4/8M\Vt+P<W``*iG?&kVpK?`0o&Pmar5%8"-d:b*%m%!'1T2>p`3UEiPJ9IMS8`(,U+\_e#6/Fcr?0f'H-7
%,uF&bmdQ<0%!M>X>V/IJ3Ap.k@Tg=MSQgWMSV$H`"3P^f4:)rK>mp(_m<U>PkP*^<,DP:Iai5CE]Mkm63gj?#d6s#dVm#Kc[EV[?
%pK#i8LGriD%n0*1XmS0*<=3NBXWek3s7Xk_r+ScmDqB?JX$c`:b$Mjc`BM!CY>aI(7Q^M)^38LfA41]+[_"Ro.]lIVdU,IgXN1OW
%EM&r7hsMMNq(R;4nhk7d\bBuNY[;%L^gT."PmGJ<6oaIM?]QeOHkc7;\&(<#?PL`Q8UAubC6!ufq^G9Z@iu=U-VMF$4DTrb#%EV3
%Ld1*8TsNYVli4bCR;ZIar/Md]e3m0=]4A6>"V2S=k)\KNA+QoW\4EVebaD<':J!WhMPhESZ(u9EKXTo.KX"1o781JS%IM=]Dqrqr
%O*r%]E$*F'$F#B#F;CW)6ROtba'%Y1FANd9-TS;(YLP#Z#dON[q;S5G@,n&Id-`4u->8-D@On7eDbU=2kW+OMC&7:.bp@iR_@)7@
%V0(447df#1'kqUi:O(=3g,*0)`eWi^.TScE0u5W8L;6%UT0t[d=UHr@.l:LMqPdd_4<H?),AitX.d4lXof&knP:6E?8a6GsVg+0c
%342-12OIJ3:srj7>V8"YM7a(L`CD(inO!;.6@\W8ZOt2(00r,>OU\+hQ0WNA":]bE6NS;EkbZ2Ei#+M#Bf*Le_>hefkoBloLuDm2
%;TP@\a\]Y6]6BVUA<s-/p^Cbm&1[1T^p'RoLXM(^;^:-]E6(UKrYi?8`/"ls>J0nDA6dE[+EX_O5G`-l5j<@rKO[an5!&H_Q"MWY
%;]lTSk`fnt>]_rN(Ih$ZZAc7d4KjF4%1Q=MIS&)X?9h8Z'+aXolHcCVU&ID<W_sabV50M!8S8XK'6Rb1fdaXm;!!-K;Hsl6.L[DJ
%3O@hOUQl`>@dVCQPPJDPn.K;g=]Y=3`FSuY!E;]k%j].KHkS234:e[S6,"JhX1lh5>=f-).2b\+P3E.AZVdrHhFIK9cQ>9NNK1`;
%""pfX&0>Us!:VV"p9T\_klQ?#:?"P6``00349H4D^#[>';(k,4Y6?H$B@Jr&qD7=@q:#O<$(_2QR&$f-"V5m%c)2SSl&bNlbSJS`
%IZuHHpooYa#/LE0La\hN&'Y1&gK7YoJ<s>N`3;e39k89=4SY[8l69(p2ZJXC9+\D^`2Esp;YGG#*$CD6k=DK%"DFaA%75]\?/[/G
%pAsSOKG-WGpjo!RWBX%#;$&st17qKmj538iepQ3L%<dMFV.dJ4Jf0u@2/,08FW:.Zko2B`)rY"!W=8s/Pbq1Rg5qjm(_F!J7Lemc
%HOVc7<^ZA$"EAfWlOJt-,"869liDbS$!tH'\^E4R#9q=IPC&V<'G,/fIfSJkQ]YZSeiAVr3Ymgn.=rN`jdV^=XB%Cqc]i;QDDSj'
%,2roUjueT08icQG"Xi7oWgLY[5hL3@eVHV)cpM,A\,d*qB[5F_Kh)GfHEeL3V_e-F4VS3_;#ok$6opHMpt>(9[qVYTcGA3>LDJsL
%[^U/NJmk.+K-$*u:@/4QQp^GMim7i%7&Yl+@&Ia,4A8ic:9bZV;[VbdCr,Um$Q7FF6?N1+MKsit"ZfMRhWBCZF2,lDRZ3H$bBH6"
%Nlst5-.<.G(3QVX=EuV16)*gujJ38>irU%3r(DJc@?1G@DX::KF;H#_QlO.%6()V$SUd2.k%rX_Z!?6!+(cp5R5uC,eBiP=.f&"B
%1G3$?X1CQ)03fi/CKouJJjcFTVo5T#+$V0s%[9s#A.58bQMcGlH<q(,bLLO0f*j(29F7d+Pu7?RYASU#(mMmVE'slf$rrCFOfr7"
%U<0oP$>uU3'ecr@gmc[D76MLaq'c=jGZDjPB:7.37h]GCR6JRo$SP#/Ti=[<M\d<-$oof:a;jJ!=R`-4?qNC<iflpc@EGiK6oHrJ
%lo;AeE4.$>T=$mQ,r)MBQOo-DBY8>#&()29e9E\iaA?Q^9JJogL=B$(VLPn]YN!H;9EP<UV#/YN^dPE6JC%bC4@DGJ[%iZ>aV!+A
%^;E>:R"R1Gp(NgDA7eS^ariZ--q/<m+RiILKVkgVc+Ngjc9(8A?e3X*5TC#H=Jq-H4<f&:MtSBOS'n4,fRXsTi0R]e/QDf0(OD>q
%L2D@=`o2Ftp/E61ER8%2`?I9T!*cA=&9&V(_Uh_7n`W7l+-(DbJt:]S:Kn'Ypf-H,k4D,sn!uO:*>pm$0cq,8E3Z#YjJ=VL7jhDd
%AH:8ueeB%U5k$aA$T^[4ODGtD6$3oE`XZ5ILe&pbP[ret44_K#h^YdJKm8g)VO4CJZ6uC1,3jUl*>!NX3V#/j'S[)gdoI0E--)+$
%=*G?/Z%"JIVZ9(KeVR!d5GRdQ&Xu10mD42L6h1ot9p4B^j1r5QQ`EJkhHqc*$j/tK9M=0K5NW?nG;(m4-(_iY0VKLiktK02:uM[c
%'VVER5"'k0Uib!I([5qY);p$tdGT_9E(FcW_9;J1fB!i<0HZI8&BJQMU[Q[8r0ci-a!(.[r(MK4cp!KdIn=Fhk_'C.R]YgI1aWX/
%(^Q>jNTVa.\Oo*bN$H#j3Cp.$_2!feM9q]6B9r`.Dk&IPbo@VO3L6jL8Ztd?Y+`'ZT`LIVUDXpIiMrF#+&#jG6u2i=RYT'9DINd7
%;+_FR_g8(K%r'V2js:#):Y$XVe/`E]G8:mN*f>E:l:5Qs4HqADS:=BE\sXE:e8:S=C^=1+Q;K4TEa(4>h^D>qjj4.E!+8i5.Lu#p
%1i`AF@Zlq$Bq>SV(s&[:)hXO*iT2A_?DdYA-F-F=Peb'830Za,YLPhT%Zn"7dS:BL"]r(\*!kU6aUlVkTTd/6(\p\:bQ0S7@RKjI
%U]?!Os*4(97M;oKn(d3gaIHZ$&Wn>"OA-1e@Z';_"Q7*t5&>79)-,2gr$LC\"%.AMSH:7S-'Xo51Th*N>#@n+[6_+\-t]\+l%J+b
%<U6#i-1\s&g,tlQL'[I#Y.Qk>J-GNQEf&:/2"`g.CrKcW.gI9/$,.'O!Et7#n*e\,O%)9k@mCN0_qH;)I84ZfqG&3JbF9jfH?d-A
%E"7kY3>&6ABb1^^R2hq(SmYIXPlq:WjP%ScTCVHF>Hrp<,"L3/'p&5`]psAN$q-^TiA6K*>qh'_AI&?Pa`OKtKDpf^"+7A_&",Ws
%lrV,h*A;)3(bh?Y"-0'7d0e#JLkg0j5uMZ$Fc?m)X0$1lMeMAG\pu@[5mg9o6ENr;%$6T]kTP9,.B-F2$6nUU$,jpi*igCa&k%*]
%l,+E8]a!%mMLh$>[+&fUZLf=pS;Bd'O7;(Tj+VU]':TqGjRN_rNN-WI'e:5eMJ"GUBe<$8)XG9(e>tup@6?JWpTZr9=f;S!//ONq
%<=hQ4L7qo"l*[4j'Pq&F@&hp(J.C:Bdr^@nZr/hFe;9Go+79AsE_))';rM*]<jF&Be14#>On#bO1Lt$d`#(a$bSij6>;\Rg%tN"F
%kfm4FbrShcY(g_5M!Ee_Q0"!AaX=s/8CU5KiAb\=T4nf!J(_CBVp\b&Ei+o2cbnL9[a+>g&r9Q:OC\.Uj+PJ-7QG%[^?.f^F/2qP
%q?r1q:_W\2*1+Xh3(%tAFcN`U%#G/;!r[N..\%+3e$S6M('=u6UZQo8lkrMIJ=$InM5lr;.E<io1nN`8\YKZU-k5:#"\F;n8qYQ?
%=RUa((?$bs4[#[WRMXp]?5Vn)aSS&6kE$(cR3t<`V/?a+-j,W:,"pTCG35a0n5GOX)sYBb0=_u"Ik]!lLG2?2U2a8S/V*qH-[u7\
%>]1CF-TO>?dN1`q6CPOfS`2r6eV.BT^lA%n>n(55,g%)r$ld,PG%M&a6Tbg)-,$f2fGcm?rJ*-uA^Ch?<jD]fIeXDte,uf*P=22/
%$[U&!9'd([K6cqg&k?[R.?aXen%\^u]J$&NNkR.g4Fr?^;[qH@^$F#:IK+iTCt/0O(]Q*PX@VIt*@'X/&F4Q@@[8&>oS/M3@RQ0d
%.cAh;n0)'D:tYpbA(<7.7$@?fcfn7t\O;Z34F;ds2qNt+)l/j=r.(0;>eeN\asH"4U%!9UZA!:U&j1%a=ZEL\jbk#;G?(D9%]tC=
%THX[f\GSpk/4uf1$*D07Q*Hh.B;(u,<Y"VHjN^1>(6730fdW**%d;P1i\es?)..DFn]KR`e62mN=fhAaPrsuU`6JgL1N)Rj>Ocb<
%"uBl]8C$kHX=J-u:'tS>nR6enGn.HTl*HbM#S8Ymn+*0j1U;=kV%70TDILh`8VSO/!Y?FlhB_)GCurO(5pWRW"-GSU2A\79S:&s#
%h5Hr<+<F?KUCq#GnSIrIJ[.V$*I67T)<"&Y^j'NN-Y#6VE(YrN*<7gFW-t_JF37,u8"lX`iC-V'=TiDed:qSJ%,%(uduo@OBEB28
%kE9M/dP]T9__cFs,H.C\Le'@NndRqC(i@3])O\,YOug"0c=5)9M7H[o&E?K;*)+O5?*Il4)>pBE0^q!b;DBiG^8KF1DeOYX#X.G<
%.Nqn3ho*u0)asMV-sj7egP,:->/ZaSYTO,S(8JlM,L0IIW^6]1\8kUq(n?%=Pd!+uNg;8K0JZ!8-a]hQ:Z7QHcl,+j!<COBV\:@f
%![sWcP-2u$&0X'jK;D]O:QSBF>:-'V:?bUWg%]@bKX8o7hg#i3WTL*+I>ikEOi`=A"mB8_80$lUq2;Nb-e;.,bcp/%isrkg$?Hr<
%!/-(OB`h+m;VY&)#O&W0'h]61E'j3)+EVA6Wn@5ohEb:CG*FP75\W2%LXHL#],O?PU!oIZ)a>#5"VV7^d2ZXS8HIQHTk%a-GcB1G
%dilbQ&n;h'4a7WgQAEWH2gG90F5s+''bbehr/Tcf:rOLU<TW5f%5"L)_TS0/N7Y^8cVG>&=m`NC6.HsZbh&2H3'KSrB&bT)BH$c7
%r/aSsZN;Qa-jQ17,hjk*J!BGBPfs-rnnhA-)YlE6R:7VF2!-rP&EAQqTW=r/^celWAe=$3K$YC#[jCW/F/_%O"$muJM98*lRl'\&
%&P>W+YK.SJ6%?jIA+o:X'22-KM<p-fA@7LsK;p0iBi$;_5T\,h>>ntH3o2Tl3Ci-8-GUt.G#aJsRhc?I6J9(I265Lr_sCC'b"tU%
%Y90;i\/<R<TTI1XEfm=n8D^8#=(@!0"6BW.A5^3R_Ar:CaK1%hKfP"-![Y1.;G8=c?Gt=#FqRarVruR/nsqCmr"e"N#gk%a3;?O`
%&@1s7.8;U'o1Y#ki)15d#Cq3@!^_ZA:.m3l0`akf,L.!ZkGMVW!Q^L7Q3SZfK%'p#l4/nT@\^Z)j`Q<A&7gKV/HnX1dOPORS'h^A
%%S?JJXlqV-rI^/jd"R[00;pKWk!bU"0G0BB*q-C]`E/ET1Pij"+>i3A'A67iV,LN]d@g=f/bC7_kopM-*891:bK0gbU<8EFaZci\
%8!(4%BNYT%rdp556H)\=$5reCnuBj7VBu4<]I61d#Pn(P6+9!U_7chP;?7Xm>=Q&+6\J9->+eg?Jp'WLQ3KoQ-1T0thOnY8#c]5'
%lB$?U`#2<[la@TE_P7%b`TF@r/=3K9(DVG!Y6%NrIKVDm?]NfuWRr)N8W2LJE>6sSq!,m+kSbg@[AHf1S=7]`/BXgIHY]r<='%u/
%KO\/M"AV$@LOu,q'L]2k/N&j8W\bD]aXN!-k.Ch:&XK9U#n2a@OlpG]RO#S5WZ;rkE&:98>qae/,Ga%O]&^QH[q[eYAKk?n;9p[0
%&q75`luuQ?+S%K<=6))Cs,u7od0N#X:m'jRMRI0==gRBBe93e[=L_AC+I`@fc-A9T0,bBBdH!-:X5TOq.Y7V!_f15S<(.VO="H[s
%n)fH0g&,aFSu.9@kS66/.J2iBKgh4+Ghu**hTXs6Eh:E`-hheN]R4`2E7\C+oBh_pNLDGTV\XsA2ZY5P3^t7FD5(e/E\"'CAVmRk
%-DQBP(Z+&<VLA[uDXaoF\R*KW&1t32m=>i(!3":J<aK+:-kp0X.tsMT#\&kas#TMfn%&qteA*K$.]B5[_+]0O#>,T,1>kjoLVZ0>
%['g+2498=n"FU9=6J7SE<\)a>:H<'\$;hSV6gh$*Sp@FB'G'Sr*[a(/%Omqpl5$i[4mpbJ^bC4&U8A&fGcT`!DWW(U49Asn0]@NB
%Z6`K:[bg@ST.D?+G>HR\b1,YF/4G6.S:k9TdSDBPl`q69m8hHbgp$;8&La"Ta3eARc6(Jk=<Q)&l%o)7r6Q]3glK)FOG!rD1&JT\
%:hjKtRZ+"'KrKeRC*u854O&\5S9#rfaJdVU.Y;^OOG%k9*TK6g8WG"?1;qV1Hs>_bM:k*"jf[r:%ou$F6'+M"g8uhq]E.$a-"N?/
%\uL)_3^e)ISr1t2P'p#h7$>+^Jp3HXaRq[_>KN_\q_#"+(gH6J*p'I:E1.@tKfj!?CkZhA8jRnS'bImkiS2GM?r[q6!d,b(-F-P@
%P%,[VZWOmTUr*\J+(Yb(dsX[`9^QZC&0W$^oF[oJ*TW(rI$#63Zt)&EbaUjZV+mAt_BA8K&P8`-ZYiUD]ZFpkZ[dq?KinYBjCG*,
%&#\DmAq'/BnHV7*4hntcUic]gdW6Ll=i@WlGf/bSVn5<FfH_ni/G:^5iW<EXUb"Fp-E=W`9!PP9$3ZTs0hq;^;o1V`To+<J3?IeZ
%Oj=Dh7sgIUp+Sh464F&ea1q/+;s[tIQQ3*nI8W9'N4i17IVr29]0Eo-AB@?M+65BGR=?4G/;6=e\=t4`4%Xtsr=?"(i.*If-!Oa<
%>(7:eD&?M)r49\4L[?r`^B*Z<J,d2*=X'8DBS]2_"MTj%mb]XC*W1>g2_=8.jQg/+rftK30T"N_7=Xpf)Hr/KX$SdX1)`"f3rZC)
%o>9Rj.Io?GmleF1[qeV:cf6()gj6V_6$I$;8r<b9m)C%U#c$XH=W?^aH?(FebnD'G-9DlfNY]Tu&obG3_\m%+'`s6:S&N=#R)P>?
%*05F?%Ieqhk.k\f%,&/ZI19[^i9`1/nO!-li0-B#l2PE+:Zh0VaHm;YMh79#M^F3ECC3G:''KW-.LGAq42,B+I<(,j0aP"a,K[oq
%N^Pi4AV%/PDZ?sVCPQ/fIf$>Ke%-r0pc7KL!k_>!Dh#L:R:Rlk.+$q8UlYUoi<T"BJ@F]]%K2GNXf6tu$YD"rN]eIPiC8eK2Y_G_
%l0[t_5r_/aRk,n"XBAO4"6#<(:o)S%q$Uu4iYh+K$1V!*GULsb@@k'Ei,p=;L@PupmuWrLHDn0b,aSEMpJ9RO`&NogB)<JR$`nCE
%B\-fp#*qHi`6*29;:^NUr?]Q=:Z"h[\eQF[)^I7%@HbX;ps>2OLGpc(6kAdrUP!)b1AC<M_+R$d1<J1cTI&N^b,\RAN/oVo0J#b*
%)AG"LO5(2X/CP[mmf2kn-MkOfiNF'8LlpOT0^WtlFWXL6Q3X2.)LPTPFku!r2`!<`C_1I)iDB+Vgba"($V21hB='CsSc=.f$.P(k
%,==$0>`Z#&pQl%l1)\/7:5@73'+eRUp7[u?,XW8$!eXL)^9IgQ<R@k#\l>?m=!"e`P7.K^J6\$aXrjt8i0#"tlgV=l+9'drq$UEQ
%,lQ*J$PS4'E<dpbQ]W>I3/A8S!$#c:hkDC4^=U4"n._6H^91u@];G[M$.Hq(LrNqpXe9X;C$CVV<&M?l[Nqp4H:7F)Hj27EXML65
%[M<eS?=[CDpYhalrccXq9ioY<Seu?86r2ra1].ok+PCds#P74@"F2DuJXai^-VK**)i%e<+jc*6?QOo3NLHHa^44#tf+rP!3\+4J
%PJ(^kS"iO2gTq+Fg)iY%gqr7_@gR,bECs[ig^`9ObnH?fU=Q_@klQ[]YNI&eg6W%+lp4f@Bn"nLZ%Tc]g=-7cfZ0+gh&@AGThb7$
%3KA`>DM+p&b[TkR-15V$1=7c)_G?>fVq++/mJPa<HY[[u2`W^;bW]VuiN5@-^W)l,#-dtn"H?)C,`'[H-Od^@hl_XK!V&(W2paa<
%4gk*+l!4n:FV[P7=;lc=BtC0fM9#(;Hr,q8.=3X,>a7=51o(-a0p=:3_K>j>1],B9f+s?+`hg&+imo4naiiq54O47u'f&Z>ERDo2
%KVdP/L+fl]RB4I%IUq,YMm$cS_!g*4]*r,E,eRi9*euC3"6r"0:XJ^CII64qg>]$t`tSKA0%/cJ!o8qjZl6I%C7fF_?JGCbrO<GO
%*3p/gm(CU0%J8FtC\,U78'o$q/UfpUYdD4\Yu1BX[nk4fD=Y"kjD=THh*UEcM%<8Y`3f7cJ'*e)/)A;U7ukjYesTIifR/71c.D,r
%g@&m-eu",^..SC&UGhCAnOBX3)n#D87d[V.ce=UF@EKlX@EOf2gtk<:&be25kb]%!h]m'/&i=^m_Utf8SD-R-\@23)]5fcVR;X6l
%S&L.?Iq7;\Rm6)/S;2:'*?L-F.Be<ZJEM2TVMa"3p/=39malZ%[efgblV=[`F?@<;d;oFDh8KtRDtW]Z=HHRDH<q<R!f)qfTAUYJ
%^OJDTqNI.G,L("YNnVP,IHHZ-Mk@/j?75Y3?-fSNbe+IghDaXjY@!a2SQ&1\?ctF9--pjeP84R%!KLdd5:Bp20>nkCkKVEn?gkLc
%QXP)V`]Kt2_<m1*J/SV.Hfi;KLdZjqV5(##)"tYW?'Dbt+H:g(el,l0[e3NBh6roTNao=uS"Hmkn)To]]9>>,>>OZdf0$aU<^0r0
%h_rGCRVh##H>h`MJaTZ>,h:^DTqr6GH6;>EM+=^CI_+fnST,frT?!j`Iq7GlAq.,cmQ#`qNh5:%6Ff)4Bg$8*+'SVj'n.O_eCpJO
%WU+q_Vs`[R^:!h5>.eL8S[<-2p^+ZcShhEkrCMmZgS.G%p@LPomj"0(g\c.^r]9.-m66Y./-!i/&+0@4D&tD\<K`e3%2'7.R]+a%
%Po[s_DTWL<p7uq!Xkb(lcYk()ol_R*.D:aPVo:ZZn*U)SNLg_Pj[uhSI0pLkHq1;mf42EW8Z/2fD2PWopN_W\i0@NIT<HmSk5@>R
%c\qhI`=K*M>SHeMpIid%I.*:Qa7i4iE3k%0o`qG.)o5GTg^%54TdP)!3M,57]0ARFoaJ/?B.UdCnK%;hF`7"%WP.%UFfM78pj&#E
%H0*WDkNfjKM-#;<aa@:l7m;B8p1N^*NqJsWj]LDU@>jflR]mRcU"pf`rGElVAT/l>WJI/,V=/YlDsdN(rRWdKKt&2A_^s\B`ubiZ
%rZhs*moHVkHA\=Bq3bH)m=)bfI$o8VGalr*#'f:kLN\0U)GIpA=>">B]SE8/937ANXY8#gE+mEp;WU-MqZG@+NT@&NDBpmbOh=le
%,i@AT!GX<EdpfEqio'`_TB-;W>Bi<>qm4d[UWoj)T&/WZrd\'fXa[u&I$s`pS38P)1D`9_qNKH;chC*"npKn&a7ln@5PqojIt/HM
%&NhqfNSoM:JnGH1`OC#?J/[blAgbl+I%TF(e?RW=h4LMJqi/1ob)PED8Uf`c>I0s*#%&_6#kjJX[/Q,6r6XfV<eDFY4/L-*^.0"*
%],'0'4LFtfeDQ>IW=a"n0@Z1J>M)K\[JL'U@)k)?ifm"fZi#>+rci,NB;r^b[lU@+U\K+tT=O(7mcUXeQ^KdirG4YP^b[?&[!U]6
%Ik-W(I,R_7;+=JGhiQ1U7-O\`o-ULQHX3d4i:s#'FXtPW^^'prN`1nqaSU39L]I72OQ@k,k<B01<PT"R#RNZ/HtDI#6fKGTELShe
%:=L4L&1d<DU*']&"&@JS!+^E1YD<MNp)u=O?CjsRYsd(nOujk-%hR6g*shHrl#20n"=#WOl5Qrba9tDb=(M0C_nh3-oT<,mW]Y0R
%6_h=N_leh:9GrM&,%MQ9Jg?pU=N?S\V3a.RN0>$5J9r_`Mrp/+#Y8?_)B^gD%PhbARnc<$WL1!r=clOD^rS&EiGmqH!N.V%qh[:Y
%9tV,V^-7Vs(]o)Z6A*KrDjpDfEj!JmUs/VhN7:?#ilTPZAGqJ8@95K7Mm1Q-Fthqcj!#?cMjKFMUp=@&k<M9VY'Qt5'.bi-K_bJE
%<5"9M?OKQbF%YA%CmATRPk$7Z`T$ZadNB^NF_2N=K:*1RZ#X@-cA2Vm$ogTSTU+%p;Sne)X@QV+k\*DZ`K2GO&5io\hAoDr(MI8F
%juX(oZ"bIaR%O)F>3sUkX^X%6O(3uDFAS2=%P`WSOD;?a-7mBW>c^W:)'otne9]VNY^i^-RZ+6t,\F.b/1m-aZbms6G<*hj^DP.H
%bT#KoA;(L8=uAp5e.<[W"2>uRFoCiaBil3CZiBV_b(JZ@%]pl\Ze@I93fe*C=LFl.7#m@tKhn/&YQM@4!$GZ%LqH-MN@ZC\9))q1
%@kM6o.&EY,4Af'E!Z4"PShta<b/XA*UPFS%Uq$gU#ELSXOcIKeg9YUWEiLc7`#@[f:T5oK$uRn\RmYoc6VTTh@_Fau^VFnL!c1gn
%+0_ktn1^4=IuL.R@Qt<Qa<NF!^-[5BK=m!/CtZ_I8<#)Ei4Y!J`)?ak\TZo0Wb3/C4\SO9'\+ZN)TK*e$9L$.1LC>!OGGtS(rrC"
%5ep'7!JMYR4rN,^RtG<*mR';dR71)>X"o?fBSc9[\UMU,bp6/m="RI$YS^MNELj1cEMT_\)G+(i=Y#s'n-Q?l%Q_9t9@>Yi))@@V
%kpd7ePb(V/D\L):_BpS:8Kc4!r<[J4#jXj6jE[alQ]VXu1^6.dFH:L-)-]:.K]`McR_oZuqf-Hok3fk#h*q)%]QZ(/FH!,nI+_dr
%$]pUA_JC/0h3kjKA+mt#BE<u\O\n`b/'e%#_6=i:#kk%+dkF:K9I*L[4WgP'@MM*Gk(&V$!Kdlpq?@",6d]SJ.?kS.JflcZ\VAYX
%Mmt..+qN.%Cs.KQRAKC>CJp/SUYQ.IFf5lg&T]=8hRJ;hc`GI#1%.2arLl2)6ZbE8Ug"<XVf8Ei;2gDAU):9f4P5nggboW`$"HRh
%<&cQQ1E99gP;PA^"UW(@?1)`@]@g=cjp)]iofHDTj@a(4:Ws<s!Q]1tFKOY!8;#'d[0QXfHV%'I-'TYFCg?_q';r_a#oPoX,rnjs
%VRW``ZJi2X29(RPa!![nc6L:MNUCd5)Ka#K=o:@h;^E9<l7'>*,l4POV%Eb"<!hn@EW+o`.u:E+6k15rf&a,0L]_LlCp:5Qf02u$
%@Ng=2gH-*,F64O!9$8(@Jca8EDgt6Kf-DOfrY^FF<oT>lQU/8bd-*^DT"&C,3TBIkX-eR3:J]K-iU(<K02tQX:hkceiV*ospK'1D
%;bn19S.W%"R-Ui/<J3:*]DSn32M`>Vj&c?#bbbJ/.`Bo779G2AX,je/;GHQ#-jja^a1f3b6V<ZMiTuH-ba"-n=W.)5keEb_mQH!q
%OJn1f_upK.EK;kB(c':DH6#$<EB4@#536$5*7X'os.C!RqaaM2<b\25a%&;aD^J,.cGV""&FLje+/hs;Yr6J8KddDH'QhgB_i.<W
%lAj&D?4d;1%uubq+U(dD2UlF,S>Ml'=iC6klf$<,ZoNKn7`(F`5d5DG!m,2ii)u;_aQ*bA!C[?+9-Lg#H+Qi43pk$&FeW,s85kcG
%.7N-3>*))/8=n5_"iQu"d&2tZhRZjIkk@e$Wu?oV$+q2r,m%ua1nK4*,o?p<M+^%gmp8d3X&4p\^3N(6\I+j/fG0No8q!`O/OR4q
%mYA!dc^dZ$]2D,g`nHio"m(l8\4&Ij"V?>OE''-Br",+=JL)`*S;(\'I?#elWEadjk\:*#_^%+]1[)OpiZnahR@[:-5XrW'&$V)l
%ED\u3")Xp35+q?@gRK`0FNo[,Vg;d0;V(`>VXY)?7\ODn!Ob1(@Gc$Q#gTUe8fStarA3S"7VNCqZ?ZZ+f2/@@1ZW2S!372mDK`4i
%ptG)s@t?.K5!uM7:Uq#ZF6PtR;XNSjp:XL,iD'r:;fi_$A+_2b47cEG%#7"TPcsK?B@M@u+""^+gnIUYO)WVE8s0Aeq5;0<B4+)T
%nu,3KE7-?A73%4"@U5WO\&0O,_FL8I^4FkY36U?u(GhiI:9^PG_e$CJQW]5\I:I]I;_m_WLdFaDk\"2sZ*4]e8.@(\PpXS@>=*C2
%j45Ge+)dNiJYYi<lo3%r;_+VFUN<2DVrjbE?pbq;0pZPj%U#Q/TVImBWS.TE)o]\$MfEBFRbC?T\5OoQ3*AT21('i&3eXOBV:p/L
%D3oD)Tf!C:3i^O($d27m!4oEp;#;,V9<$STk"bRG-5c77b*U4i9Qo8>Onk5r73mQp3'6_ZQ3jc:ljm!ur.rLY@,*EPTbT!^Wrl]M
%K^&.@ol,?Y#eJ@^9pRf-`mFH;Fsf(3D*M@"Dg$U/#k!+`]ElSWpZee(@25%[pYuFgB%Q4,i83(Bb]p,TIA,(mcKG2e"hJ<tkE"QX
%f;HaC]<3V$_c"S7.ds(@S.CCj9n@^lJGoB6GLU.238(p3XR.D\*OU.a[@mn5JSNV:/NfdmkW#%]0l/CNT8T;"ie8pc4&L5VG,E@d
%F<WK^6V+DJq"!NC5Nmq$j5m<#/_!t6T[oAj]57],#_/HY\gXRG`AaR)Bc!NhZ5Nr[@#>.8m6C5u%:qjh`8V3'N+nt6VkA,9(>eih
%<*Ql*ZR[P6jTrF1XqGl;FW1nY("=S^pC4EBmq"e65RV_18"/,ra/Br=6`mE1b0o)ZF<fQFK]Hr(?:KTI_eC&dCtOGYlX`A"5S!I_
%1QutX)"du7kj0clL/(OkNUZZQX)$-`iW&kHD)sZZ[=8]A-p!YPe8ZsQrB_a`Tn_X&4%hpm/E+aa+/%?)%FqU.9.tn"KO7l.)pi-[
%p&3t$eVf46J/7E@?YoQ>l3=Vhda_gk8^NId)b^&?9pT,C:JP3/G\@T.Tq:nuVB;I[5T\IY-;-"DDM8%#QEF)4.X%+9e8ZtEB_*o]
%&9d#PASG8,O7OiH5<uW1$Tbng/A2>#&q4EVD*X;]fCtJ-="asP"'VWJIBi#AW#LgcXfKFhPFrlR2jX.^ROl.dT:EK==caSa6Ts[t
%9g:oAJ/12XROl,X\e4p_=;o06%UPX_09k"JJ>Gja%rI'eq+]ghke2[a./r)he,p`(ATh$R.TaTQKaQh[8ueZ^EI=*cJ^;]K=leGP
%781fu8W#QFMWFm[p$;3>n-:DpoOA8G=0T`!3Gdu'4sW=*WOr^Db4PfV[2D_STm[&)c.[a"$f1u\f:qa+:;%Q;Z7GC2:2*)OZ=?i0
%:c,d`YHp6"WGE&L\f$BKa`9Lr94)b5o`?YliQ8\F/7VgmF9BX0N&nZCNJ-*+oMKejO>RRS3gsK>&3]OqF9>[=o`F$m9l%HVX91I[
%G,4R/.4e$UIuLknHMW1PA.?J.Nb6!MIgio>/C4ULnUeC_j@8W7&^6.FS8Pbpf>,@gVCueBBk@i[.bNb$B5jh])^rBncCL3T#ek>^
%)p%#D!uFU6(E6fcEM0(Po&DOi#3%r5ATI47j@8X(F59(sk8Lj4d^n'B)i+S:c''6A5rT>cb!7<:c@OaVr[FALqhZo5E!k:X@fmO"
%RZc`nV2dQTl!93/T>@@^3RE)?Horjg&U`\M2iu#!"tg+f/f_/$i]p$*jN_Db%:k%@bN.\Tac54/+1m(T4uR@7W-.'\2%U!RRO<;C
%K5Me>["1n7SccM8m.f3p1&XYGT$R:?:I]JjK?N`58>igHnG`6].EQcX5T(OLj$ahT["[;1Sor7Gmc2*cW>#<?6gqHc*IdpsDOr;Z
%UZ<YP(J^s7nXG$+$OFs)XS[&8qR:r\M(%On=TbJ(+=g'u[SDTD'S2oY7(5^p)6u^Jdeje#3u44/XK2ViV&G#3\($,F*7eL#d.l)c
%nK[83?4+HmC#K$I4o<Oq$bb?0dZa"\qO1;b%)fB:a8!GcO0p>W=<=a?D+AOIT!0<A;rV;qD]c3D&r#>Q2/.?Qgp_'8:Y;E'hp\([
%D_Z'@JU:@"68TPJDJ+RmN5K0/"]lpni3dQYlNO\H`PH<eRl8\l.n?ttCV+Y+m9)hqip8=>pYRM+U,tXdjX4u%'VVn$IsQsW+$9nd
%"D+GS>Y#^Be5<fj!5b0\"N)@HZ\bb@R("0C.a-Ds7'p%o;F/fJ6r>;_eff$@^/KaBKj^Znrc!j*2Kp,,qb:tf>)Lq3BO8Do;B0Gh
%#]S7cj_g(nEEXsDbG:dR?E<r6&W0St=`KOm(5LU/>]Vf.f<:Y[8)X=()THU]2W">DR/Q"MimAdiRE9q=0bl\(9'qFPk/Ue/k\rRb
%DNO<1#`=G&FU=nc`NQ^<CdB$UM#fV[><1W8%$]kfRpOi>_tr+lZbQH1D5sB*j33"\2O,:NIoADq@NMW&B/YS">-NFP-jjn0kmn>8
%bR%jFpAu$:[1e1cCWD+)D%:t#RKGG!of7mbdXu7V1*ND^>J-W4.iK"Ij#W#fS5\tp7u]fQ1-VPid$LCd`:^[5*pr#H@rIG".,l+K
%!l;HTUsL1\`P,X*N1a<=/^P:DD8gKGEBEDX^-ZbDms:a1^S*;H$Oa\\c]cp<G+El6e7aaVoX1GB1Yonah['dfYnK5W$GEED;9BW%
%$#2htT<F*=S_RiDm;X39'0K%:*m/VW&[uoN'0Pnhd-SkRkVBu3?7'oG^1M&%Z66"+1;Sj^Y%Yq&T4$1I"2?j2'Y6uBU6c1XTDRm#
%:2Vl]p,J--$#YC%c?,W8Ne6e8Rpab.%Uki7Ke=%?k[fA/kA,fa-OWge/eb>Ml\[G`JFA/VBXddPj>+CM?=qg'oi%V+gh,m>E=VH$
%lf@M$VeB>+:BA%_o^[3ca33?tme-CGS^kiN0IPWCkj++`B\ZWb"R*;D;uUZN1$.lD5Php_*pr#H@rIG"W"\M#Z]i-C.\b<^IhSLC
%QuMWJ*@Xb_]!H$u^.tW[M2.sE];(\pc:"Gn`!!$6`lVRX\WadGM"C3q&[R\UN4hC"UN&!9CJ/eA<+D9Eb$<,+"Y,AC2DbWX;]7#t
%$dYbeiSQCD8O=>DL[_B0qmF=qqPI=%cfj6Es,-D,nk;Sc#<I\d1@0s_8&\(_*r:a1-#Sn"AV:kr,ln@WNf_tHYRB2Jm8T>T'"Y-]
%j1$b^M/">;RN;8n]>ZOr+jJp<dWJ?`d&Ne5*f?EX?t*En;aj#=;-s.%<$2W[d-"r0VUAtIa=O-#.Uqg3Ui&#..'Y7d3hGDTDJMh4
%f&6mCm[8l'9(L^LkASCh=Bc&:rVn+K,,kKd`2m_Y9<(]\DgcMn2Q*g7fg+X>S5Z"hSt3,Yqi$D2oZUGK[taYp*EnD!J"+JN9bpBf
%1@#3+)1(FDFiiF^6?d$drR%1o?tPL(s*D60A*j%=Q*B#Q\5_U93^Vgpi06K->VrfAof,j3H=SdG\)]CTB%LmB(<\#R9TDg7jU)ll
%0lEsd/t:>=bFr!oS<g22Wp0KlJ_N)Jo8\qi%[Lp3:HR^uOVaVnjdeG^MhR)C693?!aR`#e>+#dRY&3cnF3]\93D[h@<qGD%+uOKT
%3>ge@0&tZ23HToYo:+$@"8!XV],j?%=9G8]m"V`Jbu-<aZ=2![l,BZDpVhN^RG2c#;nK0MfhK&VfiV:l15+/P:,t*'TK.*=ip69Y
%%"H-m7mBKos.lt!pPILA8q`t2?Ztss1<.;o_A'1)BcYKWGQfQSUqM#,McHCK[7n4CFQfS",$rZdGWpECMF9BH?,\=C>L.\ZYAio1
%-PRq8#MMM']6o=_7Df1sHjrUseCm@*%^_#O]Z=/&?[:pb-=6if8XpUeMG-4YAmrh`1b8+E?G;#EI"[E*7;'$YMgQOYd*/+W^-YoN
%Q#Q:/8nCWb,%%VC2#2LgH=r!4Hc.GeiJ\T;$A*n!3)&kR\CZX?rmhj6MH=QOU*Vhi$@Y%Y<P2cf-*kLJ=)chIXZ.Y6a_#1tLf^``
%5;2"2CHPggiY<o7Qm$5YYCW/37Cp@^0_^$YY"7DHO*83[J-;'\H*Mk_-LdmS"[AP4?,UN/Tei00Vl^g])suW"Z[9-(&[,;/E=DL!
%'u(L.ac"aNj.T&2.:-r:nAD'f+2@M#F#sF63@UpM"\,r<^NO*>4?(t?U/X9b@ipV#82Y$F+mX!fKM626RQ4V0=b&dj2!_Fc8f"@!
%WuqI`hF5cV8bH9@g/D."%gNdGqHpU^T@&t/fW(0Cni7T5n]TRuVG%c5A&U?]eHXq0Y)?JiD)rs$,?3goeDugSGSr!Xe0_,\lP*u9
%^$0sWcc46on(U@%e!["m@/DQ#pCNId'k(tOb>ZHXbP6Bggj-1#hsW@l`rktg-)=.*"rR*pg%6Q2a;9J1JCr,<16.mG'oPVl,"aW]
%QW.7\p5>HG)d'AuUI2;nB2EYUDDVer"Bk6"cH-3ED!?*T238FY%(eR9=XeML,K,[&Tm:=^fqFqq@-NI/fC2<`+o"5:A@/uUD`\Yi
%M6t6A0ej_fE0W`mIlGpdLV@/%(>uAW3W--DcVOufr>ee4.mY%>S!e=-SA<>aABk?Ynk9Or=\57@/D5&lqfogE[tnb.0;WRM3'1t9
%j'hRgYeS@L*SltW"/h3L47%s4YJkY0PuV-PC+Qb.G4OI;Ci?daWW2,Xkl5U^a$+A"$67BEM'Jra$pF>mcA:W<pE2A0f)2Ho8kGIg
%,?R@kM.Br*'P0j:MEoK1euI(-[;*W@br29=N>%cBRItce6jB:7YX'+2R#dRA%<rTMNCT.g+V.F#@a]!=-Ogs99G5<imKM>8:0EkR
%:lgQi[r5$<r-KtXgA^B.!h6.XGje-],V)j[r%rNm[+/VM9Vq?9[:_'E&n@*dX!)6r&o.%7D4'2bMO,!FPE%.99*(\6WWSn=l!#Jj
%cmZk##>BNT4S)uGKJ=]+I@H3?jJI+Z5.'aPhhFlF/<&IL(s.Oi=(Gl&gmIF;<Q-L<#aBh(c4`V(GsO$`#Gn4=_3eD!O!n]o&Ph66
%:tq!$ORhZ<9s/H6Yn*PnH-E6oM\i($7PhX_cU&p0\TlDS-?bX7[Xe'tA8Nt>H6ee)2OXne]UZ4.6q_+n]:Zc8$ibaN@I`@Qhs<)^
%9YH?e3?R+,X7,(]Sr[VTc-Hd>>uV?%h3*YZ+@jK)$$H@:S0[//YmWZ;odsiibl3Ce,`mtbUG6:oVEl_F[CuELdB'mC)5e-:SZ5\^
%h1e`<6#flK1H:W?1A.kMKuXKiGo?c2-f1BO].B,OjhH(_r6ITPH[`3kl7Jr&9D!W(6^XNi;7n,+g0K+7\gEZenG_%aa/jDj-(%`q
%\]ARa3'tX,<+L][jdAVg(A8f*b(bdBGbFMB^*6hKa<m7mXuZlE>Wu*YKKBjB-[a]R,rP'8*/TqY^(A#[dZ\W$9T7(,I]#sJLEnAG
%FbA/f2cZ^bT#6<*KT!d#ha6*A,YL4s?E7aM8gJ\X8Qm\J3JMRM,g*s3.rmV<-7/sFegTcH$$j[+Wl0PJ=h?9ZB"Ok:_uC,YY-i__
%hE_YI;Ni,Dn.sDW;C/.cLr38T2$uBr)Oa#I;H,\2h]2`[V_I]Bb=^KY[d3S^bRjcu`'$gVe6\-j_i28\],)I]2!nUrgs`WW(7Ll!
%a.q>0K&!^$*IV3jGr9c9f\<^,`][$Xb2(OR)rgeN:QK[>S$BHCH$nEhpY=6)6g`EKF7#'ujin$@5##tp,4fMpF"F;6F0umSSLhiF
%rSGrR'pY+qf82[E4(?di[%ht29tTrK[si)!KA14U4jN#%$Of+3lWJ8&p6$`b4>+1W*Ek%O;fl.&9:[-D(D?meVkOd#6R9$BC+[+_
%/4rb1")djgGoCfT:WSZ62r\)'/><D7N90WJLZU5f^8kpX8oV3<2nQ[+L]hRf7;>9m2CZ=IZig.PTPfff6b?E^^Aj;ciN]r,>9aAr
%kkT+gNb\/aNVJ1",[-Fq=]Q0pF/^-"frh[/I-_o'pse#of/5YM.%TgOEDFh^HmO6s.iQHlPBh=+>o+[H"XJ1,4c_gTB^X=;,,h,&
%Ill_=1P3n]>qmurL3,i\@Hh&eH(=J/W9.t2jF>gXpKM^JIZ5JKDH=h)AFo/>c(p^Q^5sf6T=_ONesnrA-.!k@XXZ%r_[I\#mAZAA
%c=W/K]OW@=$#CGN4Ns,X(U%L+b8j.E7%GqTRqPc,'tSeEg_\u][IaterJ6p(@be_/*g:3H#cn$aT0F6Sni;W+R)k/LIGd*GJRD;V
%0uXZeoqmi[/`o;;6\X\ao;_Ji8p9'9e0_^mBh2T,5Y(Vm:]1Ca.@Z9uYFOKrP<E/=]`j(h+cfk!KAZLU\?hc/Sju`^Z1bP'c!(3^
%RHPFfWkH"\l8-[_J\!:'8A[;m/K5L@*/YHJ.L/bWa?%N33_(:Y\bJ5M?o"#WI=ujhnPQK,\:55<39ol7BW6``Y!8/+,X>M+I1"j1
%9ZHG_lQc&Z`dcb"<k0*rTg(3c2A$-l*ILFks57Sci.q'XmLht1\K"UA:);#=@Vm#tZQ-td3?RVj@JmqP+.Be`Om8S!%E5$BQ`%a&
%P;()K'X=tfV#K>XP2J6=q-=7LcF3_f3dm^_2>Q0NS15WQBHD*B`+Cr`[p"g]JTUnLGHS33cL='TYn)6\`;TFIo!"`-G27:b^3sP(
%s1lp0S+QMmG[$^8$@\uVnNB#3Jc>D1e@P,$]8p^E?do;ZSDTQVs'08;mIIG/NITntdW=htQ*CSd2aM@cc@[bAU^*!Mq#;*'/NoQa
%aE;h1q@C!]7_gi5hrN4gOT>OjfF)2>=W)j69/b-W11mUGo^C%G,(^6[qpfA[3sDhQb>Z'i2]7RP=?>A_ULM"k&,aOtjLO5;3lCA\
%G,C48b+BtsL7r4IP8HXt?W0[SGH`Rb+;<#]gD?&poD@X(.Bq,k)MB>:HgZ-cMA\#J$Nu00ik?fPr!!D>bI:OaQ2E*;PF`Mud>WZ9
%`-PFD\^=NK#`CXP+FD8_91\C)%9s'\2\rr.J*m49n(I#T+?ZYUY>?e%UOQJsk6Ia\&;ru">QldC[sE'6g&p;2D7M$lrU]^MJaa+R
%"a;m@\QaR@QRM8OWSIfrUY9b,T*XUJ2oOEFpOR#1g>c3fh8[8SHPda$c1\NOF2$'c$GLXdd.]iJ4Z[AR!&=63pJLFY[X5eIrTr=f
%n/nD*[8Xf);dOb^F3#C*#Hh)\;QFTFauosCD-G<\5cHoXC)dFqXS^E'6"r1*V)9;=5W)Q?pCVp:oJeM&]c'&h#'<4Z&3RPX]u`k7
%NdB;2*"?-V="f6\UU)iaoAV9Kgdf2U3Xc%pmA"k;;17bY(a/MeAXY8sM/LV&gX$jn"4`-QEnWT^miD\j^f>>tA!+Crf*3Gu+ISm_
%EH%SZ)r0*!3OkScO&:FjiA`:e`S/e#g4o;LGZ:1"a_Bpc]mCGuqc:8XLILRrWj>`Ng*6In:4]B>`kPIel'dQm4[J``5\#Z]($1q(
%'P\eJeOC:#>XC07k#Oi*9_<qt7I<^1f]-.<6Uc@DJ3e:VAI9E:+]ORB;/Y9iV(0^`o_+8R8<mUsSqLU0F<(UNCQWPuH*6+\E_47(
%W5aAo,Z0j.>u)5=44U^>od9.*6+p2oeT$LA6XrX=6jmP!^FdC8TLI8TbZh'0kl_^3-r/r?eAd0BXC7?8+c*6`g&>QSP9QEO$r`1r
%X\lKBTTD^!+q3T)C8.M<0ej>.9PGHb%H9Mre?Xt@1<gD5Xb;"k&9p6OU+iJ_<Z?K)A[]Z+0%B_l.@lHd6k9O#fZmoYoi6%Ma>lp]
%S-NS*KRlUedMd6FLI&VU2I8g749j"p\,ELrA\QmcK[W=sf3rb^I"N'6FRN$ZdC%BK#,U3KY,.5pSFt=%e(Q2VoT7pDCnFNS3uNrk
%L;tDd4D2Q97,9f@"FiaTjE@mBOh/_RUHG:jpbaWNk+R;XofG$c=J8YpA#SX,,fKWW*1e[t'j)JE>.V+q*\QDb1nYD@Y&4-ONPS]0
%eXK*6h0?K9h0C1ibMTlX_)9<2l@@HU*iMd35u*`e;(pOa[5"NT\oVG*NNP21**nJj<Juj@/c"3@^Ggu&^624/EO:-?>7L7kd+k5B
%2V'YKD?&Tp(Dbp%\tYX2e]n:?eK?k4:.S.tK'RC88OR%RE8l/^=sYSI*c0EEBNZJ/+irN9mLDo07I@OSX;maJLM]s[H5f:s:_T*X
%gPHu<eabcq3IAHN$UWV#`$epZP-RS4"aBFf.)pX>:k5!?DK:^;dWoj,*Djia$a^B]ms1d6"N5FWTD/._<P8?4?eOFdKmpTm)0TLW
%[a:JN2('>=Q@1j<_@a^[g)kE2J6CfY]'c)[mM/'.;O\PINZOZ?H`I]EPJ5:@:V+0TRUhX2OEgC/B)a#Y%jdR6'g:kU0U?U7;7VhF
%olW?RQs'1D:*X',^))9\b\pPS<ZUO5[W2"4okfTq/pUd^4FC07'0YY%FAp^)I="QDD4*#i@Q#g&c#5PAq+GS!Dd)T;a)TNEL]bir
%6dTTWc$)5#nRRV4A3@=4KhV0)Xobr@+Jh\3@IaR(1iD[^1Eh4:EL(9c_@!J+I%-:`U2Q1,%5+Fu9H)FAJj0@%K[DQO0Th6+&hQ%9
%K2!=M*KoTUTCW!_V)gGj+\faYFSGak#^S8pM0YrseLigr=Moe:g_VSR$SmHX3Osqtn0CdJb]!`%ToHuR?H\Pp:S/Q/j]=TP^f&6'
%=-]th,c\H%RViu)L\`48lSXNX1RLot"S6':TmGa,>V;;n:.@cCUuIgF-n/&r#,d`VI'5G)1qqIY#_uu;i<e%N]UnAKl/$gPGo0LY
%>P5!N>r30K?PHV1dMfNNS6A;H:r3)W'3QX5hpR0Ba7&19--EF\J/IFjk4^eCq.oQU)ZoNYWo)['Zt`0nD0mWi'2#8,gYOB9frEf`
%$*K45gpZsQ.*7(mm\\hbA\Yo=4;.SLD/]4.0pDLkhXIV1Ch.=.5C<:<gNu0[B,bo)##L+Vk\*dJmJNB3\4Bjl90\4@kHmKK4'1n,
%/cZLPLDiNV:S;IL;l/t1Vki1$'qSaimZFN:l5.BK_sRCa3>.600,[A<MSV=/&>Ds@9,^3AlEZAA'i@]e;0[rh!KJh<^jNNbZ]$5M
%D8r1EI5p02f&LU0[LDe_<]rl7qIm1Fo%j3:*.ZWCKf=9Ja+uY+S(7\Y=q/_B.bdp@Kj>76f&c'g*KbBg`>>?"kEnfm/W(O`[gsj(
%+2/gnfqrm&Z*Vd([Yaq4bP[%qm,R4*RO?b$C!ZLfmO&M+A)M;k,WSj@";`'J6h]CaYeSl[Ve;cSs6u`X78Z'0a]L:X\>Iii+n^3u
%L-@1.!(/K>o6M@<>(]:g;*dKVn54@!:V(Hp]Bl^-is#g@`'$A!r$o-pGY.Om?;[=:)a*tIUj"uYd5t?H)4Hp+NTOfTc8jEH1P$j_
%L,o,T*^g.S\ajuicF_6m)aZg\h@n4CK`=EthNVE9>-q-OWlkgHg6+h2_%n"@()#dW:dsUA\ZFsn"]57E3\5qPn'[n&d[i9ZB4o%3
%R;N1cG_Nl!Uj&6<,bgfcAum8,/,:/Hp]PI7p^(.=_hR@O].BHq[m*3C,0#b(??N%;*7+AC8,96_4Wh$Tc14Lh_r7_^gB,H\GMUk)
%XZ#/HoHa;o.m$*pT#5DVYKHdcIanLACksM*5jq[5Q+aqPFV^>MKO\SWV],;p%H]1l@rW;Q&0KRYmbAu%8@QR/TqC:X]G@up]$>bE
%B-cKuJa+%11)-OKNlB6[?1h=TO&:4iYm^50gW>-9CMd_Zq7#,,7P;r'+]Drd5DJW6j]RY;crkSq*%XHaD=@ju(FW6'n/e9S#1&j^
%//QsTr[\4Ok6A"AC#P@,GTX.G8;o)[mBKT",+!&C*ke\]O%*(bNB5H-Ab!(#3;l+Y#>*Vq1]V815a!M7[ko='W$N(:G[R7R$)5Ge
%^An2oLqFaT^>^c!+]CrIR>556`18Z%iZL?MQ^m.2*tmSFj)3tBFs,sZ[K3j0'n,s[;`occkbdj1#Q+L7V\PMkMWr"n6kVnuADXT*
%'%c8Vi%/[E*BfhPFdO]"A?'0qXmG<b;c714(GXX]P6X+WFVRp(PJo06CqUJ+LJc7[of4t3;J:lo/ZUa4A=bN"j6uWc9_(qJL^nZ@
%U_UG#@S(B?)"lFVF"tEA/o!#](210I['-;E;cJKud&@@^G#ag--_+>c@=6\umN*/G7oaInc+"T.kX3]WK'L!.YiPlP&7uCF?s*0b
%ZB0Uu;D$td,FJUQ&^c.1*GjdGD//nOWF\b1?8UkY(VSa."u+,['\OaE4Sk:^$6i<=kXAc8me**p2&q17IP7=SX''sRfQ2'jbTW->
%i!iDU=,/-f>G?l-N:;fjTcUf/V&\2$9k)aYgaE;3^(,fh7(<TU(ko]H%a+J0%XjPSE><Q!Qd:`+_)`'ZD:*4^d&?5KjM"2IU(9Ia
%QiQfK.WAF:0aZ,Vi;[9u"#ib3@isU"F"HmUmVNm.#*O-!(W8(liI#b?B;qhOMe5p"kN!Vn$7>)X0m+F[>qg2@<*#<S>[)^(%Xrg@
%GPjO4(f1u\52DDG$-$B(AmUhXU'_EK.nCILE&Oh3aFQ+Ea1.k>mb4&%U'3u0J8Y[R4V'84d^srY..tp![*&thob!SV46`K8`6nKB
%Fd$L[5nj`t]dEJ7UJjFjMH`E#c3EN;6!f5V*)A;aL!]"5k,bVYEZ,ko"`F_S7"g/JWR!.9bbM^XIfmh;@5R1R(7_2MgZ?#"m1O/1
%VG/<Fn[P]aJb#j(:t-X0G(=hQn?FJsJjB9SnrOsP"-oi.,\tXO$r@Jp2R<^6<c!3k+N]H9H.t[%XdS3g/*^ES9k(+9H/a#`N5EV%
%r\4rt!L?3;>VV2,@"\AppTVTYTW1(G"02S9(tA+$iK,Su\C4e'G6)2"[dE_5XO?!L,pNXBA4"6:>@4cH433=J6]=I.)KL"fP@pe`
%*3?/nJ2$1mO/(RS;%UULVEVO2W`jF+7@h\m3W;^VL8Z0eo:-.=2i=+cedL\)C/)2*o!+=X*uF;5BL-->oJ0AN1.?)Jade=Tk9In)
%4&eF[cNE5+eM5"C5!b3b'5-1jO\$7&c':NUls[1B;sTj.((9MUZ*<#CO46M4*8R*!:AOgIl?/,CDK;7<==5.0734?Qi[Pl=/n]#s
%UE9Xq>X[(cHkIJ-NFMdfYBr6b'U5O;1/Z8tE@emBKZ?YC.%%(+QK1`HAJR[@6i?7F$Agrc*#6FfO*O/%1SS:ad1hL?PaH?dq=>8O
%U0aoI>h)*L*[W^;5J_k#/;MkpA/X?JcnuFB/4I)D6d`+?@5M9+!RWE>fj+"Na=ob*)XO7dp<E4)Z:HN>qDcOjdPGi5kRua+P4fn#
%/?oK!aCU%!qHDpV&D!,%(>et6AWO"AF)&u%[9u)WC+8OClaY):*77/1/b*BZ=&g22UV"=`i6.$IqXp>4P2G2K>S=)E]4L]*#87SR
%r'QONI+^9bGh10*d;1\$a;9.]#mBYT9=O4V"N#upd)fX)>^1/&^:`Xubo>\_Y.j.gS;PU3l#8g0a51VQ+^!f`NdT`gh@:eIjQU^i
%)J_ukA&Ltp@2BOZ'oatHk_>@r;74m^$/R(`6F$Fo]sRIdbq!&Dd+<.e8Zs7KZ/aQiqZ_8Eg(_u\Vc]IH9VGI<G"8kg'IkJM/!ZtD
%.@;I.hA;MId^km3938QX&g[hu8lo[a?9\UO4HrVfHV*I$[pDVZ8FTn/JhY:@0&_>(6$Qr%K,SAPhlFF9FHLJ`kH4MS0R7THFZ)P?
%CMuQX'sR[=42qcr0pQbuA6?R!/,S!j'GY1DB/#dr4kqA#BI_E5!Znrh,Y-DmAC'7YArB9j;'&FlV0P6@Hc9[B>"4q$lYR:db/]dT
%R\C5D4T"UP'].;:Bi(%q6^'o6%K0.?1(L-_XHT6E0Xr]=i4]1GV9Oh!q_n1C&qPBOQU4'r0OYI%4t#MZd;9o&3eO@cl;of^:?##n
%89jd(WO8j[n@mpl)[j4[C<<&`+_jgq#ZiYeF#`6#RrF&alU;Sf=hMB&>;0,=qI+A^5T;i<dtN5mAaJu4F[$nV\QV-C%Aui*fhJVU
%EC1piqh=N%M+g26>8*!-lN%&.J*?#&`lM&L-^ubk)NBhi$cNh_E/qu-lP-r(5$h,>Mol0NaqPlSp^G;,_f+)8+:1UI]d97ZBLkma
%7"s>3&cROC+J#[9h[2hT-anXI)!T]@oqiHXCUK48YM",Od<XccZd?C?EK!LpDl>O:O$WcVCtRf[;N.m+b/Igg9>G4o.RL".6FlDG
%Dc`0)ghlBC@1jhH.2_i]!H<=/AG^bqf0e=UkmTA7kO8%Dc9]XMQK6gMP,f9n%-,Nh<kjkXR.S"E94Z,O>`peSB"I1mVj()4"=MQl
%iVr9r61PQt?JuHQh5q&r8AQpkf-SQE$r8pV@tNnp0WdW/WJ'Kc[<b^iZ9%gC7Nk^V3\^-?#<rp.YL=VBMeUph_;-c>p?_(Vdr'`u
%aO`l;,D8Hb>RFIN=YJi.LT4*T>jjn19u4-?#>aWRA/ZCk,ohf*hia(V%0j;Q)GTkPX$1'E7NIOPe,jiH6TbZD\Clc*Q6.D3^g#6p
%$PkSP@O5>(*Y=$CGo_[nU41(SZ-?]fgp<%<@(]lf32??<50$+4*BjIcK'@MW&]*\O3+a::CRK1UT0J#)#!6XP1e5rt2ge17^DlZe
%QGL:W`$.Pt-\`>BBUphi2g2$/MaVjXX$9*a^hJf%p9OCgea3t2T[6Oj3scT('`#X45Gd_p4$J/H19(tURF1>!?:G;@eP]7YR`&K!
%-qEOf-2/qteZ]0Rp*-:l1E6e*8<CCr@]EpBK8RNCA+e\D]S'3H(*P5%@lP6t6FTCn$MkLX\)FmQH8*1q7^\(kG?"EjQ`&mc=ZqL1
%8>JY&BYYe4;!SD(d9op<pb1dIQ>\3<:>=P.%'L5D+Vm7Ok3XP\5*9V`b*7f;Sa<H&^u]`b/)i;4M_3p&:$P?).G&\u;.g+)o<YTC
%$%d_*.cDq7X!`Dm='=4MgR&5#>UHpo;`GSU`!gf%<CD_`PC'X4Th$S\s)!>A?8g2&On9]6N3>SVC1+h.JR;dVfEUs!h.e.kP<bFi
%(D;M:&[,XU*O"1lJ*54;+R.?N<tHopf$^KWR6Wa2MPjOFKih:rYs1rGX@8_g>%kmDI%*fk(9/QI>TF]6<o[j,[ICaqn'G<H5>0Uk
%jRL6m)+@<l54$8p3SE8`:mOaBUSg4OgIN5r'1Z?Zqa'5giaRW7)^.?UI?+tne)lo2YYrh9qZ3j*;K'o[o/'%>2%i*2)d&/SengL%
%#4?h5nCLIiL3K+A85cHZj/T8XKHnIG(t`EtUuHDh*J;udE[I]UPp\&,0)jbm"q28tGWm(bg`GX&]i=,_/&rHKs84'>puHfGo0]fh
%.-bNaRP'u_6?P5j8@_VA;W/s2QXB93b7Xe-!nm8U6r$&.Z*Z6OJ1aJ!/ZA5u-Ad<72jL5"ZUL64U*M_XD]9ZY//)@B0>(-.'.i:+
%=CT?a\[aiiJSDiEFB&3b1`04\<NeUlipBrn!78KAI^]E0FapfX7q)^b[M6dK!"q*q')pG7!GneXYOP+*TpF40\4%EVLA@eej%eq@
%SdkO!pVedl-KH"uGrMgYZ&Kq*_LUI9"B+duA(qm(K`S>bY8+4!?&r>1S)mg(!uI.*@Tk:7qWc,L;!1Ba1jhSl)^$MO.=Q-<c0;Yn
%SjQqVhQK]ArF5!i_D&`>a#BIbkaeGR!h"lB:@IA=L,0#/>^0(6=`nJqUarg.hdV-B5r0`K=0pURWL!p],*9U2enE_\b)Vk-VXrA[
%3R$TPZ1P#289cC_<3Ucrc!;jg-pK!4iN:qUjEVXlRX4Tn!Z@66b1`4Jga%?#DFcPLRD`jc%E[)GB:4Hb59^tL_(6^>7%PEKaoKX+
%msE7gmUi55W=A.m7PV@*E"7/>)u=DMUs+c^jb_jXWm;l*5nbW\+M,#$rIa'ATli);Hn+MD#L-#XcoA8a)d^aJ$EO\:2DlQp=hK@u
%b+4L@^kKaJ;-o]aT3>*Er\cShHU5"j%XX&,k6BF(#mQ/../.DP.Z5<jSOFfk"VF"O1esda@E^@q6DWSlUSiUp#q3Skm>Bl+FTTF7
%bJKD<\YDgOFe?9a>TX7O(%4*+K<.fggnrS8d7kWdXMj1:9jL)_+24Z)e0RSCO6><W`/jt5C[Mg@WOncagnh;VrS54T/_H$)g`cQ!
%>J?V,bQc.1qebaH^0C/la1,`JS%NB@5Bl[+Fd74QbR+F?gKA1PhLn\-gqeErbcbkIY:T*_]ZJ?[08V?hTl10^(e$%aY>IgK+2?.L
%jBkY4f/PEO&U>'MM+]d_a`31Ujj%Ktdf2MWW=2XOV*5_S`@t9e0Jo5t1F=eKf^GsSCi9SjML-k<+C[8qoL_`\_+ZgEmmYZC#Q2Fp
%oghs_U*5CBQ=r.:Oa.hkR#Itsm?oB^fT;c-U5fo[P/^1=`>ka#&jF.ge>94^"3`X+6d[Zu:6rPmJs9<fVj^p1BF\3@1(45QdjI]6
%6M")GldM/b@(Np+GS3qVV#WXn+<'0qJU<IDgNd327A8VQ6.Zii&7]tKkc$dG`U^aCNLlh7bug"P.s*+*kOMj_-80m9/lO_kT7>q>
%k(Rj'\i%j%RS+#XiXP-maDa$5Gmu]n+,W\i"e5+UFEYuqnC,RGnC(%AMb3jGSa`B9Dmp?CR?<FBY139-+:=IOOS&mMj..VbDL/9:
%#=O<77T4fjdRB/4Wfp\a'J9m@5c`n+LbhI9k&Z`2Q^h:c+5%2oM=W#+R1/JpaDMp/p1Uft7j.+#FVl*=4k;[7/rGXa6Q9Q[n]U"I
%OM-52!gs;/VfB8))hLC9r#<RPA;41%7WXN@S:e1TI_3uY;&h_ZUa:OdgXW>9^3'li"a;nagp=c$]JFC%)NQ4)]P''=O!8fV-5L(f
%Xr@kZPo7sU-!$F"fY7u"`R0]t`=2VZZ&NFnr,e\f6(DbhUXig=LN@?7CCn7gk,i[,$V'O:f<rZ^5nn;nAh4QYW9Sd%kU(%Z.T.S*
%kjc*m?(INP%+mVR:P<e0TUJ$h)\MoH56@h%cB!i^f=KIoeMWYfi7rFNp4M.TUfq%A#(d4M:+\sFd0.6`\S;l=\%@'hi9nQ.GOMZc
%F33jHX^srL;7g!FmMJ@p*peD0iG`QJ3HRa7PX58W61;*1B6D`@UraAir/-mQrI>eQX6Aj&-kd;CER`@U5\O/5d(;.1+ud9[TbEZh
%2&nGM/eC`Lg0f+]niGsZ0fU24Y1O,'efqTb-2.]pF5bfGh;i=]G]QB#Drh@`ZM?\Qo0F%FNtY4nG<B)Qbt`EPh$pM>F*UQq'5VZ.
%&12gajjp<m>T*%tXH&g+ZsJ3n;$?$8VL"HDLiWghH4@admKW*2],OB17=WqWrMA,]mEI\:kIPg-EI_>$p1YZ<<tdur@gkb'3Znn=
%e"W\6+JN'$E_tN;?EG9NF58$^Pp;''NqKJT+b%&W\&tg:/7S@Vl?0m!'^"s*&.&-mNcqMp*8jAVo^o&s2IDQ:`Shq7/p'G0($pO6
%;j^X^O?4T9bAT<H;_)h$Rp;^<CA<)aidP5D>QnClN81bS2A"!S9HAcDd3d1-YX!=:Dr8K]$q/i=*JHf5TQ[a&$gs<6EXpe>[7Ad<
%d$)YISb)M(oI`7p2/j;ch,r_ZrUjfKJfCQikHPEg6dQGo&hk"rP[nP=SfI6h+k,0;`pQh1>==\!`@.1GSR2V+##'X$BLo))Z13F$
%Jnp<3A>5_-W9G]9^P,=ae4emA#;m>0-j-nTRXrdherb$%]+)XS[mXleIDH0+l)DRST0i'`aQqT&7)^-#!s2.!4kC'Dh(Ku4#a0q`
%JZqDu&WXft-J;!FJ&Ve_CC1R"e$Y"S?l+K'F>!m0%;E6JetWDk02E'EN`qHh(#l^7JZGI0RSpbA<^meTM'aaOPaKTjm(np2N\s4/
%$j&.#s+DO;cOSs.#UQ22JlT$Kre(.2-Kh'qrB<,AL>@E=>#D]8X4ADB]@s_%Y$PpbpYP=*-mb'CQ7@',-ecCdEK=HR"f(qI*<l`$
%+Z0$mmLh$f:X)8.<^5CgmpAQoVVq!G<?XGU[!A^Fmt=ScoN$b+JlQ_kT6KC=4NbI*J:_;>0/Ub0>[T-c!&?n0ZCR_mfN"$A^?$L#
%+kE^[g<_g?0Z\tg3BW+54mH&2?.s*(>Qo=1(:cqbpT>>XlZThS++2j@(bPoiP1JEsT($C#S9pLD;`%mo@%3\$"M6F(*au2IBj*g-
%(_b()RmV;ZUJaCB;maR3@b(Q)p#tW%:I<L3Qt&_-Sh.)jU-.&mV5HY5[u+ZA%,uZAq>8<)5r`<7m&;!:CXosP'Wm@^b=/R!o9cP]
%f-&g@+r.P,]+7Btd8aHTo?e;lnC<P`O#r5m_\4YYa:3QuI':@:Ugs`#X]I'.kUspbVo;U+a?&/fPR0Gl[=T22$oE.8#3ce"gU@Re
%:+3YCDbY0O3MIKW3ee_(b&kDhbR7n6>[W4$Nu+NVS.ta+8qU0\qEqNE(MXoZe*4Z(@/HN26I1a'hN]Rd:KhP)'g-dhjIVojEZX*_
%7K;eK0Gt4%;2:8ujBs@2?VcS]V6nc]#l%L:h-[odm<d&./>3/U%763n7!P.6"5Z'-m/R_H7j?pempDiZ!3;l*SF[BO1fNI/BaCuk
%*VsrPoYclJX,b&4e581UCbV6`2qB0ikZM>L^M:?DIZ6AqcKmMEW9-OhYh;KdUiS[RH<iHk@fuktoe./&B@og%M1/6aFh*JPMA&A4
%i$ju8UO4"\$J*a<Th\peL#IjbI;E8bT#.hI3Y*pn%?sXR<%4Lg*&q:;=*$2T9$L".$"tQpSD,^5q1_G%;4NjI)Kc0(D7tdgI]\Gt
%L=q>-)h?.7XGn4PJlma%Sfg%>'IAjrK8/Su8d>W'%QUm'<J?@bL:#NU\]tp@9rt34[/so=C9CT)hN)Y_j`V^][7=R7oDF@mQKoZP
%$0B%#VF,C6)bL<8E]?<tQ/_o@%PG!$Po$RXe-[FUGMb\ThIXfCf_e_ZiU=]tCf/rKX*'&qFdq+M_kXE5`hajJ&`"i?K^ebV6$EUR
%*--_32!p!g(&F[USEn@L@.PeT#Lh?/a\?oK<M]<mR:`d1B>J+EAiI+,m=@74$Z\R0%>p=qO(oDUQPOB.<]T%lV0;=nq\bq2Zo,mM
%Jami`VKC,"eihEi'6Qg9U[T2X'Y^-q7GVSUqDn3`d-7Rd)m8D.B_\IoW==XZ[V20b``Ug0^5-8d@EoiQJ5J4,5dVTN56GS]fZ=:\
%p19RRl$dZjl,YH6&7gO&>7)/-=iC_B;c?Lser9EaA(Yo:`Dm$/R?WUE]oi9[Fr,u`cTTWIe98`jV_j1Ch9gaYold8&)Dqko4Q%rm
%R]*5l+NHPi<Fpj3\d`*bK0-)\A$Q+O1VQIkm'`eRT_d?D*\5AW;Gaa>bfmmL7gKd?\Cdu.+iPCP3g=M4=ab-*",Q<L-f**5;7].E
%#7lJ5Sn<HsH+j]844+0AD?Gm695oC\WQcL2fEJ63VQL.IK6Z]!VI1c2*7'6eb[;0_TLM;=i$a`ll35j:DKe^=P.V:P*Ke[#+7>t=
%6l(G75uTA8eRBHH2k^d/JKr=g(_+1+rVVC_0c6mG8RLPDG+_P!V6@aVKkP/b:UISnXPl+LTA=HSC[EU+5tE[Mn6dHu!Tsn26SUlY
%`93;\!)4c=Lo%.DnrrA%YO@]L/9,CPC96m,(7[qb+gF76<`HiD0B&_.BU>Q#..l;+:V*0H&CP!-kl&lYkQ'IbOqbm^[lYMGIW964
%Y>M(afrUHnMEMKe,[PK"K@!H)"/Wsc)MQf,^X#c5I?g&Mm0M,7+V1h/%SMPjh9jmIqY(,!K(f/@%X4%c_.k2PL(3n-ic+,9M8B6\
%=-'-G)Vl)kH_!^G2S=),2HW\jLZ0$Mon8?LM0[b,@?Rj?pfpZ*m25-Om3US,2dBQm'0TW0@\4<.,YP;68u2AgW;]J&JU%2<DoCss
%6ad-dD@%\<5rkE/1+".#>`]$F"fL%O$IT<u(7,?Om?pa@jT-saF;0E(\*,(uC`i^hna$"1)C(.(%PG_?R;N/<>V_k*CA9_pkq?B7
%YMT2,=Z0(gYqq78>T-1nOp6#.TV&8S!$=`dqGh8>QNX=##Tkdee+!iC\pSc5n<,#GL[=fA<>t#;U2&'81;oYg6O>h+GGUYI.r.-n
%l<!\j:t>%WENph]3+TI:kCi)(:7>]C6VTZr*(68:#&-ni2Qn#n"OAcZ<9)#6/pmaUI%\L*U8^TR_kA.*Y\t-d'7q&f:_+sI(gdi*
%Jc\WMjpjc\KqP<8E6=A\cL;<scE&`OV8gp-(\GEYnIdAX%c"tkD+,$*UqT84)'e9Gc9(UF$pSh/c>RJS8L#@RCZMsLZmPGmCgbp0
%p23Lf\!Op6,b!CllKicSIE6?CpBW[$lKg&)o2-KoOS]VMC?mu1`7GbBKSo%'.jI8I5nW,L$_UU5`ZU<hF@d#a6?<.6`Rt/eEt[Sl
%=QA=i[,(l-c;#dcXQ3P]ZR.*?C=$m'V$da6NOr4h+KY]ea^,1^U`hK$6EYDt)[eQ+V!IAjVEQO:L+.`[h_&beJWXNpjcU`l"f)J)
%i'Z+(F$%^(+dQta3GY(IGG8)M(XXcN::Xd-MEhpS*$Gp^-H8?/p2-*$7gSM#3.ug^!0t0H[7XWQCFKS;]J:`m?U-;sb2-1@S:Me#
%&;Obk`%hq0DnofH"Ej5@6l8>e"`n*O8SsAu!npK`RRbfU.AY/W8sVnC$Wd&`=LEeBg(0?g#tWIR@5*e,:iel>L9Y$!F9r(Z2=)ar
%H6Ujs7a>q.S3OAgQ^n>A=A(5KTS9:P;2C\8O`?lIeZ('`Q#75V(E7r_eR;rh`/<cAaFo4'mQO=!Y1a:QF;:<;&n)3B*"ZNa&7ZAF
%;mNF=)a*SJ+FX8tmSpgD/^pB+3#n8%dA4$dkN0B]>7`U=3SF!Z`mNSEOeOd<:)8=`4`P0@O+A+`)\06K&aBmk#!b/GU@:E-$Xe_r
%W3,ZR&GlYPdX_IgS$RB\#K1r]gPsYWeko)%@.^3tL%H@mp8rq\(SpckXm4CTdWl"UfO"21J"dAn/V';&IMk&09+*aql0VrA?7/n:
%<5,"\,Fb3YMOc^3Rc%%dOpar'FOWrS\&3*V(A-EZEf^4b5iDE2=YmuBKOObfUG/>%komSi&>9;J["5S71^EP%K"c%I&se,o08>+H
%6Wg=:\\N`WSXpTPER]A8WfUO%g,N/OpHY]@\uK8Udk0ls0tJ9*3#'3J\f?>o!k.$!5UP+jS&^XM@cq4-FR;s7Jm-?6YI$3`Q0P7d
%D&%hqUP?u70HkVI.eG>&[ar!@]4Xb(d9.EBW$X!C+aC4FiF,0ZZ:f,GL5-\?@a#aQGPSPBUD0)XCE0]D[+<'E#.Q:(@c6.HUImt^
%8o'kG\(\SfS_^[@_i_7imV5$tXrce7O@mT$,et]N=HWuCVkk\%-DZ$QV%[/=iG(:I6-_j!=23R)Y%5fn3CK9eB7[,8+MH42J\L(1
%L6?oUf*29\Z$a_;Ue]?[71MbjX!h'JYU3-=,Oqe[,@q,E?%7\7pF_7q"R2Sf&Zo%th.XeYdSoJiDU3&4d]I'I>6TH,Ph`%CG!f4G
%\%+g&\:K#d-Dh%Ur]g\r&?[P?cZg^^P75")TLOgqj?0e]oK\ftr?QUW6ojNYUhn4lTGDX_:hoaM5-9fnX\hZaff.gI#V$/tgCLj7
%k:I_pqBe^8>RA=XK^!OEjb[.Bgo0'?:km)-)&<5DaiptYE6_J4"3A$b*(`^7+Q<\s$Z_aoA#Rl*<KoAE0WCsRA\OaL0N[KEqM!K1
%$'rD!jKe'_?id5$g9E29(HdFXlT0)P<@0V,4Z;fs(`\T';(l+f)`gd>i+mojr@kE:[chA_JO:!6K/F[l$OK/(q?JW7P2#ZiJ6-V'
%#A>&1kUj_FGR`tVTT-_W^enQ3Xbh?VM;MNZ*$"EW1=YTO-S_)6G_0#C(ZrkHi=W=XMS3G3WiIX#Vr:KY=^8$UMHj'PM)*YIL&mr"
%N:5G52LQ$cR=:I`;1c?\7Tt&s&K\mVD)+94CTuMr.dD8&L"u%'.kRdM?ESMl<4q:uH6P0kpZ&B@`?hWA44SYF9,L;C#Gq5#G5*<k
%8[g]1W=kJb=jHe?K9]33%f0<T\G,)>ab'$SP;ftK#i1sQFC/$8Y9d@XCZEa`;bK05eX8m6VrYJF!X"J<`Wj/#fB@Yp5u*l^L3bf*
%k/>QYDTR!3nt,1.p\+pDFYQPj3Z=^K6L7GslSK*/-?cN#^fS^S%'qCg"6M]Pb!gT_or+sQY!]e5%`d$8U/O1#3m/]?5Wbrj.&P7>
%(^f"5hLM)#7S]91X&[)_0Q#Yr[l^jn4aO_#l>'L8RfIm-`uUG$hpAJr6tk3\_UT8q*$I:4)q7<3]aH"s#bTJ5S;14MM7s\k38Vdo
%:Q>Z_3pK_$hsL]OK"Dt[gnVX]SS8te)5R#e`9%8f`BPVt+jtQgm.B-Y#2+He";JK+H9lIi*b)87;]AU(&1ZP#S#9`RdCnjG8<817
%i$rE2=N#)?[/nA,i.d1!*MYe.[*SlfW5+.O`7/Fpa^\I+:P8;ES:k&8"g?S-6#JthYC=+2*4e8>PoPqm6B:6o2+V:Kg;%"@G>?7C
%qJ-2LFBBI5.1LF]37)r>M$,*rY-EYs+B&=J89'FlOtTH[XQ;KjPH1U)5ce#^C-sX6j/"E#***Du8aU7-d<0!EZZ<2^7d\m`a'0M'
%ZGf'kd.q,3G3fjn&oL=_%1+Fu1a%KoLL--BCDWKSR/9J#6`a?b#"'VE#0?=EjD[,MeI&%Y>4\iJm_bdlkj3b6%nTsj(W1f)3p028
%W=M:V/5?#S2FJG4V#G)2>`a>#T%\qm@dkc^nNlOL+eQ.Td4]_0<k7#k,BiD=IV;22OW`n,.YDdj<b.G]k*=.@UY(-u&eK[h!n'`P
%'b"Q?\]J\Zld]o4=prs^-J-?E*;(eg"Q;?_"b#QugnVW-1^#UUW_jDuI,*,dCRtd>7;@t/[/3raBZXf(B#b6Z(j90i\H<0ccZNo_
%=F-PY66VoM$F6f^Bq?'oI9<itS_XP3][k:c)Yk:8mV!SC`6b8[osW..Lt>40Lj#T4Qu;#K#&nV42T0@tE)i,DoPtig3M[G[Q1Ai4
%4)LFNEQpF'c[OSs@-/VDMjXh1j,R_dg7V9QoYjW=-UK($0feH'5)mtVcrRtUntnE^)e#lFWM'>",*B/J2<[)fi'jYG8ADS+\UrB=
%8++s_]c2j]5=(rN_f29R%HUSf[jT8<a5SjFfp<g!BRR]i7"q5fL=SUL'J`+1b]`(:`X)79=!@On)X%N32]TA4J+lsr`d75"k2"&u
%D+u:e2.^Q4Ul_q@"W8;U7pIS\Q=^lE7VaBZNNguXA).T*OH5T/9[KCReIp;KGPbFWh2+Sgf%Y,dTYAmA/`,>t:aTMKhd#/mIg6Pc
%'$NI+!9H!5$nhZQZ)as;M#a9k]!_kEc&OiD?3HA/?0^;[!CTRGf,1kX$=fk),IjKq(]QS/bfo8d$)?U@=E1Gm1IQ,XLrXbr,4?5q
%X?XQs##GpC*Q09F>]c#5q"fD..Gl"-nF-D=;d?3f%PA%U0Lm!edn$i?bG?;*$5c/m6C<YT&]#`NN>;(pbSK1\(j8.E2d_dc_G(,b
%bn%;pO$Q_U@M`jpW^-fY[_nK?$(<L@.H8i4GHo2o)B)HjTUl4+@ZdbV^gO)ABrCusVgL\5$;k7+4i7[aYi5\S,PTYZZ\+Z4p?Lo^
%3X6Fj,E9BAAIERDmF)l5I<eitjrO.B7qHWALY]2<bV2.5easBh9l?1sfPU^pghCa*!qK]%93u&1)\3P;flTZE.D1Na,.R(B0,A@u
%pti`e;D4-^6H%)u@/L00[U*\.;Lf=t27^TSXL6ZI)phgDc]5i3Fg**HTdBUjV0ihd)><2IAGp(8p8:^-FgrUW5?@5GCj3IkS'h\c
%F_6't$?H<S)ts]gI[riW!2.CJCFtnuJI%pu@q0D=faI=7R<Xj/MKt>#5cn;Jq3>>aWb8RFh&$jtA`1IZ;$.BlA#M26?<D\Q3qN'<
%,[$8=NU/B7E/gmr-00fZ,Ap[Jf0tHDcYuBKL\qb1&P1L8;gnU=LJO&\D%,s>87j$hNY0$Jq>`Dp3jV6q\P1[R7/[]A*^W\&Baq24
%$4XhI0c3^Y^;05\"%0`G[5GlVqFslaD(HmPFlS7i;XoK2KTM5@9()'DqOIGTe2-^*DAI=;I5hKU2<<Q\&7=Jeob_-WNt#M,^lAg'
%SuMU*pjG\,QAm&dFgn1l&D==AmkWGBeg/K-jc@WhcXrebS[n076)s$q*,?QTA)_bs0$N_@!ES:X(:MfRWo=3SqEUK"IDY7$L')uj
%l>`sOr(.-';]1:Z]42PNqJ7M`5D4-cBcpk[3?d$_6Bp\[4d`hB4D>jrF6d?ZmLiP8/18D.C`kbW'I*s9C./?b_Kfkbee!d;>Wm0R
%p1!a4`Vl+5'r+/X!#C^RfW[;qmJ_hJk,7;[f[8Z0BZTpF!!<bl<Lc`gS<j4N-Dc.n4?gf$^;Y#@^.!9#eoG6/?JedZ#i`,Uf/3'E
%E$P5U&F5R+<t/[m.qUD"G^@$&2Zalc,n_U2%`rqok!<[/k*<X%CXZ?(o^@"]<nG#TqqVTHJu]B1g7LeQF?>Vmd9Q5B&O5?V)e<P*
%-7f/S!1m[F"jWA'RWT`?:dq.V+ASOYh[4dIhJS'0R%D"D;trMZNO9@['E]eWI`'6H7G[AC!2jZ"c!q2#i1mUMqX"Zlj*<)?$8S2-
%e`9@3m"B!"CX@Rmf,1#YCH4S,!J*lmik2['pBoB@h,nulh1eAoK</p#@[p`WJfJ30?mt+_j>o*S,)O]f?=Eh3CW@r!)tM28*=61.
%a9n:u7*\!Yd,?3E0poe`q-[isY&47ss1[!Agb:Fei`-o%o_E*DKu"-^r73eB`M#,3%5%j94OOcrPHkF*NUUZh+h9oF%iMAlZN.*8
%?S/A<_-+JpUc6`en1b:!D5J:%Egd[F>X7a#<oB\*7EGsZ7CEcV!^D2E^`Qp#Kae,c`33uj&V(5^K#mKk?-`T!6=q`=)hYIT;K"0C
%$ZL6*$oo]SUH??(!Ngg-_5^F7n]"sS2:"lS1"4"@1X&*Q3s-ag$U?ccW<VP:.R[e!ilEZ9l[%`!.gDWnX*e&\+HVP'OW_pQb]J;$
%_2Z[H,aOZ&N(Yk_d0_W_<e?gW#54KjQn;S<NsA@m/a^UTJ,fMMoN)iVqi;Ec&-'3<pODtus*4FY^]+#+hu%'fJ+m=Mn4u:J[m0iM
%J,T$"TDnP&roqaYq"_r`J,&%GOZ;CAs#pDJb<Psia$9TrJ,[oX?iKsfs7uZr_+3gD^\bWmpb2[3Du\u"!PMp:rr~>
%AI9_PrivateDataEnd
